{
  "swagger": "2.0",
  "info": {
    "description": "This is the API documentation of Bit8 Adaptor application.",
    "version": "1.0",
    "title": "Bit8 Adaptor",
    "contact": {
      "name": "Intralot S.A."
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Common Wallet Operations"
    },
    {
      "name": "Draws Operations V1"
    },
    {
      "name": "Metrics Operations V1"
    },
    {
      "name": "Retailers Operations V1"
    },
    {
      "name": "RGS Operations V1"
    },
    {
      "name": "Statistics Operations V1"
    },
    {
      "name": "Subscriptions Operations V1"
    },
    {
      "name": "Systems Operations V1"
    },
    {
      "name": "Wallets Operations V1"
    },
    {
      "name": "Sessions Operations V1"
    },
    {
      "name": "Players Operations V1"
    },
    {
      "name": "Wager Operations V1"
    },
    {
      "name": "Sessions Operations V2"
    },
    {
      "name": "Players Operations V2"
    },
    {
      "name": "Wager Operations V2"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/v1.0/cw/session": {
      "post": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Retrieve a session_id",
        "description": "Retrieve a session assigned to a specific player game selection. <br><strong>Bit8 operation:</strong> ?method=startsession",
        "operationId": "rgsStartSession_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The session request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "End session",
        "description": "Close a specific session. <br><strong>Bit8 operation:</strong> ?method=endsession",
        "operationId": "rgsEndSession_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The session request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/cw/balance": {
      "get": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Player wallet balance",
        "description": "Get player wallet balance. <br><strong>Bit8 operation:</strong> ?method=balance",
        "operationId": "rgsPlayerBalance_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "header",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerId",
            "in": "query",
            "description": "The player id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerBalanceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/cw/round": {
      "delete": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Closes the round",
        "description": "Closes the round for the Bit8 Promotions. <br><strong>Bit8 operation:</strong> ?method=endround",
        "operationId": "rgsEndRound_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The round request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoundRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerBalanceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/cw/validate": {
      "get": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Validates the Player",
        "description": "Validates the Player. <br><strong>Bit8 operation:</strong> ?method=validate",
        "operationId": "rgsValidate_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "header",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerId",
            "in": "query",
            "description": "The player id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/cw/win": {
      "post": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Win request",
        "description": "Add bet winnings to a specific bet. <br><strong>Bit8 operation:</strong> ?method=win",
        "operationId": "rgsWin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The win transaction request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bit8RgsTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/cw/rollback": {
      "post": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Cancel bet request",
        "description": "Cancel the bet of a specific session. <br><strong>Bit8 operation:</strong> ?method=rollback",
        "operationId": "rgsRollback_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The rollback transaction request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bit8RgsTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/cw/bet": {
      "post": {
        "tags": [
          "Common Wallet Operations"
        ],
        "summary": "Bet request",
        "description": "Place a bet in a specific session. <br><strong>Bit8 operation:</strong> ?method=bet",
        "operationId": "rgsBet_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The bet transaction request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bit8RgsTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "Bit8 Error\r\n| Error code | Description |\r\n| :-: | - |\r\n| 1001 | \tInvalid player account \t\r\n| 1004 | \tPlayer Account locked \t\r\n| 1008 | \tExpired Game Session\t\r\n| 1011 | \tInvalid API Credentials \t\r\n| 1014 |   Game has been Blocked \t\r\n| 1015 | \tInsufficient Funds \t\r\n| 1016 | \tPlay Limit Reached\t\r\n| 1017 | \tPlay has been disabled \t\r\n| 1021 | \tCannot refund transaction \t\r\n| 1022 | \tCorresponding Bet was not found \t\r\n| 1023 | \tTransaction not found \t\r\n| 1024 | \tInvalid Game Reference \t\r\n| 1025 | \tInvalid Request String \t\r\n| 1999 | \tUnknown Error  \t\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/draws/notify": {
      "post": {
        "tags": [
          "Draws Operations V1"
        ],
        "summary": "Notify for a draw change",
        "description": "Notifies that a change has been made for a particular game, for a particular draw (Bit8 operation 'syncResults') <br><strong>Bit8 operation:</strong> wageringService.syncResults",
        "operationId": "notifyForDraw_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The notify request object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotifyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotifyResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/draws/status": {
      "put": {
        "tags": [
          "Draws Operations V1"
        ],
        "summary": "Creates or updates a draw status in Bit8",
        "description": "Create a draw or change a draw parameters/status in Bit8. Used for non-L10 games that do no exist in infostore (Bit8 operation 'syncResults') <br><strong>Bit8 operation:</strong> biService.lotteryCreateOrUpdateDraw",
        "operationId": "createOrUpdateDraw_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The notify request object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LotteryDraw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotifyResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/draws/{drawNumber}/notify/games/{gameStateId}": {
      "post": {
        "tags": [
          "Draws Operations V1"
        ],
        "summary": "Notify for a draw change",
        "description": "Notifies that a change has been made for a particular game, for a particular draw. <br><strong>Bit8 operation:</strong> wageringService.syncResults",
        "operationId": "notifyForDrawChange_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameStateId",
            "in": "path",
            "description": "The game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawNumber",
            "in": "path",
            "description": "The draw number",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/metrics/{id}": {
      "get": {
        "tags": [
          "Metrics Operations V1"
        ],
        "summary": "Get a specific metric",
        "description": "Returns a metric by using its id. <br><strong>Bit8 operation:</strong> gamingPortalService.metricGetByID",
        "operationId": "get_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a metric",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Metric"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Metrics Operations V1"
        ],
        "summary": "Update a metric",
        "description": "This method is used to update a metric. <br><strong>Bit8 operation:</strong> gamingPortalService.metricUpdate",
        "operationId": "update_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request for a metric",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Metric"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of a metric",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Metric"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Metrics Operations V1"
        ],
        "summary": "Delete a metric",
        "description": "This method is used to delete a metric. <br><strong>Bit8 operation:</strong> gamingPortalService.metricDelete",
        "operationId": "delete_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a metric",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/metrics": {
      "get": {
        "tags": [
          "Metrics Operations V1"
        ],
        "summary": "Get all the metrics",
        "description": "Returns all the metrics in the system. <br><strong>Bit8 operation:</strong> gamingPortalService.metricGetAllCodes",
        "operationId": "getAll_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Metric"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Metrics Operations V1"
        ],
        "summary": "Create a new metric",
        "description": "This method is used to create a new metric. <br><strong>Bit8 operation:</strong> gamingPortalService.metricCreateNewCode<strong>Valid fields to pass:</strong> name",
        "operationId": "create_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request for a new metric",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Metric"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Metric"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/retailers/cards": {
      "get": {
        "tags": [
          "Retailers Operations V1"
        ],
        "summary": "Get Player active card details",
        "description": "Retrieve player active card details. <br><strong>Bit8 operation:</strong> gamingPortalService.playerGetActiveCard",
        "operationId": "getCardDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerCardDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Retailers Operations V1"
        ],
        "summary": "Issue a new card",
        "description": "Player requests a new card to be created. <br><strong>Bit8 operation:</strong> gamingPortalService.issueNewVirtualCard",
        "operationId": "issueNewRetailCard_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "cardType",
            "in": "query",
            "description": "The card type (false:virtual, true:physical)",
            "required": true,
            "type": "boolean",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/retailers/cards/lost": {
      "put": {
        "tags": [
          "Retailers Operations V1"
        ],
        "summary": "Report a lost card",
        "description": "Player report a lost card. <br><strong>Bit8 operation:</strong> gamingPortalService.reportLostStolenCard",
        "operationId": "reportLostCard_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerCardDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/retailers/cards/stolen": {
      "put": {
        "tags": [
          "Retailers Operations V1"
        ],
        "summary": "Report a stolen card",
        "description": "Player report a stolen card. <br><strong>Bit8 operation:</strong> gamingPortalService.reportLostStolenCard",
        "operationId": "reportStolenCard_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerCardDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/session": {
      "post": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Retrieve a session_id",
        "description": "Retrieve a session assigned to a specific player game selection. <br><strong>Bit8 operation:</strong> rgsClient.startsession",
        "operationId": "rgsStartSession_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "playerId",
            "in": "query",
            "description": "The player id who starts the session",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "game_reference",
            "in": "query",
            "description": "The game reference",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerStatId",
            "in": "query",
            "description": "The player stat id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoSessionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "delete": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "End session",
        "description": "Close a specific session. <br><strong>Bit8 operation:</strong> rgsClient.endsession",
        "operationId": "rgsEndSession_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoSessionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/balance": {
      "get": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Player wallet balance",
        "description": "Get player wallet balance. <br><strong>Bit8 operation:</strong> rgsClient.balance",
        "operationId": "rgsPlayerBalance_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoPlayerBalanceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/round": {
      "delete": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Closes the round",
        "description": "Closes the round for the Bit8 Promotions. <br><strong>Bit8 operation:</strong> rgsClient.endround",
        "operationId": "rgsEndRound_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "description": "The round id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoPlayerBalanceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/validate": {
      "get": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Validates the Player",
        "description": "Validates the Player. <br><strong>Bit8 operation:</strong> rgsClient.validate",
        "operationId": "rgsValidate_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoPlayerInfoResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/win": {
      "post": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Win request",
        "description": "Add bet winnings to a specific bet. <br><strong>Bit8 operation:</strong> rgsClient.win",
        "operationId": "rgsWin_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The rgs information send to the PAM",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CasinoTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoTransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/rollback": {
      "post": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Cancel bet request",
        "description": "Cancel the bet of a specific session. <br><strong>Bit8 operation:</strong> rgsClient.rollback",
        "operationId": "rgsRollback_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The rgs information send to the PAM",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CasinoTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoTransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/rgs/bet": {
      "post": {
        "tags": [
          "RGS Operations V1"
        ],
        "summary": "Bet request",
        "description": "Place a bet in a specific session. <br><strong>Bit8 operation:</strong> rgsClient.bet",
        "operationId": "rgsBet_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The rgs information send to the PAM",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CasinoTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoTransactionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/player-statistics/round/top-winners": {
      "post": {
        "tags": [
          "Statistics Operations V1"
        ],
        "summary": "Get Round Top Winners ( for casino games )",
        "description": "Get's the top winners based on their net win or gross win<br><strong>Bit8 operation:</strong> statisticsService.statisticsGetRoundTopWinners",
        "operationId": "getRoundTopWinners_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The top winners request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CasinoTopWinnersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CasinoTopWinnersResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Get Player bit8 subscriptions",
        "description": "Retrieve player bit8 subscriptions. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryGetAutoPlaySubscription",
        "operationId": "lotteryGetAutoPlaySubscription_1",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "subscriptionId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Create a bit8 subscription",
        "description": "Create player bit8 subscriptions. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryCreateAutoPlaySubscription",
        "operationId": "lotteryCreateAutoPlaySubscription_1",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "lotterySubscription",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Update a bit8 subscription",
        "description": "Modify player bit8 subscriptions. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryUpdateAutoPlaySubscription",
        "operationId": "lotteryUpdateAutoPlaySubscription_1",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "lotterySubscription",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/subscriptions/games/{gameStateId}/settings": {
      "get": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Get auto play configuration settings",
        "description": "Returns all the auto play configuration settings of a particular game. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryGameAutoPlayConfiguration",
        "operationId": "lotteryGameAutoPlayConfiguration_1",
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameStateId",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LotteryGameAutoPlayConfigurationReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/subscriptions/{subscriptionId}/disable": {
      "put": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Disable a bit8 subscription",
        "description": "Disable player bit8 subscriptions. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryDisableAutoPlaySubscription",
        "operationId": "lotteryDisableAutoPlaySubscription_1",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The unique id of the subscription",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LotteryDisableAutoPlaySubscriptionReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/subscriptions/{subscriptionId}": {
      "delete": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Delete a bit8 subscription",
        "description": "Enable player bit8 subscriptions. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryDeleteAutoPlaySubscription",
        "operationId": "lotteryDeleteAutoPlaySubscription_1",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The unique id of the subscription",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LotteryDeleteAutoPlaySubscriptionReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/subscriptions/{subscriptionId}/enable": {
      "put": {
        "tags": [
          "Subscriptions Operations V1"
        ],
        "summary": "Enable a bit8 subscription",
        "description": "Enable player bit8 subscriptions. <br><strong>Bit8 operation:</strong> gamingPortalService.lotteryEnableAutoPlaySubscription",
        "operationId": "lotteryEnableAutoPlaySubscription_1",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The unique id of the subscription",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LotteryEnableAutoPlaySubscriptionReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/spb/sync": {
      "post": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Synchronisation for sportsbook teams",
        "description": "Call to synchronize with sportsbook teams.<br><strong>Bit8 operation:</strong> wageringService.syncSportsBook",
        "operationId": "syncSportsBook_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The SportBookSync placeholder",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SportsBookSync"
            }
          },
          {
            "name": "manufacturerName",
            "in": "query",
            "description": "The game manufacturer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/health": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Gets bit8 server status",
        "description": "Gets bit8 server status.<br><strong>Bit8 operation:</strong> gamingPortalService/biService/wageringService.pingGetServiceHealth",
        "operationId": "checkHealth_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthCheck"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/countries": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get all system countries",
        "description": "Retrieves system countries. <br><strong>Bit8 operation:</strong> gamingPortalService.countriesGetAll",
        "operationId": "getCountries_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Country"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/pep/data": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get All pre-defined PEP data",
        "description": "Get All pre-defined data for the PEP dropdown lists. <br><strong>Bit8 operation:</strong> gamingPortalService.getAllPEPData",
        "operationId": "getPEPData_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PEPInformation"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/rules/bonuses": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Synchronize Game bonuses",
        "description": "Synchronize Game bonuses.<br><strong>Bit8 operation:</strong> gamingPortalService.bonusGetBonusRules",
        "operationId": "getBonusRules_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bonus"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/vouchers/{voucherCode}": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get a voucher's information",
        "description": "Get a voucher's information based on a voucher code<br><strong>Bit8 operation:</strong> biService.voucherGetVoucherData",
        "operationId": "getVoucher_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code to check for the bonuses",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/platforms": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Retrieve all system platforms",
        "description": "Retrieve all system platforms defined in the environment<br><strong>Bit8 operation:</strong> biService.platformTypesGetPlatformTypes",
        "operationId": "getPlatforms_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/The Bit8 platform information"
              }
            }
          },
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/limits/games": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get System game limits",
        "description": "Retrieves system game limits.<br><strong>Bit8 operation:</strong> biService.playLimitAdminGetAllGameSpecific",
        "operationId": "gameLimitGetAll_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayLimitAdminGetAllGameSpecificReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/games": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get system games",
        "description": "Get Bit8 configured games.<br><strong>Bit8 operation:</strong> gamingPortalService.gameGetAllGames",
        "operationId": "getAllGames_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameGetAllGamesReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/limits/deposits": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get System deposit limits",
        "description": "Retrieves system deposit limits.<br><strong>Bit8 operation:</strong> biService.transactionGetAllAdminDepositLimits",
        "operationId": "depositLimitGetAll_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionGetAllAdminDepositLimitsReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/rules/promotions": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get system promotions",
        "description": "Get system promotions.<br><strong>Bit8 operation:</strong> gamingPortalService.promotionGetPromotionsRules",
        "operationId": "getPromotionRules_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Promotion"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/segments": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Gets all player selections",
        "description": "Gets all player selections.<br><strong>Bit8 operation:</strong> biService.playerSelectionGetSelections",
        "operationId": "getPlayersSegments_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerSelection"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/tournaments/notLoggedIn": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get the visitors tournaments",
        "description": "Returns all tournaments where end date is bigger than the current date and not logged in users can see.<br><strong>Bit8 operation:</strong> gamingPortalService.tournamentGetTournamentsForNotLoggedInPlayers",
        "operationId": "visitorTournaments_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TournamentExtended"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/tournaments/{id}/leaderboard": {
      "post": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get results for a tournament leaderboard",
        "description": "Get all the results related for a tournament leaderboard.<br><strong>Bit8 operation:</strong> gamingPortalService.tournamentGetLeaderBoard",
        "operationId": "getTournamentLeaderBoard_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the tournament",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The pagination object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pagination"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LeaderBoard"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/spb/entities": {
      "post": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Gets all entities from bit8 sports book",
        "description": "Entity returned based on options input.<br><strong>Bit8 operation:</strong> gamingPortalService.sportsBookGetAllEntities",
        "operationId": "getAllEntitiesFromSportsBook_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The entities filtering options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/The entities filtering options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sportbook entities data"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/terms/conditions": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Returns all terms and conditions",
        "description": "Returns all terms and conditions with their versions. <br><strong>Bit8 operation:</strong> biService.getTermsConditions",
        "operationId": "getTermsConditions_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "The T&C status",
            "required": false,
            "type": "string",
            "enum": [
              "Expired",
              "Current",
              "Future"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PEPInformation"
              }
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/players/{clientId}/restrictions": {
      "post": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Add a restriction to a player indefinitely or for a specific time period",
        "description": "The player maybe kicked out of the system depending to the system configuration<br><strong>Bit8 operation:</strong> biService.playerRestrictionAddPlayerRestrictionWithOptions",
        "operationId": "applyOperatorPlayerRestriction_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client id to be restricted",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The player restriction setup request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperatorPlayerRestrictionData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/loyalty/schemes": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get System loyalty redemption schemes",
        "description": "Retrieves system loyalty redemption schemes.<br><strong>Bit8 operation:</strong> gamingPortalService.loyaltyGetRedemptionSchemes",
        "operationId": "loyaltyGetRedemptionSchemes_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoyaltyGetRedemptionSchemesReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/external/games/session": {
      "post": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Start a game session for the guest",
        "description": "Returns the URL to which the player needs to be redirected to start the game without being logged in. <br><strong>Bit8 operation:</strong> gamingPortalService.gameStartGamePlayForFunAsGuest",
        "operationId": "externalStartGameForFun_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "query",
            "description": "The external game id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The custom options for the providing of the game session",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameSessionOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameSession"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/players/{clientId}/kyc/status": {
      "put": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Change player's kyc status",
        "description": "Update client KYC status to checked/Unchecked<br><strong>Bit8 operation:</strong> biService.playerUpdateKYCFlag",
        "operationId": "changePlayerKycStatus_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client id to be restricted",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "checked",
            "in": "query",
            "description": "The player restriction setup request data",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/errormessages": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get Bit8 error messages",
        "description": "Retrieves system error messages.<br><strong>Bit8 operation:</strong> gamingPortalService.getAllSystemErrorMessages",
        "operationId": "getAllSystemErrorMessages_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ErrorData"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/questions": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get the available secret question list",
        "description": "Retrieves list with the secret questions.<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetSecretQuestionsByLanguageCode",
        "operationId": "secretQuestionList_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageCode",
            "in": "query",
            "description": "The language code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecretQuestion"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/players": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Retrieves player's details",
        "description": "Get Player Details by an unique identifier<br> Use any of the following combination to retrieve players details:<li> document type + document number<li> personal id (government issued id or OIB number)<li> clientStatId<li> username<li> clientId<br><strong>Bit8 operations:</strong> biService.getPlayerByKYCDocumentNumber/ biService.getPlayerByPersonalId, biService.playerGetPlayerDetailsByClientStatID/ biService.playerGetPlayerDetailsByUsername/ biService.playerGetPlayerMinimalDetails/ biService.playerGetPlayerDetailsByClientStatID",
        "operationId": "getPlayersDetailsByProperty_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentType",
            "in": "query",
            "description": "The document type",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "IDENTITY_CARD",
              "PASSPORT",
              "DRIVING_LICENSE",
              "BANK_STATEMENT",
              "UTILITY_BILL"
            ]
          },
          {
            "name": "documentNumber",
            "in": "query",
            "description": "The document number",
            "required": false,
            "type": "string"
          },
          {
            "name": "governmentIssuedId",
            "in": "query",
            "description": "The government issued id",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientStatId",
            "in": "query",
            "description": "The player stat id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "The player id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerProfileFullDTO"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/transaction/types": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get all system transaction types",
        "description": "Returns all the system transaction types.<br><strong>Bit8 operation:</strong> biService.transactionGetPaymentTransactionTypes ",
        "operationId": "getTransactionTypes_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionTypes"
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/cities/{countryCode}/{regionCode}": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get all system cities",
        "description": "Retrieves system cities by country and region code. <br><strong>Bit8 operation:</strong> gamingPortalService.citiesGetByCountryRegion",
        "operationId": "getCitiesByRegion_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "description": "The system country code",
            "required": true,
            "type": "string"
          },
          {
            "name": "regionCode",
            "in": "path",
            "description": "The system country region code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/City"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/registration/data": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get all register necessary system information with options",
        "description": "Get all register necessary system information such as countries, secret questions, citizenships and nationalities.<br><strong>Many Bit8 operations combined:</strong> gamingPortalService.countriesGetAll/citizenshipGetAll/nationalityGetAll/playerGetSecretQuestionsByLanguageCode",
        "operationId": "getRegistrationSystemInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countries",
            "in": "query",
            "description": "The system countries information",
            "required": true,
            "type": "boolean",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "name": "secretQuestions",
            "in": "query",
            "description": "The system secret questions information",
            "required": true,
            "type": "boolean",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "name": "languageCode",
            "in": "query",
            "description": "The language code for the secret questions information",
            "required": false,
            "type": "string"
          },
          {
            "name": "nationalities",
            "in": "query",
            "description": "The system nationalities information",
            "required": true,
            "type": "boolean",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "name": "citizenships",
            "in": "query",
            "description": "The system citizenships information",
            "required": true,
            "type": "boolean",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RegistrationSystemData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/tournaments/active": {
      "get": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Get the active tournaments",
        "description": "Returns all tournaments where end date is bigger than the current date.<br><strong>Bit8 operation:</strong> gamingPortalService.tournamentGetTournaments",
        "operationId": "activeTournaments_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TournamentExtended"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/systems/spb/teams": {
      "post": {
        "tags": [
          "Systems Operations V1"
        ],
        "summary": "Gets all available teams from bit8 sports book",
        "description": "Available teams returned based on options input.<br><strong>Bit8 operation:</strong> gamingPortalService.sportsBookPreferencesGetTeams",
        "operationId": "getTeamsFromSportsBookWithPreferences_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The team's preferences filtering options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/The team's preferences filtering options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sportbook teams data"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/withdrawal": {
      "post": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Withdraw",
        "description": "Allows users to Withdraw an amount. <br><strong>Bit8 operation:</strong> gamingPortalService.transactionWithdrawAmountWithOptions",
        "operationId": "withdrawal_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentAccountID",
            "in": "query",
            "description": "The payment account ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The amount to withdraw",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The extra authentication required",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionWithdrawResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/withdrawals/{paymentKey}": {
      "delete": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Cancel a withdrawal based on payment key without session key",
        "description": "Allows to cancel a withdrawal. <br><strong>Bit8 operation:</strong> biService.transactionCancelWithdrawal",
        "operationId": "cancelWithdrawal_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "description": "The payment key",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason that you canceled the withdrawal",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTransaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/vouchers/{voucherCode}": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get the voucher",
        "description": "<strong>To be removed summer 2020</strong><br><br><strong>Bit8 operation:</strong> biService.voucherGetVoucherData",
        "operationId": "getVoucher_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code to check for the bonuses",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherGetVoucherReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Redeems a voucher based on the voucher code (for retailer deposit use)",
        "description": "This is used for a deposit action through retailer channel<br><strong>Bit8 operation:</strong> gamingPortalService.transactionProcessExternalDeposit",
        "operationId": "redeemVoucher_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code to redeem",
            "required": true,
            "type": "string"
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The voucher amount to be deposited",
            "required": true,
            "type": "number"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherRedeemData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/bonus/forfeit/{bonusAwardedId}": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Forfeit a bonus - Replaced by /v2.0/players/bonuses/{bonusAwardedId}/forfeit",
        "description": "Replaced by /v2.0/players/bonuses/{bonusAwardedId}/forfeit<br><strong>Bit8 operation:</strong> gamingPortalService.playerForfeitBonus",
        "operationId": "forfeitBonus_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bonusAwardedId",
            "in": "path",
            "description": "The id of the awarded bonus to forfeit",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        },
        "deprecated": true
      }
    },
    "/v1.0/wallets/balance": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get Players Wallet",
        "description": "Retrieves player's wallet. <br><strong>Bit8 operation:</strong> gamingPortalService.playerGetBalance",
        "operationId": "playerGetBalance_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fullWallet",
            "in": "header",
            "description": "A flag indicating whether the full wallet will be returned or not. Default is full",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerBalance"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/bonus/list/active": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "List active bonuses of player",
        "description": "get player's active bonuses. (Bit8 operation 'playerGetActiveBonuses') <br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdatePaymentAccounts",
        "operationId": "getActiveBonuses_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerGetBonusesBalancesReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/retailers/deposit": {
      "post": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Deposit (for retailer use)",
        "description": "Allows player to deposit money through the retailer.<br><strong>Bit8 operation:</strong> biService.retailDeposit",
        "operationId": "retailDeposit_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The data needed for the retail deposit",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetailDepositRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetailDepositResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/deposit/methods": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get Deposit Methods",
        "description": "Retrieves available deposit methods. <br><strong>Bit8 operation:</strong> gamingPortalService.transactionGetAllDepositMethods",
        "operationId": "transactionGetAllDepositMethods_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionDepositMethod"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/account/withdrawals/{paymentKey}": {
      "delete": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Cancel a withdrawal based on payment key with session key",
        "description": "Allows to cancel a withdrawal with session key. <br><strong>Bit8 operation:</strong> biService.transactionCancelWithdrawal",
        "operationId": "cancelAccountWithdrawal_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "description": "The payment key",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason that you canceled the withdrawal",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTransaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/payment/accounts": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get the player's payment accounts",
        "description": "Get the player's payment accounts. <br><strong>Bit8 operation:</strong> gamingPortalService.playerGetPaymentAccounts",
        "operationId": "getPaymentAccounts_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Update payment accounts of player",
        "description": "Update player's Payment Accounts. <br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdatePaymentAccounts",
        "operationId": "updatePaymentAccounts_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The input list of payments accounts",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              }
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationToken",
            "in": "header",
            "description": "The mtan verification token if two-factor authentication is enabled on project",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/bonus/list/all": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "List all player bonuses details",
        "description": "Get all player bonuse's details. (Bit8 operation 'playerGetAllBonusesDetails') <br><strong>Bit8 operation:</strong> gamingPortalService.playerGetAllBonusesDetails",
        "operationId": "getAllBonusesDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The start date for the results",
            "required": true,
            "type": "string"
          },
          {
            "name": "removeActives",
            "in": "query",
            "description": "Remove actives bonuses from the results",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ArrayOfBonusAwarded"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/transactions/payments/{paymentKey}": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get payment transaction details without session key",
        "description": "Get detailed data of the deposit or withdrawal transaction using payment key (without session key). (Bit8 operation 'transactionGetAccountTransactionByKey') <br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdatePaymentAccounts",
        "operationId": "getPaymentTransactionDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "description": "The key of the payment.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTransaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/withdraw/options": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get Withdraw Options",
        "description": "Retrieves available withdraw options. <br><strong>Bit8 operation:</strong> gamingPortalService.transactionGetAllWithdrawOptions",
        "operationId": "transactionGetAllWithdrawOptions_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionWithdrawMethod"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/vouchers/{voucherCode}/bonuses": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "List all the available bonuses coming from a voucher",
        "description": "Get all the available bonuses coming from a voucher (Bit8 operation 'voucherGetBonuses'). <br><strong>Bit8 operation:</strong> gamingPortalService.voucherGetBonuses",
        "operationId": "getVoucherBonuses_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code to check for the bonuses",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherGetBonusesReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/transactions": {
      "post": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get Account Transactions",
        "description": "Retrieves user's financial transaction history. <br><strong>Bit8 operation:</strong> gamingPortalService.transactionGetAccountTransactionsAdvancedWithOptions<br><strong>Filter criteria names:</strong> Modifiers, PaymentUID, BalanceTransactionID, <a target='_blank' href='/swagger/examples/transactionTypes.json'>TransactionTypeName</a>, <a target='_blank' href='/swagger/examples/transactionTypes.json'>TransactionTypeID</a> <br><strong>Filter conditions:</strong> INCLUDE, EXCLUDE, GREATER_THAN, SMALLER_THAN, GREATER_THAN_OR_EQUAL_TO, SMALLER_THAN_OR_EQUAL_TO<br><strong>Filter criteria values:</strong> AllBalanceTransactions<br><strong>Order criteria names:</strong> BalanceTransactionID, Timestamp, Amount, TransactionStatus, PaymentUID, TransactionTypeName, TransactionTypeID, PaymentMethodName, TransactionStatusName<br><strong>Order conditions:</strong> ASC, DESC<br><strong>Valid fields to pass:</strong> startDate, endDate<br><strong>Valid format for date format:</strong> YYYY:MM:DD HH:MM:SS",
        "operationId": "playerGetPlayerTransactions_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The account transactions filtering options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterOrderPagination"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountTransactionPageable"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/withdrawals/{withdrawalRequestId}": {
      "put": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Change the status of a pending withdrawal based on withdrawal request id without session key",
        "description": "Allows to change the status of a pending withdrawal. <br><strong>Bit8 operation:</strong> biService.withdrawalSuccess",
        "operationId": "withdrawalComplete_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "withdrawalRequestId",
            "in": "path",
            "description": "The id of the withdrawal request",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentKey",
            "in": "query",
            "description": "The payment key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTransactionExtended"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/setDefaultWithdrawalAccount": {
      "post": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Set Player Balance Account as default withdrawal",
        "description": "Set Player Balance Account as default withdrawal. <br><strong>Bit8 operation:</strong> gamingPortalService.playerSetDefaultWithdrawalBalanceAccount",
        "operationId": "setDefaultWithdrawalAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "balanceAccountID",
            "in": "query",
            "description": "The balance account id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/payment/accounts/{id}": {
      "delete": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Deletes the payment account for given id",
        "description": "Deletes the payment account for given id. <br><strong>Bit8 operation:</strong> gamingPortalService.playerDeletePaymentAccount",
        "operationId": "deletePlayerPaymentAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The profileId of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/vouchers": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Returns the vouchers applicable to the player",
        "description": "Returns the vouchers applicable to the player. <br><strong>Bit8 operation:</strong> gamingPortalService.voucherGetApplicableCodes",
        "operationId": "voucherGetApplicableCodes_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "loadBonuses",
            "in": "query",
            "description": "Whether to load the bonus objects, 1 - to load the bonuses otherwise pass 0",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherGetApplicableCodesReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/deposit": {
      "post": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Deposit",
        "description": "Allows users to Deposit an amount using a known payment provider. <br><strong>Bit8 operation:</strong> gamingPortalService.transactionDepositAmount",
        "operationId": "transactionDepositAmount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethod",
            "in": "query",
            "description": "The payment method",
            "required": true,
            "type": "string"
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The amount to deposit",
            "required": true,
            "type": "string"
          },
          {
            "name": "bonusRuleID",
            "in": "query",
            "description": "The id of the bonus associated with the deposit",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The several options related to the deposit operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionDepositRequest"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The extra authentication required",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionDepositResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/retailers/withdrawals/{withdrawalRequestId}": {
      "put": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Allows to process/finalize withdrawal of the kyc verified client/player (for retailer use)",
        "description": "Allows and finalizes the withdrawal at the retailer. <br>Player has initialized the withdrawal transaction through Canvas. Player must be verified. <br>Throws exceptions if transaction hasn't been found or client/player hasn't been verified.<br><strong>Bit8 operation:</strong> biService.retailWithdrawal",
        "operationId": "allowRetailWithdrawal_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "withdrawalRequestId",
            "in": "path",
            "description": "The id of the withdrawal request",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTransactionExtended"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/process/rejected/transactions": {
      "put": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Process rejected transactions",
        "description": "Process Rejected Bank Transaction and put a restriction to each player with such transactions<br><strong>Bit8 operation:</strong> biService.transactionProcessRejectedTransactions",
        "operationId": "processRejectedTransaction_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethod",
            "in": "query",
            "description": "The name of the used manual payment method",
            "required": true,
            "type": "string",
            "x-example": "SepaL10"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A list of rejected transactions",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/The rejected payment transaction information"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/loyalty/redeem": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Returns the player's redeemed prize from own loyalty points.",
        "description": "Returns the player's redeemed prize from own loyalty points (Bit8 operation 'loyaltyRedeemLoyaltyPointsToPrizeWithOptions'). <br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdatePaymentAccounts",
        "operationId": "loyaltyRedeemLoyaltyPointsToPrizeWithOptions_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "customOptions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyRedeemLoyaltyPointsToPrizeOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoyaltyRedeemLoyaltyPointsToPrizeReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wallets/account/transactions/payment/{paymentKey}": {
      "get": {
        "tags": [
          "Wallets Operations V1"
        ],
        "summary": "Get payment transaction details",
        "description": "Get detailed data of the deposit or withdrawal transaction. (Bit8 operation 'transactionGetAccountTransactionByKey') <br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdatePaymentAccounts",
        "operationId": "getAccountPaymentTransactionDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentKey",
            "in": "path",
            "description": "The payment key",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTransaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/sessions": {
      "post": {
        "tags": [
          "Sessions Operations V1"
        ],
        "summary": "Login player by username",
        "description": "Login a player through the API by username. <br><strong>Bit8 operation:</strong> gamingPortalService.sessionLoginWithCustomInfo",
        "operationId": "login_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "description": "The username/email/cardNumber of the user to be authenticated, which must be unique across the specific organization",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "The password of the user to be authenticated",
            "required": false,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The pin of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "header",
            "description": "The ip",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "header",
            "description": "The id of the channel used",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "schema": {
              "$ref": "#/definitions/TokenDTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "AUTHENTICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "403": {
            "description": "BIT8 ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sessions Operations V1"
        ],
        "summary": "Keep alive",
        "description": "This method is used to refresh the user's session and avoid session expiration. <br><strong>Bit8 operation:</strong> gamingPortalService.playerGetBalanceMinimal",
        "operationId": "keepAlive_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "schema": {
              "$ref": "#/definitions/TokenDTO"
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Sessions Operations V1"
        ],
        "summary": "Logout",
        "description": "Logout a user. <br><strong>Bit8 operation:</strong> gamingPortalService.sessionLogout",
        "operationId": "logout_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "terminalId",
            "in": "header",
            "description": "The terminalId",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "schema": {
              "$ref": "#/definitions/TokenDTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "AUTHENTICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "403": {
            "description": "BIT8 ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/sessions/system": {
      "post": {
        "tags": [
          "Sessions Operations V1"
        ],
        "summary": "System Login",
        "description": "This method provides the feature to a trusted third-party system to create a login session by the client id. <br><strong>Bit8 operation:</strong> gamingPortalService.sessionSystemLogin",
        "operationId": "systemLogin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "formData",
            "description": "The player's id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TokenDTO"
            }
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/validate": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Check if user exists",
        "description": "Validates player details based on properties passed in the object. It encapsulates the appropriate bit8 calls for player details validation:<br><strong>Bit8 operations (gamingPortalService)</strong>: For email 'playerValidateEmailExists' - For mobile number 'playerValidateMobileNumberExists' - For existing username 'playerValidateUsernameExists' - For existing nickname 'playerValidateNicknameExists'",
        "operationId": "validate_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A player registration object with the necessary properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/activate": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Activate User",
        "description": "Activates a previously registered user.<br><strong>Bit8 operation:</strong> gamingPortalService.playerActivateAccountWithOptions<br>Player can be activated either with the use of activationCode or with the combination of smsVerificationToken and email",
        "operationId": "activateAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "activationCode",
            "in": "formData",
            "description": "The activation code that was delivered to user",
            "required": false,
            "type": "string"
          },
          {
            "name": "smsVerificationToken",
            "in": "formData",
            "description": "The activation token that was delivered to the user through an sms",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "The email of the player",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/bonuses": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get all players bonuses",
        "description": "Get all players bonuses.<br><strong>Bit8 operation:</strong> gamingPortalService.bonusGetAllPlayerBonusDataAdvanced2<strong>Valid fields to pass:</strong> pagination object",
        "operationId": "getBonuses_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The player bonus filtering options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BonusPlayerAdvancedOption"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BonusAdvanced"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/promotions": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get player's promotions",
        "description": "Get players promotions based on certain criteria denoted by options parameter.<br><strong>Bit8 operation:</strong> gamingPortalService.promotionGetPlayerAllPromotions<br><strong>Filter criteria names:</strong> CURRENT, FUTURE, PAST, ALL ( <strong>Available values:</strong> 0, 1)<br><strong>Filter conditions:</strong> INCLUDE, EXCLUDE, GREATER_THAN, SMALLER_THAN, GREATER_THAN_OR_EQUAL_TO, SMALLER_THAN_OR_EQUAL_TO<br><strong>Order conditions:</strong> ASC, DESC",
        "operationId": "getPromotions_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The options for player's promotions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterOrderPagination"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PromotionPageable"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/loyalties": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get Player's loyalties",
        "description": "Retrieves player's loyalties.<br><strong>Bit8 operation:</strong> gamingPortalService.loyaltyGetPlayerLoyaltyStats and gamingPortalService.loyaltyGetRedemptionSchemesForPlayer",
        "operationId": "getLoyalties_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerLoyalties"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get Player Details",
        "description": "Retrieves player's information.<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetDetailsWithOptions",
        "operationId": "getDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "shortProfile",
            "in": "header",
            "description": "Return short player's profile. ( 0: full profile - 1: short profile )",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1
            ]
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The extra authentication required",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerProfileShortDTO"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Register Player",
        "description": "Registers new player information.<br><strong>Bit8 operation:</strong> gamingPortalService.playerRegisterAccountWithObject",
        "operationId": "registerAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A user details to register against",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          {
            "name": "channel",
            "in": "header",
            "description": "The id of the channel",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Update Player Account",
        "description": "Updates the details of a player.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateAccountWithObject",
        "operationId": "updateAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The user entity to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          {
            "name": "terminalId",
            "in": "header",
            "description": "The terminal id (if applicable) from where the action was perform",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The extra authentication required",
            "required": false,
            "type": "string"
          },
          {
            "name": "verificationToken",
            "in": "header",
            "description": "The mtan verification token if two-factor authentication is enabled on project",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerProfileFullDTO"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Close player account",
        "description": "Closes player account.<br><strong>Bit8 operation:</strong> gamingPortalService.playerCloseAccountWithOptions",
        "operationId": "closeAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The custom options object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseAccountOptions"
            }
          },
          {
            "name": "verificationToken",
            "in": "header",
            "description": "The mtan verification token if two-factor authentication is enabled on project",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/tournaments/optin": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get the player's applicable tournaments",
        "description": "Returns all tournaments applicable to the player which he/she can opt-in.<br><strong>Bit8 operation:</strong> gamingPortalService.tournamentGetTournamentsForPlayer",
        "operationId": "optinTournaments_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TournamentExtended"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Optin a player in a tournament",
        "description": "This method will optin a player in a tournament.<br><strong>Bit8 operation:</strong> gamingPortalService.tournamentOptInTournament",
        "operationId": "tournamentOptin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tournamentId",
            "in": "query",
            "description": "The id of the tournament",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/limits": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get Player's limits",
        "description": "Retrieves player's limits.<strong>Bit8 operation:</strong> gamingPortalService.playerGetPlayerLimits<strong>Available limits:</strong>For bet limits select 'bet' limitType + preferred interval<br>For deposit limits select 'deposit' limitType + preferred interval<br>For withdrawal limits select 'withdrawal' limitType<br>For loss limits select 'loss' limitType + preferred interval<br>For time limits pass only 'time' limitType<br>For all payment provider limits pass only 'deposit' limitType<br>For all player's limits pass only sessionToken and no other parameters",
        "operationId": "getLimits_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limitType",
            "in": "query",
            "description": "The limit type",
            "required": false,
            "type": "string",
            "enum": [
              "deposit",
              "withdrawal",
              "bet",
              "loss",
              "time"
            ]
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval type ( not applicable for time limit type )",
            "required": false,
            "type": "string",
            "enum": [
              "Week",
              "Day",
              "Month",
              "All"
            ]
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerLimit"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Sets player's limits",
        "description": "Allows changing players limits. It encapsulates several bit8 operations from gamingPortalService:<br><strong>Bit8 operation:</strong> transactionSetDepositLimit, transactionSetWithdrawalLimit, gameLimitSetBetAmount, gameLimitSetLossAmount, gameLimitSetTimeLimit",
        "operationId": "setLimits_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limitType",
            "in": "query",
            "description": "The limit type",
            "required": true,
            "type": "string",
            "enum": [
              "deposit",
              "withdrawal",
              "bet",
              "loss",
              "time"
            ]
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The Interval type",
            "required": true,
            "type": "string",
            "enum": [
              "Week",
              "Day",
              "Month",
              "Rolling"
            ]
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "The licence type",
            "required": true,
            "type": "string",
            "default": "all",
            "enum": [
              "lotto",
              "casino",
              "all"
            ]
          },
          {
            "name": "limitParam",
            "in": "query",
            "description": "The limit value multiplied by 100 i.e. limit amount in cents",
            "required": true,
            "type": "string"
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "The id of the channel ( 0: for All channels )",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationToken",
            "in": "header",
            "description": "The mtan verification token if two-factor authentication is enabled on project",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Removes player's limits",
        "description": "Allows removing players limits. It encapsulates several bit8 operations from gamingPortalService:<br><strong>Bit8 operation:</strong> transactionRemoveDepositLimit, transactionRemoveWithdrawalLimit, gameLimitRemoveBetAmount, gameLimitRemoveLossAmount, gameLimitRemoveTimeLimit",
        "operationId": "removeLimits_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limitType",
            "in": "query",
            "description": "The limit type",
            "required": true,
            "type": "string",
            "enum": [
              "deposit",
              "withdrawal",
              "bet",
              "loss",
              "time"
            ]
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval type",
            "required": true,
            "type": "string",
            "enum": [
              "Week",
              "Day",
              "Month",
              "Rolling"
            ]
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "The licence type",
            "required": true,
            "type": "string",
            "default": "all",
            "enum": [
              "lotto",
              "casino",
              "all"
            ]
          },
          {
            "name": "gameId",
            "in": "query",
            "description": "The id of the game",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "The id of the channel ( 0: for All channels )",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/devices/{uuid}": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get device account User",
        "description": "Retrieves device account information by uuid.<br><strong>Bit8 operation:</strong> gamingPortalService.getDeviceAccount",
        "operationId": "getDeviceAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeviceAccount"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Update device account User",
        "description": "Updates device account user information by uuid.<br><strong>Bit8 operation:</strong> gamingPortalService.updateDeviceAccount",
        "operationId": "updateDeviceAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The device account info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeviceAccount"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/pin": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Validates Player's pin",
        "description": "Validates Player's pin.<br><strong>Bit8 operation:</strong> gamingPortalService.playerValidateAuthenticationPin",
        "operationId": "getPin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pin",
            "in": "query",
            "description": "The pin to be validated",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Add pin for Player",
        "description": "Add pin for Player.<br><strong>Bit8 operation:</strong> gamingPortalService.playerAddUpdateAuthenticationPin",
        "operationId": "createPin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "The password to be provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "query",
            "description": "The new pin",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Updates Player's pin",
        "description": "Updates Player's pin.<br><strong>Bit8 operation:</strong> gamingPortalService.playerAddUpdateAuthenticationPin",
        "operationId": "updatePin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "The password to be provided",
            "required": false,
            "type": "string"
          },
          {
            "name": "newPin",
            "in": "query",
            "description": "The new pin",
            "required": true,
            "type": "string"
          },
          {
            "name": "currentPin",
            "in": "query",
            "description": "The current pin",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Resets Player's pin",
        "description": "Resets Player's pin.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateAccountAccessInfo",
        "operationId": "resetPin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "The password to be provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "query",
            "description": "The new pin",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/exclude": {
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Exclude Player",
        "description": "Allows player to be self-excluded.<br><strong>Bit8 operation:</strong> gamingPortalService.playerRestrictionAddPlayerRestriction<br>When we send 'endDate' we do not need to specify restriction 'numMinutes'<br>If 'endDate' is null then it will be calculated as the sum of 'startDate' and restriction 'numMinutes'<br>If restriction is indefinite we do not have to specify startDate, endDate and numMinutes parameters",
        "operationId": "setSelfExclusion_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "isIndefinite",
            "in": "query",
            "description": "Defines if it is indefinite (0:No, 1:Yes)",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "1"
            ]
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The date (YYYY-MM-DD HH:MM:SS) that the player will be self-excluded for(date in the future)",
            "required": false,
            "type": "string"
          },
          {
            "name": "numMinutes",
            "in": "query",
            "description": "The number of minutes that the player will be self-excluded for",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The date (YYYY-MM-DD HH:MM:SS) that the player will be self-excluded until(date in the future)",
            "required": false,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason for self exclusion",
            "required": false,
            "type": "string"
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "The license type",
            "required": true,
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "casino",
              "poker",
              "domain"
            ]
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The extra authentication required",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestrictionPlayerData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/username": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Updates player's username",
        "description": "Updates Player's username.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateAccountAccessInfo",
        "operationId": "updateUsername_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "The password to be provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "query",
            "description": "The pin to be provided",
            "required": false,
            "type": "string"
          },
          {
            "name": "newUsername",
            "in": "query",
            "description": "The new username",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/promotions/optin": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Player opt in promotion",
        "description": "Player opt in promotion.<br><strong>Bit8 operation:</strong> gamingPortalService.promotionOptInPromotionWithCustomInfo",
        "operationId": "promotionOptIn_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "promotionID",
            "in": "query",
            "description": "The promotion id to be provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "bonusCode",
            "in": "header",
            "description": "The bonus code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/promotions/optout": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Player opt out from promotion",
        "description": "Player opt out from promotion.<br><strong>Bit8 operation:</strong> gamingPortalService.promotionOptOutOfPromotion",
        "operationId": "promotionOptOut_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "promotionID",
            "in": "query",
            "description": "The promotion id to be provided",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/spb/favorites": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get players sports book preferences",
        "description": "Get players sports book preferences.<br><strong>Bit8 operation:</strong> gamingPortalService.sportsBookGetPlayerPreferences",
        "operationId": "getSPBFavorites_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Sportsbook player preferences"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Updates players sports book preferences",
        "description": "Update players sports book preferences.<br><strong>Bit8 operation:</strong> gamingPortalService.sportsBookUpdatePlayerPreferences",
        "operationId": "updateSPBFavorites_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The player's sports book data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sportsbook player preferences"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Sportsbook player preferences"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/trail": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get Player Trail using summaries advance options",
        "description": "Retrieves a user's trail (coupons) given some summaries advance options.<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetPlayerBetTrailWithSummaries<br><strong>Filter criteria names:</strong> UniqueBetReference, BetStatus ( open, won, lost, blocked, cancelled, other, draw ), <a target='_blank' href='/swagger/examples/platformType.json'>PlatformType</a>, ChannelType ( All, Online, SelfService, Retail ), LicenseType ( casino, poker, sportsbook, all, poolbetting, lotto, sportspool ), GameID<br><strong>Filter conditions:</strong> INCLUDE, EXCLUDE, GREATER_THAN, SMALLER_THAN, GREATER_THAN_OR_EQUAL_TO, SMALLER_THAN_OR_EQUAL_TO<br><strong>Order criteria names:</strong> TrailID (Default if no order is specified, ASC), Timestamp, BetTotal, LicenseType, LicenseTypeID, GameType, PlatformType, WinAmount, GameRoundID, GameID, ChannelType, BetStatus, UniqueBetReference, GameName<br><strong>Order conditions:</strong> ASC, DESC<br><strong>Date format:</strong> (YYYY-MM-DD HH:MM:SS)<br><strong>Valid date to pass:</strong> (YYYY-MM-DD)<br><strong>Valid fields to pass:</strong> startDate, endDate, pagination(itemsPerPage, pageNo)",
        "operationId": "getTrail_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The account transactions filtering options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerTrailOptions"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerTrailPageable"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/email": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Updates player's email",
        "description": "Updates Player's email.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateAccountAccessInfo",
        "operationId": "updateEmail_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "The password to be provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "query",
            "description": "The pin to be provided",
            "required": false,
            "type": "string"
          },
          {
            "name": "newEmail",
            "in": "query",
            "description": "The new email",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/favorites/{favoriteId}": {
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Delete Favorite",
        "description": "Deletes an existing favorite wager of a user.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "deleteFavorite_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "description": "The unique id of the favorite to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/metrics": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get player's metrics trail",
        "description": "Returns the balances for each metric for the player including the lifetime awarded and deducted, for a specified date range.<br><strong>Bit8 operation:</strong> gamingPortalService.getMetricsTotalByPlayerId<strong>Fields formats:</strong> dateFrom & dateTo - Unix Timestamp",
        "operationId": "getPlayerMetrics_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerId",
            "in": "query",
            "description": "The id of player for a metric",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The 'from' date to search",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The 'to' date to search",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricTotal"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/mtan": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Generate a mtan verification token",
        "description": "Request Bit8 to generate a mTan verification<br><strong>Bit8 operation:</strong> gamingPortalService.playerMTANVerificationCreateToken",
        "operationId": "generateMtanToken_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The mtan verification process request options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MtanGenerationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MtanVerificationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Verify mTan token",
        "description": "Request Bit8 to verify the mTan token<br><strong>Bit8 operation:</strong> gamingPortalService.playerMtanVerificationValidateToken",
        "operationId": "verifyMtanToken_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The mtan verification process request options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MtanVerificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/bonuses/vouchers/{voucherCode}": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Redeem a voucher code associated with a bonus",
        "description": "Redeems a voucher code. Once the voucher is redeemed if it's a login or deposit bonus the player is made eligible for the bonus, if it is a direct give bonus the bonus is awarded (unless Pre-Auth is enabled in which case the player needs to authorize the bonus)<br><strong>Bit8 operation:</strong> gamingPortalService.voucherRedeemCode",
        "operationId": "redeemVoucher_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KYCDocumentData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/status": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Returns the player's KYC Status",
        "description": "This method is used to get player's KYC status.<br><strong>Bit8 operation:</strong> gamingPortalService.getClientKYCStatus",
        "operationId": "getKYCStatus_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KYCStatusData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/documents": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Add a player's kyc document",
        "description": "This method is used to add a player's kyc document at bit8.<br><strong>Bit8 operation:</strong> gamingPortalService.fraudAddKYCDocument<br><strong>Required fields:</strong> clientStatId, kycDocumentData (<strong>only</strong> documentNumber, documentType)<br><strong>Optional fields:</strong> balanceAccountId",
        "operationId": "addKYCDocument_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request data of the KYC document",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KYCDocumentDataRequest"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KYCDocumentDataExtended"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/external/games/fun/session": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Start a game session for the player(play for fun)",
        "description": "Returns the URL to which the player needs to be redirected to start the game.<br><strong>Bit8 operation:</strong> gamingPortalService.gameStartGamePlayForFunAsPlayer",
        "operationId": "externalStartGameForFun_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "query",
            "description": "The external game id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The custom options for the providing of the game session",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameSessionOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameSession"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{clientStatId}/loyalty/points": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Update player's loyalty points",
        "description": "Update the loyalty points of a player in the system.<br><strong>Bit8 operation:</strong> biService.loyaltyAlterLoyaltyPoints",
        "operationId": "updateLoyaltyPoints_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientStatId",
            "in": "path",
            "description": "The clientStat id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The updated loyalty points amount",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason that you update the loyalty points of the player",
            "required": true,
            "type": "string"
          },
          {
            "name": "refId",
            "in": "query",
            "description": "The reference id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoyaltyStats"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{playerId}/devices/{uuid}/sync": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Synchronizes device account with a Registered User",
        "description": "Synchronizes the device account artifacts with a registered user.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateAccountWithObject",
        "operationId": "synchronizeDeviceAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerId",
            "in": "path",
            "description": "The player id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/update/verification": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Player's Update Verification",
        "description": "Verifies the token of the player in order to complete his profile update.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateVerifyToken",
        "operationId": "updateVerifyToken_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "verificationToken",
            "in": "header",
            "description": "The verification token that was delivered to user",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationType",
            "in": "query",
            "description": "The verification type",
            "required": true,
            "type": "string",
            "enum": [
              "EmailAddress",
              "PhoneNumber",
              "WithdrawalRequest",
              "Password",
              "PaymentAccount"
            ]
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "The player id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/fetch/activation/codes": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Fetch new activation code and token",
        "description": "Request for generating new player's activation code and token for activating account by email or SMS message.<br><strong>Bit8 operation:</strong> gamingPortalService.playerRequestActivationCodesWithOptions",
        "operationId": "fetchActivationCodes_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email of the player",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerActivationCodes"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/external/games/session": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Start a game session for the player(play for real money)",
        "description": "Returns the URL to which the player needs to be redirected to start the game.<br><strong>Bit8 operation:</strong> gamingPortalService.gameStartGame",
        "operationId": "externalStartGame_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "query",
            "description": "The external game id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The custom options for the providing of the game session",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameSessionOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GameSession"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Allowed"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/external": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get the details from external player",
        "description": "Retrieves external player's information.<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetDetailsWithOptions",
        "operationId": "externalGetDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerProfileExternalDTO"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/devices": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Create device account User",
        "description": "Create device account.<br><strong>Bit8 operation:</strong> gamingPortalService.createDeviceAccount",
        "operationId": "createDeviceAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The device account info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeviceAccount"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/password/reset": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Reset Player's Password request",
        "description": "Triggers the process of resetting a player's password and provide us a code.<br><br><strong>Bit8 operation:</strong> gamingPortalService.playerRequestPasswordReset<br><strong>Custom values:</strong> the pin of the player, the secret answer of the player ",
        "operationId": "resetPasswordRequest_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "description": "The email address",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "description": "The username",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password custom check data",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerResetPasswordChecks"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerPassword"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/draws/notifications": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get notifications for game draw - bit8",
        "description": "Retrieves notifications for game draw - bit8.<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetGameDrawNotifications",
        "operationId": "getGameDrawNotifications_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameDrawNotification"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Creates and update notifications for game draw - bit8",
        "description": "Creates and updates notifications for game draw - bit8.<br><strong>Bit8 operation:</strong> gamingPortalService.playerCreateUpdateGameDrawNotification<strong>Game Draw Notification Types Available Types:</strong> 1 - None, 2 - All Draws, 3 - Participated Only <br><strong>Date format is the following:</strong> yyyy-MM-dd HH:mm:ss <br><strong> Valid fields to pass:</strong> dateSubscription, gameDrawNotificationType, gameID, name.",
        "operationId": "createUpdateDrawNotification_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The notification for draw",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameDrawNotification"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{refId}/loyalty/points": {
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Rollback loyalty points",
        "description": "Rollbacks a loyalty points transaction using transaction reference id.<br><strong>Bit8 operation:</strong> biService.rollbackLoyaltyPointsTransaction",
        "operationId": "rollbackLoyaltyPointsTransaction_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "refId",
            "in": "path",
            "description": "The reference id for a loyalty points transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoyaltyStats"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/password/reset/verification": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Reset the player's password with a new password provided by the user, using the reset code",
        "description": "Resets the player's password with a new password.<br><strong>Bit8 operation:</strong> gamingPortalService.playerResetPasswordWithOptions<br><strong>Valid fields to pass:</strong> emailAddress, PlayerPassword object ( newPassword, passwordResetCode )",
        "operationId": "resetPasswordVerification_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The email address of the player",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/password/force/change": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Force change Password",
        "description": "Force Change Password Without login.<br><strong>Bit8 operation:</strong> biService.playerUpdatePasswordWithOptions<br><strong>Valid fields to pass:</strong> newPassword, oldPassword, ForceChangePassword object",
        "operationId": "forceChangePassword_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The password details of the player",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/account/loyalty/points": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Update player's loyalty points with user token",
        "description": "Update in system the loyalty points of a player.<br><strong>Bit8 operation:</strong> biService.loyaltyAlterLoyaltyPoints",
        "operationId": "updateLoyaltyPointsToken_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The updated loyalty points amount",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason that you update the loyalty points of the player",
            "required": true,
            "type": "string"
          },
          {
            "name": "refId",
            "in": "query",
            "description": "The reference id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoyaltyStats"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/password": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Change Password",
        "description": "Allows changing a user's password.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateAccountPassword<br><strong>Valid fields to pass:</strong> newPassword, oldPassword, secretAnswer, secretQuestionID ",
        "operationId": "updateAccountPassword_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Password information object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayerPassword"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The extra authentication required",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/security/answer": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Validates Player's security answer",
        "description": "Validates Player's security answer.<br><strong>Bit8 operation:</strong> gamingPortalService.playerCheckSecretAnswer",
        "operationId": "validateSecretAnswer_1",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "securityAnswer",
            "in": "header",
            "description": "The security answer to be validated",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/loyalty/redeem/{loyaltyRedemptionId}": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Redeems users loyalty scheme",
        "description": "Redeems users loyalty scheme.<br><strong>Bit8 operation:</strong> gamingPortalService.loyaltyRedeemLoyaltyPointsToPrizeWithOptions and gamingPortalService.loyaltyGetPlayerLoyaltyStats",
        "operationId": "redeemLoyaltyPoints_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "loyaltyRedemptionId",
            "in": "path",
            "description": "The loyaltyRedemptionId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoyaltyStats"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/favorites/games": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get player's favourite games",
        "description": "Get players favourite games.<br><strong>Bit8 operation:</strong> gamingPortalService.gameGetPlayerFavouriteGames",
        "operationId": "getFavoritesGames_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameFavorite"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/favorites/games/{gameId}/{flag}": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Sets the game as favourite",
        "description": "Sets the game as favourite.<br><strong>Bit8 operation:</strong> gamingPortalService.gameMarkGameAsFavourite",
        "operationId": "setGameAsFavourite_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "The Id of the game",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "flag",
            "in": "path",
            "description": "The flag to be assigned with. '1' to assign , '0' to unassign.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/favorites": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Create/Update Favorite",
        "description": "Create/Updates favorite numbers/wager of a user.<br>When used already existing barcode it updates the relevant coupon.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "createUpdateFavourites_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The favorites of a player that comes from Lotos",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Favorites"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Favorites"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{clientId}/tournaments/{tournamentId}/leaderboard/info": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get the leaderboard's players info",
        "description": "Return leaderboard for a specific player within a specific tournament. The leaderboard contains data for the requested player along with an X amount of players who ranked above and below that player.<br><strong>Bit8 operation:</strong> biService.getLeaderboardByClientID",
        "operationId": "leaderboardPlayerInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The player id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tournamentId",
            "in": "path",
            "description": "The tournament id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "participantsNumber",
            "in": "query",
            "description": "The amount of participant players of the leaderboard to show from above and below the specified player",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Leaderboard Player Info"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{refId}/metrics/transactions": {
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Rollback metric transaction",
        "description": "Rollbacks a metric transaction using transaction reference id.<br><strong>Bit8 operation:</strong> gamingPortalService.rollbackMetricTransaction",
        "operationId": "rollbackMetricTransaction_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "refId",
            "in": "path",
            "description": "The reference id for a metric transaction",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/documents/uploads": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Upload a player's kyc document",
        "description": "This method is used to upload a player's kyc document.<br><strong>Bit8 operation:</strong> gamingPortalService.fraudUploadKYCDocumentFile<br><strong>Required fields:</strong> clientStatId, base64FileData, originalFileName",
        "operationId": "uploadKYCDocument_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request data of the KYC document",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KYCDocumentDataRequest"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KYCDocumentData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/documents/files": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Return the whole information for KYC documents",
        "description": "Returns all the KYC documents details.<br><strong>Bit8 operation:</strong> gamingPortalService.getCombinedKYCDocumentDetails",
        "operationId": "getKYCDocumentFiles_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KYCDocumentDataExtended"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Attach file to existing document",
        "description": "Add a file to existing KYC document info.<br><strong>Bit8 operation:</strong> gamingPortalService.attachFileToKYCDocument<br><strong>Required fields:</strong> originalFileName, base64FileData, kycDocumentData (<strong>only</strong> documentNumber)",
        "operationId": "attachFileToKYCDocument_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request data of the KYC document",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KYCDocumentDataRequest"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/livestream/ability": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Check player's eligibility to stream",
        "description": "Check if there is sporting live streaming eligibility.<br><strong>Bit8 operation:</strong> gamingPortalService.playerEligibleToStreamThroughPlayerSelectionId",
        "operationId": "checkForEligibleToStream_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "segmentId",
            "in": "query",
            "description": "The segment id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/documents/download/{documentId}": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Returns the file data of single KYC document",
        "description": "This method is used to download player's KYC document file data (base64 string).<br><strong>Bit8 operation:</strong> gamingPortalService.getSingleClientKYCDocumentForDownload",
        "operationId": "downloadKYCDocument_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The unique id of the KYC document file",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KYCDownloadFile"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{clientId}/kyc/documents/uploads": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Upload a player's kyc document - Sessionless",
        "description": "This method is used to upload a player's kyc document.<br><strong>Bit8 operation:</strong> biService.fraudAddKYCDocumentWithFiles<br><strong>Required fields:</strong> clientStatId, base64FileData, originalFileName",
        "operationId": "sessionlessKYCUpload_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request data of the KYC document",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KYCDataRegistrationRequest"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The player's id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KYCDocumentData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/documents/details": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Return KYC documents details",
        "description": "Returns player's KYC documents files details with no archive logic.<br><strong>Bit8 operation:</strong> gamingPortalService.getAllClientKYCDocuments",
        "operationId": "getKYCDocumentInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KYCDocumentDataExtended"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/terms/conditions": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get player's T&C statuses",
        "description": "Returns client status information for terms and conditions.<br><strong>Bit8 operation:</strong> gamingPortalService.getTermsConditionStatusesByPlayer",
        "operationId": "termsConditionsPlayerStatuses_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "query",
            "description": "The game id ",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerTermsConditionsStatus"
              }
            }
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Accept, Reject, Revoke a T&C",
        "description": "Set Player Status of given Term and Condition to Accepted,Rejected, Revoked.<br><strong>Bit8 operation:</strong> gamingPortalService.playerAcceptTermsCondition/playerRejectTermsCondition/playerRevokeTermsCondition",
        "operationId": "termsConditionsStatusUpdate_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The terms and condition status update request information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TermsAndConditionsStatusUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{clientId}/mtan/registration": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Generate a mtan verification token - sessionless",
        "description": "Request Bit8 to generate a mTan verification for registration step without the use of a session token<br><strong>Bit8 operation:</strong> gamingPortalService.playerMTANVerificationCreateTokenForRegistration",
        "operationId": "generateMtanTokenSessionless_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The mtan verification process request options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MtanGenerationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MtanVerificationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Verify mtan token - Sessionless",
        "description": "Request Bit8 to verify a mTan token without the use of a session token<br>This will also activate player when token is verified<br><strong>Bit8 operation:</strong> gamingPortalService.playerMTANVerificationCreateToken",
        "operationId": "verifyMtanTokenSessionless_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The mtan verification process request options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MtanVerificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/accounts/verification": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Complete the balance account verification",
        "description": "Complete the balance account verification by providing the verification code generated by the system<br><strong>Bit8 operation:</strong> gamingPortalService.verifyBalanceAccount",
        "operationId": "verifyBalanceAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationCode",
            "in": "header",
            "description": "The verification code sent as a reason to the bank by bank transfer of 1 cent amount",
            "required": true,
            "type": "string"
          },
          {
            "name": "balanceAccountId",
            "in": "query",
            "description": "The Identifier of the balance account",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionBalanceAccountData"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{clientId}": {
      "put": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Update Player Account - Sessionless",
        "description": "Updates the details of a player without a session token.<br><strong>Bit8 operation:</strong> biService.playerUpdateAccountWithObject",
        "operationId": "sessionlessUpdateAccount_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The user entity to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The player id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerProfileFullDTO"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not Allowed"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/metrics/transactions": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get player's metric transactions",
        "description": "Returns all the metric transactions for a specific player.<br><strong>Bit8 operation:</strong> gamingPortalService.getAllMetricTransactionByPlayerId",
        "operationId": "getMetricTransactionByPlayer_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerId",
            "in": "query",
            "description": "The id of player for a metric",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricTransaction"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      },
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Create a new metric transaction",
        "description": "This method is used to create a new metric transaction for a player.<br><strong>Bit8 operation:</strong> gamingPortalService.createNewMetricTransaction<strong>Valid fields to pass:</strong> description, playerId, value <br><strong>Optional but 'must-pass' fields:</strong> refId, metricId",
        "operationId": "createMetricTransaction_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The request for a new metric transaction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MetricTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/terms/conditions/active": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get player's active and pending T&C",
        "description": "Returns client information for Active T&C and Pending T&C.<br><strong>Bit8 operation:</strong> gamingPortalService.getActiveTermsConditionsByPlayer",
        "operationId": "activeTermsConditionsByPlayer_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerTermsConditionsStatus"
              }
            }
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/favorites/advanced": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Get favorites ( advanced method )",
        "description": "Get favorites ( included pagination, filter criteria and order criteria ).<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetAllFavouritesAdvanced<br><strong>Filter criteria names:</strong> GameId, GameName, GameIdf, LotteryCouponIdentifier, FavouriteId<br><strong>Filter conditions:</strong> INCLUDE, EXCLUDE, GREATER_THAN, SMALLER_THAN, GREATER_THAN_OR_EQUAL_TO, SMALLER_THAN_OR_EQUAL_TO<br><strong>Order criteria names:</strong> CouponTitle, LotteryCouponID, GameManufacturer, CouponDate, CouponCost, GameName, BoardCount, GameId, ChannelType<br><strong>Order conditions:</strong> ASC, DESC<br><strong>Valid fields to pass: Pagination object only",
        "operationId": "getFavoritesAdvanced_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The account transactions filtering options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterOrderPagination"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Favorites"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/account/metrics/transactions": {
      "post": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Create a new metric transaction with user token",
        "description": "This method is used to create a new metric transaction for a player.<br><strong>Bit8 operation:</strong> gamingPortalService.createNewMetricTransaction",
        "operationId": "createMetricTransactionToken_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_token",
            "in": "query",
            "description": "The player token, provided when started the session",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request for a new metric transaction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MetricTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/{clientId}/tournaments": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Return all the tournaments per player and the information if the player is opted in them",
        "description": "Return all the tournaments per player and the information if the player is opted in them.<br><strong>Bit8 operation:</strong> biService.getAllTournamentsByClientID",
        "operationId": "tournamentsByClientId_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The client id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "onlyMetricTournaments",
            "in": "header",
            "description": "Flag whether the method returns tournaments with player metrics or all",
            "required": true,
            "type": "boolean",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tournament"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/segments/{segmentId}/clients/{clientID}": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "This method checks whether the specified segment exist for a specific player",
        "description": "This method checks whether the specified segment exist for a specific player.<br><strong>Bit8 operation:</strong> biService.playerSelectionIsPlayerInSelection",
        "operationId": "getSegmentsByClientStatId_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "segmentId",
            "in": "path",
            "description": "The segment id",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientID",
            "in": "path",
            "description": "The client stat id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/favorites/games/{gameId}": {
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Delete Favorite Numbers by gameId",
        "description": "Deletes the favorite numbers for a game Id of a user.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "deleteFavoriteNumbers_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "The unique gameId for which the numbers are to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/kyc/documents/{documentId}": {
      "delete": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Deletes the player's KYC document by document id",
        "description": "This method is used delete the player's KYC document by document id.<br><strong>Bit8 operation:</strong> gamingPortalService.deleteKYCDocumentById",
        "operationId": "deleteKYCDocument_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The unique id of the KYC document file",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "204": {
            "description": "SUCCESS"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/players/tournaments/statuses": {
      "get": {
        "tags": [
          "Players Operations V1"
        ],
        "summary": "Returns the player's active tournaments",
        "description": "Gets all statuses for active tournaments.<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetActiveTournamentStatuses",
        "operationId": "getPlayerActiveTournamentStatuses_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayerGetActiveTournamentStatusesReturn"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/barcodes/{barcode}": {
      "get": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Gets Wager Details by the barcode",
        "description": "This method is used to get wager details using the barcode. <br><strong>Bit8 operation:</strong> gamingPortalService.getCouponByBarcode",
        "operationId": "couponByBarcode_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "barcode",
            "in": "path",
            "description": "The barcode of the wager.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LotteryCoupon"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/{wagerId}": {
      "get": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Get Wager Details",
        "description": "Retrieves details of a wager given its unique id . <br><strong>Bit8 operation:</strong> wageringService.lottoGetCouponByID",
        "operationId": "getWagerDetails_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "wagerId",
            "in": "path",
            "description": "The barcode of the wager to be retrieved",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Allowed"
          },
          "404": {
            "description": "Object Not Found"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/returnFunds": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Return Funds",
        "description": "Call return Funds in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoReturnFunds",
        "operationId": "returnFunds_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "header",
            "description": "The id of the transaction",
            "required": true,
            "type": "string"
          },
          {
            "name": "playerId",
            "in": "header",
            "description": "The id of the player",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "reserveRef",
            "in": "header",
            "description": "The reserve reference",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "gameStateId",
            "in": "header",
            "description": "The id of the game",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ignoreTrnsNotFound",
            "in": "header",
            "description": "The ignored transaction not found",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/cancelCashBet": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Cancel cash for bet",
        "description": "Call cancel cash for bet in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoCancelCashBet",
        "operationId": "cancelCashBet_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "barcode",
            "in": "header",
            "description": "The barcode",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/reserveFunds": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Reserve Funds",
        "description": "Call reserve funds in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoReserveFunds",
        "operationId": "reserveFunds_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          {
            "name": "gameCategory",
            "in": "header",
            "description": "The gameCategory",
            "required": true,
            "type": "string"
          },
          {
            "name": "pin",
            "in": "header",
            "description": "The pin of the player",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/{uid}/settlements": {
      "put": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Settles a wager in bit8",
        "description": "Call place Win in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoPlaceWin",
        "operationId": "placeWin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager to settle",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Settlement"
            }
          },
          {
            "name": "channelId",
            "in": "header",
            "description": "The channel Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionId",
            "in": "header",
            "description": "The transaction Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "uid",
            "in": "path",
            "description": "The wager id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/cancelBetCash": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Cancel bet for cash",
        "description": "Call cancel bet for cash in Bit8. (Bit8 operations) <br><strong>Bit8 operation:</strong> wageringService.lottoPlaceCashWin",
        "operationId": "cancelBetCash_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          {
            "name": "transactionId",
            "in": "header",
            "description": "The transactionId",
            "required": true,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "header",
            "description": "The gameId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/cancelWin": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Cancel win",
        "description": "Call cancel win in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoCancelWin",
        "operationId": "cancelWin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          {
            "name": "transactionId",
            "in": "header",
            "description": "The transactionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/placeBet": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Place Bet",
        "description": "Call place Bet in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoPlaceBet",
        "operationId": "placeBet_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wagerRequest object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          {
            "name": "gameCategory",
            "in": "header",
            "description": "The category of the game",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/placeCashWin": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Place Cash for win",
        "description": "Call place cash for win in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoPlaceCashWin",
        "operationId": "placeWinCash_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          {
            "name": "transactionId",
            "in": "header",
            "description": "The transactionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/placeBetCash": {
      "post": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Place Bet for cash",
        "description": "Call place bet for cash in Bit8. <br><strong>Bit8 operation:</strong> wageringService.lottoPlaceCashBet",
        "operationId": "placeBetCash_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          {
            "name": "transactionId",
            "in": "header",
            "description": "The transactionId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WagerRequest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v1.0/wagers/negotiations/{uid}/status/{status}": {
      "put": {
        "tags": [
          "Wager Operations V1"
        ],
        "summary": "Bet Negotiation Feedback",
        "description": "Accepts the trader's response of a bet negotiation and performs designed action. <br><strong>Bit8 operation:</strong> wageringService.lottoUpdateTicket",
        "operationId": "betNegotiationFeedback_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "Reservation ID in Bit8 PAM",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "Bet Negotiation Status",
            "required": true,
            "type": "string",
            "enum": [
              "PLAYING",
              "NEGOTIATING",
              "OPEN",
              "ACCEPTED",
              "REJECTED",
              "MODIFIED"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "The BetNegotiationFeedback object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BetNegotiationFeedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/sessions": {
      "post": {
        "tags": [
          "Sessions Operations V2"
        ],
        "summary": "Login player by username",
        "description": "Login a player through the API by username. <br><strong>Bit8 operation:</strong> gamingPortalService.sessionLoginWithCustomInfo",
        "operationId": "login_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The login request information",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayerLoginRequest"
            }
          },
          {
            "name": "Channel",
            "in": "header",
            "description": "The channel",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "schema": {
              "$ref": "#/definitions/PlayerLoginResponse"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "AUTHENTICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "403": {
            "description": "BIT8 ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/players/favorites/advanced": {
      "post": {
        "tags": [
          "Players Operations V2"
        ],
        "summary": "Get favorites ( advanced method )",
        "description": "Get favorites ( included pagination, filter criteria and order criteria )<br><strong>Bit8 operation:</strong> gamingPortalService.playerGetAllFavouritesAdvanced<br><strong>Filter criteria names:</strong> GameId, GameName, GameIdf, LotteryCouponIdentifier, FavouriteId<br><strong>Filter conditions:</strong> INCLUDE, EXCLUDE, GREATER_THAN, SMALLER_THAN, GREATER_THAN_OR_EQUAL_TO, SMALLER_THAN_OR_EQUAL_TO<br><strong>Order criteria names:</strong> CouponTitle, LotteryCouponID, GameManufacturer, CouponDate, CouponCost, GameName, BoardCount, GameId, ChannelType<br><strong>Order conditions:</strong> ASC, DESC<br><strong>Valid fields to pass: Pagination object only(itemPerPage, pageNo)",
        "operationId": "getFavoritesAdvanced_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The account transactions filtering options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterOrderPagination"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication.",
            "required": true,
            "type": "string"
          },
          {
            "name": "favoriteType",
            "in": "query",
            "description": "The favorite type to be included in the request",
            "required": false,
            "type": "string",
            "enum": [
              "wagers",
              "numbers",
              "game_numbers"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FavoritesV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/players/bonuses/{bonusAwardedId}/forfeit": {
      "put": {
        "tags": [
          "Players Operations V2"
        ],
        "summary": "Forfeits a player's bonus by the bonus awarded id",
        "description": "Forfeits a player's bonus by the bonus awarded id<br><strong>Bit8 operation:</strong> gamingPortalService.playerForfeitBonus",
        "operationId": "forfeitBonus_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bonusAwardedId",
            "in": "path",
            "description": "The id of the awarded bonus to forfeit",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/players/favorites/wagers": {
      "post": {
        "tags": [
          "Players Operations V2"
        ],
        "summary": "Create/Update Favorite Wager",
        "description": "Create/Updates favorite wager of a user<br>When used already existing barcode it updates the relevant coupon.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "saveFavoriteCoupon_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The favorites of a player",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FavoriteV2"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "retailerId",
            "in": "header",
            "description": "The retailer id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "terminalId",
            "in": "header",
            "description": "The terminal id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Channel",
            "in": "header",
            "description": "The channel id that was used ot save the favorite",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FavoriteV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/players/favorites/numbers": {
      "post": {
        "tags": [
          "Players Operations V2"
        ],
        "summary": "Create/Update Favorite Numbers",
        "description": "Create/Update Favorite Numbers of a user<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "saveFavoriteNumbers_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The favorite numbers of a player",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotteryFavouriteNumber"
              }
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotteryFavouriteNumber"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/players/favorites/games/numbers": {
      "post": {
        "tags": [
          "Players Operations V2"
        ],
        "summary": "Create/Update favorite game numbers",
        "description": "Create/Update favorite game numbers of a user<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "saveFavoriteGameNumbers_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The favorite game numbers of a player",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotteryFavouriteGameNumber"
              }
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotteryFavouriteGameNumber"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/players/favorites": {
      "post": {
        "tags": [
          "Players Operations V2"
        ],
        "summary": "Create/Update Favorite Wager",
        "description": "<strong> To be removed early 2020</strong><br>Create/Updates favorite wager of a user<br>When used already existing barcode it updates the relevant coupon.<br><strong>Bit8 operation:</strong> gamingPortalService.playerUpdateFavouritesWithOptions",
        "operationId": "createUpdateFavorites_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The favorites of a player",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FavoriteV2"
            }
          },
          {
            "name": "sessionToken",
            "in": "header",
            "description": "The authorization of the user that was provided upon authentication",
            "required": true,
            "type": "string"
          },
          {
            "name": "retailerId",
            "in": "header",
            "description": "The retailer id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "terminalId",
            "in": "header",
            "description": "The terminal id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Channel",
            "in": "header",
            "description": "The channel id that was used ot save the favorite",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FavoritesV2"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        },
        "deprecated": true
      }
    },
    "/v2.0/wagers/returnFunds": {
      "post": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Return Funds",
        "description": "Call return Funds in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoPlaceBet",
        "operationId": "returnFunds_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trnsId",
            "in": "header",
            "description": "The id of the transaction",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/reserveFunds": {
      "post": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Reserve Funds",
        "description": "Call reserve funds in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoReserveFunds",
        "operationId": "reserveFunds_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerPlayRequestModel"
            }
          },
          {
            "name": "channelId",
            "in": "header",
            "description": "The channel id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "trnsId",
            "in": "header",
            "description": "The transaction id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/{uid}/settlements": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Settles a wager in bit8",
        "description": "Call place Win in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoPlaceWin",
        "operationId": "placeWin_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager to settle",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Settlement"
            }
          },
          {
            "name": "channelId",
            "in": "header",
            "description": "The channel id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "uid",
            "in": "path",
            "description": "The wager id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/placeBet": {
      "post": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Place Bet",
        "description": "Call place Bet in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoPlaceBet",
        "operationId": "placeBet_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wagerRequest object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerPlayRequestModel"
            }
          },
          {
            "name": "channelId",
            "in": "header",
            "description": "The channel id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "trnsId",
            "in": "header",
            "description": "The transaction id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/cancelBet/{uid}": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Cancel Bet",
        "description": "Cancel a place Bet in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoCancelBet",
        "operationId": "cancelBet_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "The Coupon Barcode/ BetslipId",
            "required": true,
            "type": "string"
          },
          {
            "name": "betId",
            "in": "query",
            "description": "The bet / lottery id",
            "required": false,
            "type": "string"
          },
          {
            "name": "trnsId",
            "in": "header",
            "description": "The transaction id (only for LotoBet games)",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/placeBetCash": {
      "post": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Place Bet for cash",
        "description": "Call place bet for cash in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoPlaceCashBet",
        "operationId": "placeBetCash_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wagerRequest object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WagerPlayRequestModel"
            }
          },
          {
            "name": "channelId",
            "in": "header",
            "description": "The channel id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "trnsId",
            "in": "header",
            "description": "The transaction id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/undo/{uid}/settlements": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Undo pay transaction of a wager in bit8",
        "description": "Call undo Win in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoUndoWin",
        "operationId": "undoWin_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The wager to settle",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Settlement"
            }
          },
          {
            "name": "channelId",
            "in": "header",
            "description": "The channel id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "uid",
            "in": "path",
            "description": "The wager id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/undo/{uid}/placeBetCash": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Undo cash play transaction",
        "description": "Undo transaction for the play at the retailer channel<br><strong>Bit8 operation:</strong> wageringService.lottoUndoCashBet",
        "operationId": "undoPlaceBetCash_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "The wager unique identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/block/{uid}": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Block Coupon",
        "description": "Block a coupon in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoBlockCoupon",
        "operationId": "blockCoupon_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "The barcode/betslip id of the coupon",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason for blocking the coupon",
            "required": false,
            "type": "string"
          },
          {
            "name": "blockType",
            "in": "query",
            "description": "The block type (PERMANENTLY, TEMPORARILY)",
            "required": true,
            "type": "string",
            "enum": [
              "PERMANENTLY",
              "TEMPORARILY"
            ]
          },
          {
            "name": "trnsId",
            "in": "header",
            "description": "The transaction id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/unblock/{uid}": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Unblock Coupon",
        "description": "Unblock a coupon in Bit8<br><strong>Bit8 operation:</strong> wageringService.lottoUnblockCoupon",
        "operationId": "unblockCoupon_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "The barcode/betslip id of the coupon",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason for unblocking the coupon",
            "required": false,
            "type": "string"
          },
          {
            "name": "trnsId",
            "in": "header",
            "description": "The transaction id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    },
    "/v2.0/wagers/negotiations/{uid}/status/{status}": {
      "put": {
        "tags": [
          "Wager Operations V2"
        ],
        "summary": "Bet Negotiation Feedback",
        "description": "Accepts the trader's response of a bet negotiation and performs designed action<br><strong>Bit8 operation:</strong> wageringService.lottoUpdateTicket",
        "operationId": "betNegotiationFeedback_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "Reservation ID in Bit8 PAM",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "Bet Negotiation Status",
            "required": true,
            "type": "string",
            "enum": [
              "PLAYING",
              "NEGOTIATING",
              "OPEN",
              "ACCEPTED",
              "REJECTED",
              "MODIFIED"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "The BetNegotiationFeedback object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BetNegotiationFeedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Bit8 Error"
          },
          "500": {
            "description": "Generic Error"
          }
        }
      }
    }
  },
  "definitions": {
    "SessionResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "‘1’ if the call is successful"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        }
      },
      "description": "The session response"
    },
    "FaultInfo": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The error code"
        },
        "message": {
          "type": "string",
          "description": "The error message"
        },
        "data": {
          "type": "array",
          "description": "The error data which is an abstract object that may be used to provide any error metadata",
          "items": {
            "type": "object"
          }
        },
        "source": {
          "type": "string",
          "description": "The application at which the API error occured"
        },
        "type": {
          "type": "string",
          "description": "The error family, e.g. RUNTIME, VALIDATION, etc"
        },
        "guid": {
          "type": "string",
          "description": "The unique identifier of the error process"
        }
      },
      "description": "The FaultInfo object contains all the details assosiated with an API error"
    },
    "SessionRequest": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "Player ID in Bit8 System provided in game launch URL"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        },
        "gameReference": {
          "type": "string",
          "description": "Though not necessary extra validation can be performed if game is supplied. Also for rollback transactions it is allowed not to pass the session_id if the game is provided "
        }
      },
      "description": "The session request"
    },
    "Feature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ruleId": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "spinsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "spinsLeft": {
          "type": "integer",
          "format": "int32"
        },
        "minBet": {
          "type": "integer",
          "format": "int32"
        },
        "maxBet": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LoyaltyPointsBalance": {
      "type": "object",
      "properties": {
        "totalGiven": {
          "type": "number",
          "description": "the total loyalty points given to the player"
        },
        "totalUsed": {
          "type": "number",
          "description": "the total loyalty points used by the player"
        },
        "current": {
          "type": "number",
          "description": "the current loyalty points the player has"
        },
        "totalRunning": {
          "type": "number",
          "description": "the total running loyalty points given to the player"
        },
        "totalExpired": {
          "type": "number",
          "description": "the total expired loyalty points of the player"
        }
      },
      "description": "The player's loyalty points balance object"
    },
    "PlayerBalanceInfo": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "balanceReal": {
          "type": "integer",
          "format": "int64",
          "description": "Real Balance"
        },
        "balanceBonus": {
          "type": "integer",
          "format": "int64",
          "description": "Bonus Balance"
        }
      },
      "description": "The player balance info object"
    },
    "PlayerBalanceResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "‘1’ if the call is successful"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        },
        "playerBalanceInfo": {
          "description": "The player's balance is a component of two figures real and bonus. Typically the player is only displayed a summation of these two values.",
          "$ref": "#/definitions/PlayerBalanceInfo"
        },
        "loyaltyPointsBalance": {
          "description": "loyalty_points_balance",
          "$ref": "#/definitions/LoyaltyPointsBalance"
        },
        "currency": {
          "type": "string",
          "description": "Should match currency provided in game launch URL."
        },
        "feature": {
          "type": "array",
          "description": "If the player has any free rounds, every free round will be returned in this field as an array item, containing the attributes shown in the next column.",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        }
      },
      "description": "The player's balance response object"
    },
    "RoundRequest": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "Player ID in Bit8 System provided in game launch URL"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        },
        "roundId": {
          "type": "integer",
          "format": "int64",
          "description": "round_id"
        }
      },
      "description": "The request for the round"
    },
    "PlayerDetailsResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "‘1’ if the call is successful"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        },
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "player_id"
        },
        "nickname": {
          "type": "string",
          "description": "nickname"
        },
        "country": {
          "type": "string",
          "description": "country"
        },
        "currency": {
          "type": "string",
          "description": "currency"
        },
        "testPlayer": {
          "type": "integer",
          "format": "int32",
          "description": "test_player"
        },
        "clientId": {
          "type": "integer",
          "format": "int64",
          "description": "client_id"
        },
        "clientStatId": {
          "type": "integer",
          "format": "int64",
          "description": "client_stat_id"
        }
      },
      "description": "The response for player details"
    },
    "TransactionResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "‘1’ if the call is successful"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        },
        "casinoPlayerBalance": {
          "description": "balance",
          "$ref": "#/definitions/PlayerBalanceInfo"
        },
        "balanceBefore": {
          "description": "Player's balance before win",
          "$ref": "#/definitions/PlayerBalanceInfo"
        },
        "extTransactionId": {
          "type": "integer",
          "format": "int64",
          "description": "The Transaction ID in Bit8 system used to identify the player’s game_play (transactions [bets/wins/rollback] processed during a game session."
        },
        "gameRoundId": {
          "type": "integer",
          "format": "int64",
          "description": "The Round ID in Bit8 system used to identify the player’s round."
        }
      },
      "description": "The response for transaction object"
    },
    "Bit8RgsTransactionRequest": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "Player ID in Bit8 System provided in game launch URL"
        },
        "sessionId": {
          "type": "string",
          "description": "Session key in Bit8 System provided in game launch URL or by Start Session."
        },
        "gameReference": {
          "type": "string",
          "description": "Though not necessary extra validation can be performed if game is supplied. Also for rollback transactions it is allowed not to pass the session_id if the game is provided "
        },
        "transactionId": {
          "type": "string",
          "description": "Unique transaction ID\\Key in game provider's system. This is used to check whether the transaction has already been processed or not. In case of a rollback transaction this is the ID of the bet transaction."
        },
        "roundId": {
          "type": "integer",
          "format": "int64",
          "description": "Shared ID between a bet & win transactions. This is used by the win\\rollback transaction to partition winnings between real and bonus."
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "The gross transaction amount in cents. Should be zero in case of a free round bet."
        },
        "netAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Net winning amount in cents. Must be smaller or equal to gross amount (if tax isn’t deducted)"
        },
        "closeRound": {
          "type": "integer",
          "format": "int32",
          "description": "Used by the win transaction to close the round. This can be used to reduce a call to end round. Zero based wins can be passed."
        },
        "freeRoundRule": {
          "type": "string",
          "description": "If the transaction is funded from a free round the field contains a unique identifier for the free round rule. Typically the winnings of free rounds are not credited to real funds but are awarded as a bonus. This field is used to detect which bonus settings to apply (e.g. wagering requirement and games applied). This field should be populated only if the transaction is funded from a free round. This field can be omitted if the free_round_pid is provided."
        },
        "freeRoundPid": {
          "type": "string",
          "description": "This is the player’s free round instance ID used to identify the Bit8 free rounds instance awarded to the player. Although this field can be omitted if the free_round_rule field is supplied this is not recommend since a player can be awarded multiple free rounds instances from the same rule.  "
        },
        "freeRoundUnits": {
          "type": "string",
          "description": "The number of free rounds that the player is eligible by the offer referenced by the free_round_rule or free_round_pid. If this is bet transaction this value should be the number of free rounds before the bet. This value is important because Bit8 needs to know when the free rounds have been exhausted."
        }
      },
      "description": "The request for transaction object"
    },
    "NotifyResponse": {
      "type": "object",
      "properties": {
        "stateId": {
          "type": "integer",
          "format": "int32",
          "description": "The state id"
        }
      },
      "description": "The notify response object"
    },
    "NotifyRequest": {
      "type": "object",
      "properties": {
        "stateId": {
          "type": "integer",
          "format": "int32",
          "description": "The state id"
        },
        "previousStateId": {
          "type": "integer",
          "format": "int32",
          "description": "The previous state id"
        },
        "namespace": {
          "type": "string",
          "description": "The namespace"
        }
      },
      "description": "The notify object from request"
    },
    "LotteryDraw": {
      "type": "object",
      "properties": {
        "columnPrize": {
          "type": "number",
          "description": "columnPrize"
        },
        "deadline": {
          "type": "string",
          "description": "deadline"
        },
        "drawDate": {
          "type": "string",
          "format": "date-time",
          "description": "drawDate"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "drawNumber"
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "description": "gameID"
        },
        "gameIDF": {
          "type": "string",
          "description": "gameIDF"
        },
        "gameManufacturerName": {
          "type": "string",
          "description": "gameManufacturerName"
        },
        "hasLoyaltyPoints": {
          "type": "boolean",
          "description": "hasLoyaltyPoints"
        },
        "lotteryDrawID": {
          "type": "integer",
          "format": "int64",
          "description": "lotteryDrawID"
        },
        "maxAllowedColumns": {
          "type": "integer",
          "format": "int32",
          "description": "maxAllowedColumns"
        },
        "minAllowedColumns": {
          "type": "integer",
          "format": "int32",
          "description": "minAllowedColumns"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "originalDeadline": {
          "type": "string",
          "description": "originalDeadline"
        },
        "prizes": {
          "type": "array",
          "description": "prizes",
          "items": {
            "$ref": "#/definitions/LotteryDrawPrize"
          }
        },
        "resultNumbers": {
          "type": "string",
          "description": "resultNumbers"
        },
        "results": {
          "type": "array",
          "description": "results",
          "items": {
            "$ref": "#/definitions/LotteryDrawResult"
          }
        },
        "salesEnd": {
          "type": "string",
          "description": "salesEnd"
        },
        "salesStart": {
          "type": "string",
          "description": "salesStart"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "status_code\tdescription\n0\tINIT\n1\tDEFINED\n2\tACTIVE\n3\tCOMPLETED\n4\tDISTRIBUTED_CALCULATED\n5\tWINNING_NUMBERS_ENTERED\n6\tWINNERS_CALCULATED\n7\tWINNERS_UPDATED\n15\tWINNING_NUMBERS_ENTERED_PAYMENTS_SUSPENDED\n16\tWINNERS_CALCULATED_PAYMENTS_SUSPENDED\n17\tWINNERS_UPDATED_PAYMENTS_SUSPENDED"
        },
        "totalColumns": {
          "type": "integer",
          "format": "int32",
          "description": "totalColumns"
        },
        "totalColumns1": {
          "type": "integer",
          "format": "int32",
          "description": "totalColumns1"
        },
        "visualDrawID": {
          "type": "integer",
          "format": "int32",
          "description": "visualDrawID"
        },
        "winnersLoaded": {
          "type": "boolean",
          "description": "winnersLoaded"
        }
      }
    },
    "LotteryDrawPrize": {
      "type": "object",
      "properties": {
        "categoryCode": {
          "type": "integer",
          "format": "int32",
          "description": "categoryCode"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "categoryType"
        },
        "consolidatedAmount": {
          "type": "number",
          "description": "consolidatedAmount"
        },
        "dividend": {
          "type": "number",
          "description": "dividend"
        },
        "extraInfo": {
          "type": "string",
          "description": "extraInfo"
        },
        "fixedWinningAmount": {
          "type": "number",
          "description": "fixedWinningAmount"
        },
        "gift": {
          "type": "string",
          "description": "gift"
        },
        "jackpot": {
          "type": "number",
          "description": "jackpot"
        },
        "lotteryDrawID": {
          "type": "integer",
          "format": "int64",
          "description": "lotteryDrawID"
        },
        "numWinners": {
          "type": "integer",
          "format": "int32",
          "description": "numWinners"
        },
        "pliJackpot": {
          "type": "number",
          "description": "pliJackpot"
        },
        "promotionIDF": {
          "type": "integer",
          "format": "int32",
          "description": "promotionIDF"
        },
        "selectedCategoryCode": {
          "type": "integer",
          "format": "int32",
          "description": "selectedCategoryCode"
        },
        "winningAmount": {
          "type": "number",
          "description": "winningAmount"
        }
      }
    },
    "LotteryDrawResult": {
      "type": "object",
      "properties": {
        "boardTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "boardTypeID"
        },
        "categoryCode": {
          "type": "integer",
          "format": "int32",
          "description": "categoryCode"
        },
        "lotteryDrawID": {
          "type": "integer",
          "format": "int64",
          "description": "lotteryDrawID"
        },
        "number": {
          "type": "string",
          "description": "number"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "description": "order"
        }
      }
    },
    "Metric": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the metric"
        },
        "description": {
          "type": "string",
          "description": "The description of the metric"
        },
        "name": {
          "type": "string",
          "description": "The name of the metric"
        },
        "isActive": {
          "type": "boolean",
          "description": "Check if metric is active"
        },
        "isDeleted": {
          "type": "boolean",
          "description": "Check if metric is deleted"
        }
      },
      "description": "The short Metric object"
    },
    "PlayerCardDetails": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "the id of the player"
        },
        "cardNumber": {
          "type": "string",
          "description": "the id of the card"
        },
        "cardFee": {
          "type": "number",
          "format": "double",
          "description": "the fee of the card"
        },
        "assignedDate": {
          "type": "string",
          "format": "date-time",
          "description": "the assigned date of the card"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "the expiration date of the card"
        },
        "cardStatus": {
          "type": "string",
          "description": "the status of the card"
        },
        "printStatus": {
          "type": "string",
          "description": "the print status of the card"
        }
      },
      "description": "The details of a player's card"
    },
    "CasinoSessionResponse": {
      "type": "object",
      "properties": {
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "the status of the call (0=No, 1=Yes)"
        },
        "sessionID": {
          "type": "string",
          "description": "the id of the session"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "the error number"
        },
        "errorMessage": {
          "type": "string",
          "description": "the error message"
        }
      },
      "description": "The response for casino session"
    },
    "CasinoPlayerBalance": {
      "type": "object",
      "properties": {
        "balanceReal": {
          "type": "integer",
          "format": "int64",
          "description": "the new Balance of the real pocket in cents"
        },
        "balanceBonus": {
          "type": "integer",
          "format": "int64",
          "description": "the new Balance of the bonus pocket in cents"
        },
        "balanceTotal": {
          "type": "integer",
          "format": "int64",
          "description": "the new total Balance of the wallet in cents"
        }
      },
      "description": "The casino player balance object"
    },
    "CasinoPlayerBalanceResponse": {
      "type": "object",
      "properties": {
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "the status of the call (0=No, 1=Yes)"
        },
        "casinoPlayerBalance": {
          "description": "the new Balance of the player in cents",
          "$ref": "#/definitions/CasinoPlayerBalance"
        },
        "loyaltyPointsBalance": {
          "description": "the new loyalty points balance response of the player",
          "$ref": "#/definitions/LoyaltyPointsBalanceResponse"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "the error number"
        },
        "errorMessage": {
          "type": "string",
          "description": "the error message"
        }
      },
      "description": "The response for casino player balance"
    },
    "LoyaltyPointsBalanceResponse": {
      "type": "object",
      "properties": {
        "totalGiven": {
          "type": "number",
          "description": "the total loyalty points given to the player"
        },
        "totalUsed": {
          "type": "number",
          "description": "the total loyalty points used by the player"
        },
        "current": {
          "type": "number",
          "description": "the current loyalty points the player has"
        },
        "totalRunning": {
          "type": "number",
          "description": "the total running loyalty points given to the player"
        },
        "totalExpired": {
          "type": "number",
          "description": "the total expired loyalty points of the player"
        }
      },
      "description": "The player's loyalty points balance response object"
    },
    "CasinoPlayerInfo": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "the unique id of the player"
        },
        "nickname": {
          "type": "string",
          "description": "the player's nickname which can be displayed within the game"
        },
        "firstName": {
          "type": "string",
          "description": "the player's first name"
        },
        "clientId": {
          "type": "string",
          "description": "the client's id"
        },
        "clientStatId": {
          "type": "string",
          "description": "the client's stat id"
        },
        "lastName": {
          "type": "string",
          "description": "the player's last name"
        },
        "userName": {
          "type": "string",
          "description": "the player's username"
        },
        "email": {
          "type": "string",
          "description": "the player's email address"
        },
        "country": {
          "type": "string",
          "description": "the player's country code which can be used for reporting purposes"
        },
        "city": {
          "type": "string",
          "description": "the player's city which can be used for reporting purposes"
        },
        "currency": {
          "type": "string",
          "description": "the player's currency"
        }
      },
      "description": "The casino player info object"
    },
    "CasinoPlayerInfoResponse": {
      "type": "object",
      "properties": {
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "the status of the call (0=No, 1=Yes)"
        },
        "casinoPlayerInfo": {
          "description": "the details of the player",
          "$ref": "#/definitions/CasinoPlayerInfo"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "the error number"
        },
        "errorMessage": {
          "type": "string",
          "description": "the error message"
        }
      },
      "description": "The response for casino player info"
    },
    "CasinoTransactionResponse": {
      "type": "object",
      "properties": {
        "successFlag": {
          "type": "integer",
          "format": "int32",
          "description": "the status of the call (0=No, 1=Yes)"
        },
        "initialCasinoPlayerBalance": {
          "description": "the initial Balance of the player in cents",
          "$ref": "#/definitions/CasinoPlayerBalance"
        },
        "casinoPlayerBalance": {
          "description": "the new Balance of the player in cents",
          "$ref": "#/definitions/CasinoPlayerBalance"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "the error number"
        },
        "errorMessage": {
          "type": "string",
          "description": "the error message"
        }
      },
      "description": "The response for casino transaction"
    },
    "CasinoTransaction": {
      "type": "object",
      "required": [
        "amount",
        "placeBetType",
        "transactionId"
      ],
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "The unique id of the transaction"
        },
        "roundId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game round"
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of the transaction in cents / points"
        },
        "closeRound": {
          "type": "integer",
          "format": "int32",
          "description": "Flag to close the round(0:No, 1:Yes)"
        },
        "gameId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game"
        },
        "metricId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the metric"
        },
        "placeBetType": {
          "type": "string",
          "description": "The type of the place bet",
          "enum": [
            "MONEY",
            "LOYALTY_POINTS"
          ]
        },
        "freeRoundRule": {
          "type": "string",
          "description": "The free round rule"
        },
        "freeRoundPid": {
          "type": "string",
          "description": "The free round pid"
        },
        "freeRoundUnits": {
          "type": "string",
          "description": "The free round units"
        },
        "prizeId": {
          "type": "integer",
          "format": "int64",
          "description": "The winning category"
        },
        "prizeLineId": {
          "type": "integer",
          "format": "int32",
          "description": "The winning sub category"
        },
        "inputMethod": {
          "type": "string",
          "description": "The input channel values are 'web','mobile','retail', 'b2b'"
        }
      },
      "description": "The casino transaction object"
    },
    "CasinoTopWinnersPlayer": {
      "type": "object",
      "properties": {
        "baseCurrencyWinAmount": {
          "type": "number",
          "description": "The The win amount at base currency"
        },
        "clientId": {
          "type": "integer",
          "format": "int64",
          "description": "The client id"
        },
        "nickname": {
          "type": "string",
          "description": "The items per page"
        },
        "countryCode": {
          "type": "string",
          "description": "The player's country code"
        },
        "currencyCode": {
          "type": "string",
          "description": "The player's currency code"
        },
        "currencyWinAmount": {
          "type": "number",
          "description": "The win amount at player's currency"
        }
      },
      "description": "The casino round's top winner player's information"
    },
    "CasinoTopWinnersResponse": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int64",
          "description": "The items per page"
        },
        "pageNo": {
          "type": "integer",
          "format": "int64",
          "description": "The page number"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64",
          "description": "The total pages"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64",
          "description": "The total items"
        },
        "baseCurrencyCode": {
          "type": "string",
          "description": "The base currency code"
        },
        "topWinners": {
          "type": "array",
          "description": "The casino top winner player",
          "items": {
            "$ref": "#/definitions/CasinoTopWinnersPlayer"
          }
        }
      },
      "description": "The retrieve round top winners response information"
    },
    "CasinoTopWinnersRequest": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int64",
          "description": "The items per page"
        },
        "pageNo": {
          "type": "integer",
          "format": "int64",
          "description": "The page number"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64",
          "description": "The total pages"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64",
          "description": "The total items"
        },
        "winType": {
          "type": "string",
          "example": "NET_WIN",
          "description": "Win type for the top winner statistics",
          "enum": [
            "NET_WIN",
            "GROSS_WIN"
          ]
        },
        "topWinnersNum": {
          "type": "integer",
          "format": "int32",
          "example": 15,
          "description": "Number of top player's retrieved (max = 50)"
        },
        "hoursInterval": {
          "type": "integer",
          "format": "int32",
          "description": "The hours period to calculate winners statistics (max 360 hours)"
        },
        "gameIds": {
          "type": "array",
          "description": "The specific game ids to calculate winners statistics (if sent null then default is all games)",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "The retrieve round top winners request information"
    },
    "ArrayOfLotterySubscriptionDay": {
      "type": "object",
      "properties": {
        "lotterySubscriptionDay": {
          "type": "array",
          "xml": {
            "name": "LotterySubscriptionDay"
          },
          "items": {
            "xml": {
              "name": "LotterySubscriptionDay"
            },
            "$ref": "#/definitions/LotterySubscriptionDay"
          }
        }
      }
    },
    "LotterySubscriptionDay": {
      "type": "object",
      "properties": {
        "dayNo": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "DayNo"
          }
        },
        "lotterySubscriptionID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "LotterySubscriptionID"
          }
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "acceptBetMinutesBeforeDraw": {
          "type": "integer",
          "format": "int32",
          "description": "accept bet minutes before draw"
        },
        "advancedDraws": {
          "type": "integer",
          "format": "int32",
          "description": "the advanced draws"
        },
        "clientID": {
          "type": "integer",
          "format": "int64",
          "description": "the unique id of the player"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "the creation date"
        },
        "days": {
          "description": "the participation days",
          "$ref": "#/definitions/ArrayOfLotterySubscriptionDay"
        },
        "gameManufacturerID": {
          "type": "integer",
          "format": "int64",
          "description": "the game manufacturer ID"
        },
        "isActive": {
          "type": "integer",
          "format": "int32",
          "description": "is active flag"
        },
        "isHidden": {
          "type": "integer",
          "format": "int32",
          "description": "is hidden flag"
        },
        "lotterySubscriptionID": {
          "type": "integer",
          "format": "int64",
          "description": "id of the subscription"
        },
        "lotterySubscriptionParentID": {
          "type": "integer",
          "format": "int64",
          "description": "id of the parent subscription"
        },
        "minTopPrizeValue": {
          "type": "number",
          "description": "min top prize value"
        },
        "nextDrawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "next draw number"
        },
        "nextSubscriptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "next subscription date"
        },
        "numCouponBought": {
          "type": "integer",
          "format": "int32",
          "description": "num of bought coupons"
        },
        "playForNumDraws": {
          "type": "integer",
          "format": "int32",
          "description": "num of draws play"
        },
        "playFromDate": {
          "type": "string",
          "format": "date-time",
          "description": "playing from date"
        },
        "playIntervalDayWeekdayOnly": {
          "type": "integer",
          "format": "int32",
          "description": "play interval day weekday only"
        },
        "playIntervalDayWeekendOnly": {
          "type": "integer",
          "format": "int32",
          "description": "play interval day weekend only"
        },
        "playIntervalEveryNum": {
          "type": "integer",
          "format": "int32",
          "description": "play interval every number"
        },
        "playIntervalType": {
          "type": "integer",
          "format": "int32",
          "description": "play interval type(1 - daily, 2 - weekly, 5 - all draws)"
        },
        "playNumConsecutiveDraws": {
          "type": "integer",
          "format": "int32",
          "description": "play consecutive draws number"
        },
        "playNumHoursBeforeDraw": {
          "type": "integer",
          "format": "int32",
          "description": "play num hours before draw"
        },
        "playTime": {
          "type": "string",
          "description": "play time"
        },
        "playUntilDate": {
          "type": "string",
          "format": "date-time",
          "description": "play until date"
        },
        "playUntilType": {
          "type": "integer",
          "format": "int32",
          "description": "play until type(1 - no end date, 2 - end after x occurrences, 3 - end specific date)"
        },
        "playWeeklyNumDays": {
          "type": "integer",
          "format": "int32",
          "description": "play weekly number of days"
        },
        "primaryGameID": {
          "type": "integer",
          "format": "int64",
          "description": "primary game_id"
        },
        "subscriptionTitle": {
          "type": "string",
          "description": "subscription title"
        }
      }
    },
    "ArrayOfLotterySubscriptionGameRuleDay": {
      "type": "object",
      "properties": {
        "lotterySubscriptionGameRuleDay": {
          "type": "array",
          "xml": {
            "name": "LotterySubscriptionGameRuleDay"
          },
          "items": {
            "xml": {
              "name": "LotterySubscriptionGameRuleDay"
            },
            "$ref": "#/definitions/LotterySubscriptionGameRuleDay"
          }
        }
      }
    },
    "LotteryGameAutoPlayConfigurationReturn": {
      "type": "object",
      "properties": {
        "gameRule": {
          "xml": {
            "name": "GameRule"
          },
          "$ref": "#/definitions/LotterySubscriptionGameRule"
        }
      }
    },
    "LotterySubscriptionGameRule": {
      "type": "object",
      "properties": {
        "acceptBetMinutesBeforeDraw": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "AcceptBetMinutesBeforeDraw"
          }
        },
        "advancedDraws": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "AdvancedDraws"
          }
        },
        "allDrawsEnabled": {
          "type": "boolean",
          "xml": {
            "name": "AllDrawsEnabled"
          }
        },
        "dailyEnabled": {
          "type": "boolean",
          "xml": {
            "name": "DailyEnabled"
          }
        },
        "endAfterOccurances": {
          "type": "boolean",
          "xml": {
            "name": "EndAfterOccurances"
          }
        },
        "endSpecificDate": {
          "type": "boolean",
          "xml": {
            "name": "EndSpecificDate"
          }
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameID"
          }
        },
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "noEndDate": {
          "type": "boolean",
          "xml": {
            "name": "NoEndDate"
          }
        },
        "playFromDateEnabled": {
          "type": "boolean",
          "xml": {
            "name": "PlayFromDateEnabled"
          }
        },
        "playIntervalEveryNumDaily": {
          "type": "boolean",
          "xml": {
            "name": "PlayIntervalEveryNumDaily"
          }
        },
        "playIntervalEveryNumWeekly": {
          "type": "boolean",
          "xml": {
            "name": "PlayIntervalEveryNumWeekly"
          }
        },
        "playNumHoursBeforeDraw": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "PlayNumHoursBeforeDraw"
          }
        },
        "playTime": {
          "type": "string",
          "xml": {
            "name": "PlayTime"
          }
        },
        "playTimeEnabled": {
          "type": "boolean",
          "xml": {
            "name": "PlayTimeEnabled"
          }
        },
        "prizeConditionEnabled": {
          "type": "boolean",
          "xml": {
            "name": "PrizeConditionEnabled"
          }
        },
        "ruleDays": {
          "xml": {
            "name": "RuleDays"
          },
          "$ref": "#/definitions/ArrayOfLotterySubscriptionGameRuleDay"
        },
        "weeklyEnabled": {
          "type": "boolean",
          "xml": {
            "name": "WeeklyEnabled"
          }
        }
      }
    },
    "LotterySubscriptionGameRuleDay": {
      "type": "object",
      "properties": {
        "dayNo": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "DayNo"
          }
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameID"
          }
        }
      }
    },
    "LotteryDisableAutoPlaySubscriptionReturn": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "xml": {
            "name": "Success"
          }
        }
      }
    },
    "LotteryDeleteAutoPlaySubscriptionReturn": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "xml": {
            "name": "Success"
          }
        }
      }
    },
    "LotteryEnableAutoPlaySubscriptionReturn": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "xml": {
            "name": "Success"
          }
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "statusMessage": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "faultId": {
          "type": "integer",
          "format": "int64"
        },
        "syncResponse": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "SportsBookSync": {
      "type": "object",
      "properties": {
        "eventID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "EventID"
          }
        },
        "gameStateIDF": {
          "type": "string",
          "xml": {
            "name": "GameStateIDF"
          }
        },
        "syncType": {
          "type": "string",
          "xml": {
            "name": "SyncType"
          },
          "enum": [
            "SPORTS",
            "EVENTS",
            "DEFAULT_MARKETS",
            "TEAMS"
          ]
        }
      }
    },
    "HealthCheck": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "responseTime": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Country": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the country"
        },
        "iso": {
          "type": "string",
          "description": "The country ISO"
        },
        "name": {
          "type": "string",
          "description": "The name of the country"
        },
        "phoneCode": {
          "type": "string",
          "description": "The code phone prefix of the country"
        },
        "regions": {
          "type": "array",
          "description": "The list of the country's regions",
          "items": {
            "$ref": "#/definitions/Country"
          }
        }
      },
      "description": "The country object"
    },
    "PEPDutyType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the duty type"
        },
        "name": {
          "type": "string",
          "description": "The name of the duty type"
        }
      },
      "description": "Provides details of the duty of the politically exposed person, for example mayor of Athens, or prime minister of Greece"
    },
    "PEPFundsSource": {
      "type": "object",
      "properties": {
        "hasDetails": {
          "type": "boolean",
          "description": "Check if source of funds has details"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The source of funds id"
        },
        "name": {
          "type": "string",
          "description": "The source of funds name"
        }
      },
      "description": "Provides information on where the politically exposed person gets the funds from, for example pension, salary, property sale"
    },
    "PEPInformation": {
      "type": "object",
      "properties": {
        "dutyTypes": {
          "type": "array",
          "description": "The list of the duty types",
          "items": {
            "$ref": "#/definitions/PEPDutyType"
          }
        },
        "sourceOfFunds": {
          "type": "array",
          "description": "The list of the source of founds",
          "items": {
            "$ref": "#/definitions/PEPFundsSource"
          }
        },
        "relations": {
          "type": "array",
          "description": "The list of the pep relations",
          "items": {
            "$ref": "#/definitions/PEPRelation"
          }
        }
      },
      "description": "The pep(politically exposed person) information "
    },
    "PEPRelation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the way of the political exposure"
        },
        "name": {
          "type": "string",
          "description": "The name of the way of the political exposure"
        }
      },
      "description": "It describes the job title (prime minister) or relation to the politically exposed person (daughter of prime minister)"
    },
    "Bonus": {
      "type": "object",
      "properties": {
        "bonusId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the bonus"
        },
        "awardedId": {
          "type": "integer",
          "format": "int64",
          "description": "The awarded id"
        },
        "type": {
          "type": "string",
          "description": "The type of the bonus"
        },
        "name": {
          "type": "string",
          "description": "The name of the bonus"
        },
        "description": {
          "type": "string",
          "description": "The description of the bonus"
        },
        "percentaged": {
          "type": "boolean",
          "description": "Check if the bonus is percentaged"
        },
        "bonusAmount": {
          "type": "number",
          "description": "The bonus amount"
        },
        "bonusFixedAmount": {
          "type": "number",
          "description": "The fixed bonus amount"
        },
        "bonusAmountGiven": {
          "type": "number",
          "description": "The given bonus amount"
        },
        "activationDate": {
          "type": "string",
          "description": "The activation date"
        },
        "expirationDate": {
          "type": "string",
          "description": "The expiration date"
        },
        "amountAlreadyPlayed": {
          "type": "number",
          "description": "The amount that has been already played"
        },
        "amountLeftToPlay": {
          "type": "number",
          "description": "The amount that left to play"
        },
        "totalAmountToBePlayed": {
          "type": "number",
          "description": "The total amount to be played"
        },
        "percentageAchieved": {
          "type": "number",
          "description": "The achieved percentage"
        },
        "secured": {
          "type": "boolean",
          "description": "Check if the bonus is secured"
        },
        "lost": {
          "type": "boolean",
          "description": "Check if the bonus is lost"
        },
        "securedDate": {
          "type": "string",
          "description": "The secured date"
        },
        "lostDate": {
          "type": "string",
          "description": "The lost date"
        },
        "bonusCode": {
          "type": "string",
          "description": "The bonus code"
        }
      },
      "description": "The bonus object"
    },
    "Voucher": {
      "type": "object",
      "properties": {
        "bonuses": {
          "xml": {
            "name": "Bonuses"
          },
          "$ref": "#/definitions/ArrayOfBonusRuleExtendedBase"
        },
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "validityEndDate": {
          "type": "string",
          "xml": {
            "name": "ValidityEndDate"
          }
        },
        "validityStartDate": {
          "type": "string",
          "xml": {
            "name": "ValidityStartDate"
          }
        },
        "voucherCode": {
          "type": "string",
          "xml": {
            "name": "VoucherCode"
          }
        }
      }
    },
    "The Bit8 platform information": {
      "type": "object",
      "properties": {
        "channelType": {
          "type": "string",
          "description": "The platform channel type"
        },
        "channelTypeName": {
          "type": "string",
          "description": "The platform channel type name"
        },
        "platformType": {
          "type": "string",
          "description": "The platform type"
        },
        "platformTypeEnum": {
          "type": "string",
          "description": "The platform type",
          "enum": [
            "NOTDEFINED",
            "WEB",
            "DOWNLOAD",
            "MOBILE",
            "TABLET",
            "TV",
            "BACKOFFICE",
            "GABLET",
            "TERMINAL",
            "MOBILEAPP",
            "TABLETAPP",
            "TVAPP",
            "SUBSCRIPTION",
            "RETAILER",
            "SUBSOFFLINE",
            "SUBSTABO",
            "SUBSJACKPOT",
            "SUBSOFFLINEJACKPOT"
          ]
        },
        "platformTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "The bit8 platform type id"
        },
        "platformTypeName": {
          "type": "string",
          "description": "The platform type name"
        },
        "playLimitsActive": {
          "type": "boolean",
          "description": "Are play limits active"
        },
        "default": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "ArrayOfPlayLimitAdminAmount": {
      "type": "object",
      "properties": {
        "playLimitAdminAmount": {
          "type": "array",
          "xml": {
            "name": "PlayLimitAdminAmount"
          },
          "items": {
            "xml": {
              "name": "PlayLimitAdminAmount"
            },
            "$ref": "#/definitions/PlayLimitAdminAmount"
          }
        }
      }
    },
    "ArrayOfPlayLimitTimeLine": {
      "type": "object",
      "properties": {
        "playLimitTimeLine": {
          "type": "array",
          "xml": {
            "name": "PlayLimitTimeLine"
          },
          "items": {
            "xml": {
              "name": "PlayLimitTimeLine"
            },
            "$ref": "#/definitions/PlayLimitTimeLine"
          }
        }
      }
    },
    "PlayLimit": {
      "type": "object",
      "required": [
        "limitValue",
        "startDate"
      ],
      "properties": {
        "adminAmounts": {
          "xml": {
            "name": "AdminAmounts"
          },
          "$ref": "#/definitions/ArrayOfPlayLimitAdminAmount"
        },
        "endDate": {
          "type": "string",
          "xml": {
            "name": "EndDate"
          }
        },
        "limitValue": {
          "type": "number",
          "xml": {
            "name": "LimitValue"
          }
        },
        "startDate": {
          "type": "string",
          "xml": {
            "name": "StartDate"
          }
        }
      }
    },
    "PlayLimitAdminAmount": {
      "type": "object",
      "properties": {
        "currencyCode": {
          "type": "string",
          "xml": {
            "name": "CurrencyCode"
          }
        },
        "currencyID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "CurrencyID"
          }
        },
        "limitValue": {
          "type": "number",
          "xml": {
            "name": "LimitValue"
          }
        }
      }
    },
    "PlayLimitAdminGetAllGameSpecificReturn": {
      "type": "object",
      "required": [
        "playLimitTimeLines"
      ],
      "properties": {
        "playLimitTimeLines": {
          "xml": {
            "name": "PlayLimitTimeLines"
          },
          "$ref": "#/definitions/ArrayOfPlayLimitTimeLine"
        }
      }
    },
    "PlayLimitTimeLine": {
      "type": "object",
      "required": [
        "current",
        "intervalType",
        "licenseType",
        "limitType"
      ],
      "properties": {
        "current": {
          "xml": {
            "name": "Current"
          },
          "$ref": "#/definitions/PlayLimit"
        },
        "future": {
          "xml": {
            "name": "Future"
          },
          "$ref": "#/definitions/PlayLimit"
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameID"
          }
        },
        "gameManufacturer": {
          "type": "string",
          "xml": {
            "name": "GameManufacturer"
          }
        },
        "gameTitle": {
          "type": "string",
          "xml": {
            "name": "GameTitle"
          }
        },
        "intervalType": {
          "type": "string",
          "xml": {
            "name": "IntervalType"
          }
        },
        "licenseType": {
          "type": "string",
          "xml": {
            "name": "LicenseType"
          }
        },
        "limitType": {
          "type": "string",
          "xml": {
            "name": "LimitType"
          }
        },
        "limitTypeDisplay": {
          "type": "string",
          "xml": {
            "name": "LimitTypeDisplay"
          }
        }
      }
    },
    "ArrayOfGame": {
      "type": "object",
      "properties": {
        "game": {
          "type": "array",
          "xml": {
            "name": "Game"
          },
          "items": {
            "xml": {
              "name": "Game"
            },
            "$ref": "#/definitions/Game"
          }
        }
      }
    },
    "Game": {
      "type": "object",
      "required": [
        "gameDescription",
        "gameName",
        "manufacturerAPIName",
        "manufacturerName",
        "manufucturerGameID",
        "promotionWgrReqWeight"
      ],
      "properties": {
        "gameCategoryID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameCategoryID"
          }
        },
        "gameDescription": {
          "type": "string",
          "xml": {
            "name": "GameDescription"
          }
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameID"
          }
        },
        "gameName": {
          "type": "string",
          "xml": {
            "name": "GameName"
          }
        },
        "hasPlayForFun": {
          "type": "boolean",
          "xml": {
            "name": "HasPlayForFun"
          }
        },
        "licenseTypeId": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "LicenseTypeId"
          }
        },
        "manufacturerAPIName": {
          "type": "string",
          "xml": {
            "name": "ManufacturerAPIName"
          }
        },
        "manufacturerGameLaunchType": {
          "type": "string",
          "xml": {
            "name": "ManufacturerGameLaunchType"
          }
        },
        "manufacturerName": {
          "type": "string",
          "xml": {
            "name": "ManufacturerName"
          }
        },
        "manufucturerGameID": {
          "type": "string",
          "xml": {
            "name": "ManufucturerGameID"
          }
        },
        "operatorGameID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "OperatorGameID"
          }
        },
        "promotionWgrReqWeight": {
          "type": "number",
          "xml": {
            "name": "PromotionWgrReqWeight"
          }
        }
      }
    },
    "GameGetAllGamesReturn": {
      "type": "object",
      "properties": {
        "games": {
          "xml": {
            "name": "Games"
          },
          "$ref": "#/definitions/ArrayOfGame"
        }
      }
    },
    "ArrayOfTransactionAdminLimit": {
      "type": "object",
      "properties": {
        "transactionAdminLimit": {
          "type": "array",
          "xml": {
            "name": "TransactionAdminLimit"
          },
          "items": {
            "xml": {
              "name": "TransactionAdminLimit"
            },
            "$ref": "#/definitions/TransactionAdminLimit"
          }
        }
      }
    },
    "ArrayOfTransactionAdminLimitAmount": {
      "type": "object",
      "properties": {
        "transactionAdminLimitAmount": {
          "type": "array",
          "xml": {
            "name": "TransactionAdminLimitAmount"
          },
          "items": {
            "xml": {
              "name": "TransactionAdminLimitAmount"
            },
            "$ref": "#/definitions/TransactionAdminLimitAmount"
          }
        }
      }
    },
    "TransactionAdminLimit": {
      "type": "object",
      "properties": {
        "amounts": {
          "xml": {
            "name": "Amounts"
          },
          "$ref": "#/definitions/ArrayOfTransactionAdminLimitAmount"
        },
        "clientSegmentID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ClientSegmentID"
          }
        },
        "clientSegmentName": {
          "type": "string",
          "xml": {
            "name": "ClientSegmentName"
          }
        },
        "intervalTypeID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "IntervalTypeID"
          }
        },
        "intervalTypeName": {
          "type": "string",
          "xml": {
            "name": "IntervalTypeName"
          }
        },
        "paymentMethodID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PaymentMethodID"
          }
        },
        "paymentMethodName": {
          "type": "string",
          "xml": {
            "name": "PaymentMethodName"
          }
        },
        "playerStatusID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PlayerStatusID"
          }
        },
        "playerStatusName": {
          "type": "string",
          "xml": {
            "name": "PlayerStatusName"
          }
        },
        "transactionPaymentTypeID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "TransactionPaymentTypeID"
          }
        },
        "transactionPaymentTypeName": {
          "type": "string",
          "xml": {
            "name": "TransactionPaymentTypeName"
          }
        },
        "transferLimitID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "TransferLimitID"
          }
        },
        "withdrawalCountLimit": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "WithdrawalCountLimit"
          }
        }
      }
    },
    "TransactionAdminLimitAmount": {
      "type": "object",
      "properties": {
        "adminMaxAmount": {
          "type": "number",
          "xml": {
            "name": "AdminMaxAmount"
          }
        },
        "adminMinAmount": {
          "type": "number",
          "xml": {
            "name": "AdminMinAmount"
          }
        },
        "currencyCode": {
          "type": "string",
          "xml": {
            "name": "CurrencyCode"
          }
        },
        "currencyID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "CurrencyID"
          }
        }
      }
    },
    "TransactionGetAllAdminDepositLimitsReturn": {
      "type": "object",
      "required": [
        "transactionAdminDepositLimits"
      ],
      "properties": {
        "transactionAdminDepositLimits": {
          "xml": {
            "name": "TransactionAdminDepositLimits"
          },
          "$ref": "#/definitions/ArrayOfTransactionAdminLimit"
        }
      }
    },
    "GamePromotion": {
      "type": "object",
      "properties": {
        "gameID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game"
        },
        "promotionWgrReqWeight": {
          "type": "number",
          "description": "The requested weight for promotion"
        }
      },
      "description": "The promotion games"
    },
    "Promotion": {
      "type": "object",
      "properties": {
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the promotion"
        },
        "awardedId": {
          "type": "integer",
          "format": "int64",
          "description": "The awarded id"
        },
        "type": {
          "type": "string",
          "description": "The type of the promotion"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority"
        },
        "name": {
          "type": "string",
          "description": "The name of the promotion"
        },
        "description": {
          "type": "string",
          "description": "The description of the promotion"
        },
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "totalAmountToBeAchieved": {
          "type": "number",
          "description": "The total ( to be achieved ) amount"
        },
        "amountAlreadyPlayed": {
          "type": "number",
          "description": "The already played amount"
        },
        "percentageAchieved": {
          "type": "number",
          "description": "The achieved percentage"
        },
        "isPercentage": {
          "type": "boolean",
          "description": "Check if it is percentage"
        },
        "awardPercentage": {
          "type": "number",
          "description": "The award percentage"
        },
        "prizeAmount": {
          "type": "number",
          "description": "The prize amount"
        },
        "requirementAchieved": {
          "type": "boolean",
          "description": "Check if the requirement was achieved"
        },
        "bonusCode": {
          "type": "string",
          "description": "The bonus code"
        },
        "canOptIn": {
          "type": "boolean",
          "description": "Check if player can opt in"
        },
        "optedIn": {
          "type": "boolean",
          "description": "Check if it is opted in"
        },
        "isActive": {
          "type": "boolean",
          "description": "Check if it is actived"
        },
        "playersSelectionId": {
          "type": "integer",
          "format": "int64",
          "description": "The selection id of the players"
        },
        "gameSelected": {
          "type": "array",
          "description": "The list for selected games",
          "items": {
            "$ref": "#/definitions/GamePromotion"
          }
        }
      },
      "description": "The promotion object"
    },
    "PlayerSelection": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the selection"
        },
        "name": {
          "type": "string",
          "description": "The name of the selection"
        },
        "playerSelectionID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the selection"
        }
      },
      "description": "The selections of a player"
    },
    "Share Percentage": {
      "type": "object",
      "properties": {
        "percentage": {
          "type": "number",
          "description": "The share percentage"
        },
        "place": {
          "type": "integer",
          "format": "int32",
          "description": "The share percentage place"
        }
      },
      "description": "The share percentage of the tournament"
    },
    "Tournament Prize": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "The prize amount"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The prize position"
        },
        "wagerRequirement": {
          "type": "number",
          "description": "The wager requirement"
        }
      },
      "description": "The prize of the tournament"
    },
    "TournamentExtended": {
      "type": "object",
      "properties": {
        "playerOptedIn": {
          "type": "boolean",
          "description": "Flag whether player has opted in the tournament"
        },
        "metricId": {
          "type": "integer",
          "format": "int32",
          "description": "The metric id associated with the tournament"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The tournament id"
        },
        "allGamesSelected": {
          "type": "boolean",
          "description": "Flag whether all games are selected for the tournament"
        },
        "bonusRuleId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the bonus rule"
        },
        "displayName": {
          "type": "string",
          "description": "The tournament display name"
        },
        "gamesSelected": {
          "type": "array",
          "description": "The list of the selected games for the tournament",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "hasPlayersOptedIn": {
          "type": "boolean",
          "description": "Flag whether tournament has players opted in"
        },
        "leaderboardEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "The tournament leaderboard end date"
        },
        "leaderboardStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "The tournament leaderboard start date"
        },
        "name": {
          "type": "string",
          "description": "The tournament name"
        },
        "participantsNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of participants"
        },
        "prizesNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of the prizes "
        },
        "qualifiedParticipantsNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The qualified participants number"
        },
        "prizeType": {
          "type": "string",
          "description": "The prize type"
        },
        "prizes": {
          "type": "array",
          "description": "The prizes of the tournament",
          "items": {
            "$ref": "#/definitions/Tournament Prize"
          }
        },
        "qualifyMinRounds": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum Rounds to qualify"
        },
        "scoreRoundsNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of score type rounds"
        },
        "scoreType": {
          "type": "string",
          "description": "The score type"
        },
        "scoreTypeId": {
          "type": "integer",
          "format": "int32",
          "description": "The score type id"
        },
        "sharePlacePercentages": {
          "type": "array",
          "description": "The share place percentages",
          "items": {
            "$ref": "#/definitions/Share Percentage"
          }
        },
        "stakeProfitPercentage": {
          "type": "number",
          "description": "The stake profit percentage"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the tournament"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the tournament"
        },
        "type": {
          "type": "string",
          "description": "The tournament  type"
        },
        "wagerReqRealOnly": {
          "type": "boolean",
          "description": "Flag whether the tournament is wager contribution real only"
        },
        "minBetWagerRestriction": {
          "type": "number",
          "description": "The tournament wager restriction"
        }
      },
      "description": "The extended tournament"
    },
    "LeaderBoard": {
      "type": "object",
      "properties": {
        "isFinalRanking": {
          "type": "boolean",
          "description": "Check if it is the final ranking"
        },
        "prizeTotal": {
          "type": "array",
          "description": "The total prizes of tournament",
          "items": {
            "$ref": "#/definitions/PrizeTotal"
          }
        },
        "prizeType": {
          "type": "string",
          "description": "The type of the prize"
        },
        "qualifyMinRounds": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum rounds to qualify"
        },
        "rank": {
          "type": "array",
          "description": "The rank of the tournament",
          "items": {
            "$ref": "#/definitions/Rank"
          }
        },
        "scoreType": {
          "type": "string",
          "description": "The type of the score"
        },
        "stakeProfitPercentage": {
          "type": "number",
          "description": "The percentage profit for the stake"
        },
        "totalPlayerOptedIn": {
          "type": "integer",
          "format": "int64",
          "description": "The total opted in for a player"
        },
        "tournamentProfit": {
          "type": "number",
          "description": "The tournament's profit"
        }
      },
      "description": "The leaderboard of the tournament"
    },
    "PrizeTotal": {
      "type": "object",
      "properties": {
        "currencyCode": {
          "type": "string",
          "description": "The currency code"
        },
        "totalPrizeAmount": {
          "type": "number",
          "description": "The total amount for a prize"
        }
      },
      "description": "The total prizes for a tournament"
    },
    "Rank": {
      "type": "object",
      "properties": {
        "affiliateCode": {
          "type": "string",
          "description": "The affiliate code"
        },
        "awardedPrizeAmount": {
          "type": "number",
          "description": "The awarded amount for a prize"
        },
        "city": {
          "type": "string",
          "description": "The city"
        },
        "clientId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the client"
        },
        "clientStatId": {
          "type": "integer",
          "format": "int64",
          "description": "The stat id of the client"
        },
        "countryCode": {
          "type": "string",
          "description": "The code of the country"
        },
        "countryName": {
          "type": "string",
          "description": "The name of the country"
        },
        "currencyCode": {
          "type": "string",
          "description": "The currency code"
        },
        "device": {
          "type": "string",
          "description": "The device"
        },
        "firstName": {
          "type": "string",
          "description": "The firstname"
        },
        "gender": {
          "type": "string",
          "description": "The gender"
        },
        "languageCode": {
          "type": "string",
          "description": "The language code"
        },
        "nickname": {
          "type": "string",
          "description": "The nickname"
        },
        "prizeAmount": {
          "type": "number",
          "description": "The amount of the prize"
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "The rank"
        },
        "rounds": {
          "type": "integer",
          "format": "int32",
          "description": "The rounds"
        },
        "score": {
          "type": "number",
          "description": "The score"
        },
        "signUpDate": {
          "type": "string",
          "description": "The sign up date"
        },
        "stakePrizeAmount": {
          "type": "number",
          "description": "The stake amount of a prize"
        },
        "totalBet": {
          "type": "number",
          "description": "The total bet"
        },
        "totalWin": {
          "type": "number",
          "description": "The total win"
        },
        "vipLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The level of vip"
        },
        "vipLevelId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of vip's level"
        }
      },
      "description": "The rank of the tournament"
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "itemsPerPage": {
          "type": "integer",
          "format": "int64",
          "description": "The items per page"
        },
        "pageNo": {
          "type": "integer",
          "format": "int64",
          "description": "The page number"
        },
        "totalPages": {
          "type": "integer",
          "format": "int64",
          "description": "The total pages"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64",
          "description": "The total items"
        }
      },
      "description": "The pagination object"
    },
    "Sportbook entities data": {
      "type": "object",
      "properties": {
        "extEntityID": {
          "type": "string",
          "description": "The external entity id"
        },
        "gameManufacturerID": {
          "type": "integer",
          "format": "int64",
          "description": "The game manufacturer id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "sbEntityID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook entity id"
        },
        "region": {
          "type": "array",
          "description": "The sportbook region data",
          "items": {
            "$ref": "#/definitions/Sportbook region data"
          }
        }
      },
      "description": "The sportbook entities data"
    },
    "Sportbook event data": {
      "type": "object",
      "properties": {
        "extEntityID": {
          "type": "string",
          "description": "The external entity id"
        },
        "gameManufacturerID": {
          "type": "integer",
          "format": "int64",
          "description": "The game manufacturer id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "sbEntityID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook entity id"
        },
        "market": {
          "type": "array",
          "description": "The sportbook market data",
          "items": {
            "$ref": "#/definitions/Sportbook market data"
          }
        },
        "dateEnd": {
          "type": "string",
          "description": "The end date"
        },
        "dateStart": {
          "type": "string",
          "description": "The start date"
        }
      },
      "description": "The sportbook event data"
    },
    "Sportbook group data": {
      "type": "object",
      "properties": {
        "extEntityID": {
          "type": "string",
          "description": "The external entity id"
        },
        "gameManufacturerID": {
          "type": "integer",
          "format": "int64",
          "description": "The game manufacturer id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "sbEntityID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook entity id"
        },
        "event": {
          "type": "array",
          "description": "The sportbook event data",
          "items": {
            "$ref": "#/definitions/Sportbook event data"
          }
        },
        "sbRegionID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook region id"
        }
      },
      "description": "The sportbook group data"
    },
    "Sportbook market data": {
      "type": "object",
      "properties": {
        "extEntityID": {
          "type": "string",
          "description": "The external entity id"
        },
        "gameManufacturerID": {
          "type": "integer",
          "format": "int64",
          "description": "The game manufacturer id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "sbEntityID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook entity id"
        },
        "selection": {
          "type": "array",
          "description": "The sportbook selection data",
          "items": {
            "$ref": "#/definitions/Sportbook selection data"
          }
        },
        "description": {
          "type": "string",
          "description": "The description"
        }
      },
      "description": "The sportbook market data"
    },
    "Sportbook region data": {
      "type": "object",
      "properties": {
        "extEntityID": {
          "type": "string",
          "description": "The external entity id"
        },
        "gameManufacturerID": {
          "type": "integer",
          "format": "int64",
          "description": "The game manufacturer id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "sbEntityID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook entity id"
        },
        "groupData": {
          "type": "array",
          "description": "The sportbook group data",
          "items": {
            "$ref": "#/definitions/Sportbook group data"
          }
        },
        "sbSportID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook sport id"
        }
      },
      "description": "The sportbook region data"
    },
    "Sportbook selection data": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description"
        },
        "extSelectionID": {
          "type": "string",
          "description": "The external selection id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "odd": {
          "type": "number",
          "description": "The odd"
        },
        "priceDown": {
          "type": "integer",
          "format": "int32",
          "description": "The down price"
        },
        "priceUp": {
          "type": "integer",
          "format": "int32",
          "description": "The up price"
        },
        "sbSelectionID": {
          "type": "integer",
          "format": "int64",
          "description": "The sportbook selection id"
        }
      },
      "description": "The sportbook selection data"
    },
    "The entities filtering options": {
      "type": "object",
      "properties": {
        "gameManufacturerName": {
          "type": "string",
          "description": "The game manufacturer name"
        },
        "levelDepth": {
          "type": "integer",
          "format": "int32",
          "description": "The level depth"
        }
      },
      "description": "Get all options for sportbook entities"
    },
    "OperatorPlayerRestrictionData": {
      "type": "object",
      "required": [
        "recurrenceEnabled"
      ],
      "properties": {
        "indefinitely": {
          "type": "boolean",
          "description": "Check if it is indefinitely"
        },
        "playerRestrictionType": {
          "type": "string",
          "description": "The type of a restriction"
        },
        "reason": {
          "type": "string",
          "description": "The reason that a player has a restriction"
        },
        "requestDate": {
          "type": "string",
          "description": "The requested date"
        },
        "restrictFromDate": {
          "type": "string",
          "description": "The date that the restriction starts"
        },
        "restrictNumMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the minutes of the restriction"
        },
        "restrictUntilDate": {
          "type": "string",
          "description": "The date that the restriction ends"
        },
        "licenseType": {
          "type": "string",
          "description": "The restriction license type. Example all, lotto, casino, poker, sportsbook"
        },
        "recurrenceEnabled": {
          "type": "boolean",
          "description": "The restriction recurrence frequency type. If set true then recurrence is enabled. If set to false then the restriction applies for one time only"
        },
        "recurrence": {
          "description": "The restriction recurrence information if recurrence is enabled",
          "$ref": "#/definitions/RestrictionRecurrence"
        },
        "gameIds": {
          "type": "array",
          "description": "The restricted games ids",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "gameManufacturerId": {
          "type": "integer",
          "format": "int64",
          "description": "The restricted games manufacturer id"
        }
      },
      "description": "The operator player restriction request data"
    },
    "RestrictionRecurrence": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "description": "The recurrence start time. Pattern: HH:mm:ss"
        },
        "endTime": {
          "type": "string",
          "description": "The recurrence end time. Pattern: HH:mm:ss"
        },
        "intervalType": {
          "type": "string",
          "description": "The recurrence pattern interval type. Example: Daily or Weekly)",
          "enum": [
            "DAILY",
            "WEEKLY"
          ]
        },
        "endType": {
          "type": "string",
          "description": "The recurrence end type Example: NoEndDate, EndAfter, EndByDate)",
          "enum": [
            "NO_END_DATE",
            "END_AFTER_X",
            "END_BY_DATE"
          ]
        },
        "occurrences": {
          "type": "integer",
          "format": "int32",
          "description": "The recurrence number of occurrences"
        },
        "recurEvery": {
          "type": "integer",
          "format": "int32",
          "description": "The recurrence pattern. Example: Every X days/weeks)"
        },
        "recurrenceDays": {
          "type": "array",
          "description": "The recurrence week days",
          "items": {
            "type": "string",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ]
          }
        }
      },
      "description": "The restriction recurrences setup data"
    },
    "ArrayOfLoyaltyCurrencyAmount": {
      "type": "object",
      "properties": {
        "loyaltyCurrencyAmount": {
          "type": "array",
          "xml": {
            "name": "LoyaltyCurrencyAmount"
          },
          "items": {
            "xml": {
              "name": "LoyaltyCurrencyAmount"
            },
            "$ref": "#/definitions/LoyaltyCurrencyAmount"
          }
        }
      }
    },
    "ArrayOfLoyaltyRedemption": {
      "type": "object",
      "properties": {
        "loyaltyRedemption": {
          "type": "array",
          "xml": {
            "name": "LoyaltyRedemption"
          },
          "items": {
            "xml": {
              "name": "LoyaltyRedemption"
            },
            "$ref": "#/definitions/LoyaltyRedemption"
          }
        }
      }
    },
    "ArrayOflong": {
      "type": "object",
      "properties": {
        "long": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "LoyaltyCurrencyAmount": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "xml": {
            "name": "Amount"
          }
        },
        "currencyCode": {
          "type": "string",
          "xml": {
            "name": "CurrencyCode"
          }
        },
        "currencyID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "CurrencyID"
          }
        }
      }
    },
    "LoyaltyGetRedemptionSchemesReturn": {
      "type": "object",
      "properties": {
        "redemptionSchemes": {
          "xml": {
            "name": "RedemptionSchemes"
          },
          "$ref": "#/definitions/ArrayOfLoyaltyRedemption"
        }
      }
    },
    "LoyaltyRedemption": {
      "type": "object",
      "required": [
        "currencyAmounts",
        "minimumLoyaltyPoints",
        "name"
      ],
      "properties": {
        "currencyAmounts": {
          "xml": {
            "name": "CurrencyAmounts"
          },
          "$ref": "#/definitions/ArrayOfLoyaltyCurrencyAmount"
        },
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "endDate": {
          "type": "string",
          "xml": {
            "name": "EndDate"
          }
        },
        "extraID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ExtraID"
          }
        },
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "limitedOfferAmount": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "LimitedOfferAmount"
          }
        },
        "loyaltyBadgesIds": {
          "xml": {
            "name": "LoyaltyBadgesIds"
          },
          "$ref": "#/definitions/ArrayOflong"
        },
        "loyaltyRedemptionID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "LoyaltyRedemptionID"
          }
        },
        "minimumEnrolmentAge": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "MinimumEnrolmentAge"
          }
        },
        "minimumLoyaltyPoints": {
          "type": "number",
          "xml": {
            "name": "MinimumLoyaltyPoints"
          }
        },
        "minimumVIPLevel": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "MinimumVIPLevel"
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "Name"
          }
        },
        "openToAll": {
          "type": "boolean",
          "xml": {
            "name": "OpenToAll"
          }
        },
        "playerSelectionsId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PlayerSelectionsId"
          }
        },
        "prizeID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PrizeID"
          }
        },
        "prizeType": {
          "type": "string",
          "xml": {
            "name": "PrizeType"
          },
          "enum": [
            "CASH",
            "BONUS",
            "PROMOTION",
            "CUSTOM",
            "FREEROUNDS",
            "TOURNAMENT",
            "GIFT"
          ]
        },
        "startDate": {
          "type": "string",
          "xml": {
            "name": "StartDate"
          }
        }
      }
    },
    "GameSession": {
      "type": "object",
      "properties": {
        "html": {
          "type": "string",
          "description": "The game html"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The game session id"
        },
        "key": {
          "type": "string",
          "description": "The game session key"
        },
        "url": {
          "type": "string",
          "description": "The game session url"
        }
      },
      "description": "Game session information"
    },
    "GameSessionOptions": {
      "type": "object",
      "properties": {
        "launchType": {
          "type": "string",
          "description": "The game session launch type (NORMAL, MOBILE, DESKTOP, NATIVE",
          "enum": [
            "NORMAL",
            "MOBILE",
            "DESKTOP",
            "NATIVE"
          ]
        },
        "languageCode": {
          "type": "string",
          "description": "The language code "
        },
        "lobbyURL": {
          "type": "string",
          "description": "The lobby URL"
        },
        "bankingURL": {
          "type": "string",
          "description": "The banking URL"
        },
        "lobbyName": {
          "type": "string",
          "description": "The lobby name"
        },
        "lobbyAdditionalPath": {
          "type": "string",
          "description": "The lobby additional path"
        },
        "disableTutorial": {
          "type": "boolean",
          "description": "Check for disabling of tutorials"
        },
        "removeUrls": {
          "type": "boolean",
          "description": "Check if the lobby Url and banking Url will completely omitted from the game session URL"
        },
        "rgi": {
          "type": "boolean",
          "description": "Check if game is RGI ( Used by Microgaming if set to true it will show the player a button to play for real. When displaying the game into an IFrame or as a side game pass this value as false )"
        },
        "startType": {
          "type": "string",
          "description": "The game session start type (NONE, RECOMMENDATIONS_ENGINE_BY_PLAYER, RECOMMENDATIONS_ENGINE_BY_GAME)",
          "enum": [
            "NONE",
            "RECOMMENDATIONS_ENGINE_BY_PLAYER",
            "RECOMMENDATIONS_ENGINE_BY_GAME"
          ]
        },
        "ipAddress": {
          "type": "string",
          "description": "The ip address"
        },
        "manufucturerGameType": {
          "type": "string",
          "description": "The manufacturer game type"
        }
      },
      "description": "Game start session custom options"
    },
    "ErrorData": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the error"
        },
        "name": {
          "type": "string",
          "description": "The name of the error"
        },
        "number": {
          "type": "string",
          "description": "The error number"
        }
      },
      "description": "The Bit8's system ErrorData object"
    },
    "SecretQuestion": {
      "type": "object",
      "required": [
        "question"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the secret question"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "description": "The order"
        },
        "question": {
          "type": "string",
          "description": "The question"
        },
        "translation": {
          "type": "string",
          "description": "The question translation"
        }
      },
      "description": "The secret question object"
    },
    "AddressBook": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The player's address"
        },
        "addressTypeInfo": {
          "type": "string",
          "description": "The address type info",
          "enum": [
            "PERMANENT",
            "CURRENT"
          ]
        },
        "city": {
          "type": "string",
          "description": "The city of the player"
        },
        "countryISO": {
          "type": "string",
          "description": "The country ISO"
        },
        "flatNumber": {
          "type": "string",
          "description": "The flat number of the player"
        },
        "houseName": {
          "type": "string",
          "description": "The house name of the player"
        },
        "houseNumber": {
          "type": "string",
          "description": "The house number of the player"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Checks if it is the primary one"
        },
        "poBox": {
          "type": "string",
          "description": "The po box of the player"
        },
        "postCode": {
          "type": "string",
          "description": "The post code of the player"
        },
        "stateName": {
          "type": "string",
          "description": "The state name of the player"
        },
        "streetName": {
          "type": "string",
          "description": "The street name of the player"
        },
        "streetNumber": {
          "type": "string",
          "description": "The street number of the player"
        },
        "streetType": {
          "type": "string",
          "description": "The type of street of the player"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the player"
        },
        "townName": {
          "type": "string",
          "description": "The town name of the player"
        }
      },
      "description": "The details of an address"
    },
    "ClientSegmentData": {
      "type": "object",
      "properties": {
        "clientSegmentID": {
          "type": "integer",
          "format": "int64",
          "description": "The segment id of the client"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the display"
        },
        "fraudConfN": {
          "type": "integer",
          "format": "int32",
          "description": "Fraud confidence level"
        },
        "fraudK": {
          "type": "number",
          "description": "Fraud average multiplier"
        },
        "fraudMeanKMultiplier": {
          "type": "number",
          "description": "Fraud average calculation weight"
        },
        "fraudStdMultiplier": {
          "type": "number",
          "description": "Fraud standard deviation weight"
        },
        "defaulted": {
          "type": "boolean",
          "description": "Check if the client segment is default"
        },
        "name": {
          "type": "string",
          "description": "The name of the segment"
        },
        "playerSelectedSegment": {
          "type": "boolean",
          "description": "Check if the segment of the player is selected"
        },
        "rangeMax": {
          "type": "number",
          "description": "The max range"
        },
        "rangeMin": {
          "type": "number",
          "description": "The min range"
        },
        "withdrawalIntervalMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The minutes of the interval withdrawal"
        }
      },
      "description": "The data of a client segment"
    },
    "PEPPlayerInfo": {
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean",
          "description": "Check if player is politically exposed"
        },
        "dutyTypeId": {
          "type": "integer",
          "format": "int32",
          "description": "The politicians duty type id of the politically exposed person"
        },
        "fundsSourceDetails": {
          "type": "string",
          "description": "The source of founds details"
        },
        "fundsSourceId": {
          "type": "integer",
          "format": "int32",
          "description": "The source of founds id"
        },
        "relationId": {
          "type": "integer",
          "format": "int32",
          "description": "The way id that the person is politically exposed"
        }
      },
      "description": "The pep(politically exposed person) information of the player"
    },
    "PlayerPhoneNumber": {
      "type": "object",
      "properties": {
        "countryPrefix": {
          "type": "string",
          "description": "The country prefix"
        },
        "mobilePrefix": {
          "type": "string",
          "description": "The mobile prefix"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number"
        },
        "phoneNumberId": {
          "type": "integer",
          "format": "int64",
          "description": "The phone number id"
        },
        "phoneNumberType": {
          "type": "string",
          "description": "The type of the phone number",
          "enum": [
            "PRIMARY_MOBILE",
            "SECONDARY_MOBILE",
            "PRIMARY_LAND_LINE",
            "SECONDARY_LAND_LINE"
          ]
        }
      },
      "description": "The numbers of a player"
    },
    "PlayerProfileFullDTO": {
      "type": "object",
      "properties": {
        "activateAccount": {
          "type": "boolean",
          "description": "The activate account flag"
        },
        "clientID": {
          "type": "integer",
          "format": "int64",
          "description": "The client id of the user"
        },
        "clientStatID": {
          "type": "integer",
          "format": "int64",
          "description": "The client stat id of the user"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currencyISO of the user"
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address of the user"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user"
        },
        "selfExclusion": {
          "type": "boolean",
          "description": "The self exclusion flag"
        },
        "playerRestrictions": {
          "type": "array",
          "description": "Player restriction object",
          "items": {
            "$ref": "#/definitions/RestrictionPlayerData"
          }
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user"
        },
        "userName": {
          "type": "string",
          "description": "The username of the user"
        },
        "languageISO": {
          "type": "string",
          "description": "The languageISO of the user"
        },
        "gender": {
          "type": "string",
          "description": "The gender of the player"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "The date of birth"
        },
        "activationCode": {
          "type": "string",
          "description": "The activation code"
        },
        "betFactor": {
          "type": "number",
          "description": "The bet factor"
        },
        "governmentIssuedId": {
          "type": "string",
          "description": "The city of the player"
        },
        "clientSegment": {
          "description": "The segment of the client",
          "$ref": "#/definitions/ClientSegmentData"
        },
        "contactByEmail": {
          "type": "boolean",
          "description": "Contact by email"
        },
        "contactByPhone": {
          "type": "boolean",
          "description": "Contact by phone"
        },
        "contactByPost": {
          "type": "boolean",
          "description": "Contact by post"
        },
        "contactBySMS": {
          "type": "boolean",
          "description": "Contact by sms"
        },
        "contactByThirdParty": {
          "type": "boolean",
          "description": "Contact by a third party"
        },
        "emailVerificationTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "The type id for email Verification"
        },
        "accountClosed": {
          "type": "boolean",
          "description": "Check if the account is closed"
        },
        "actived": {
          "type": "boolean",
          "description": "Check if the account is active"
        },
        "kycChecked": {
          "type": "boolean",
          "description": "Check if the KYC is checked"
        },
        "playAllowed": {
          "type": "boolean",
          "description": "Check if it is allowed to play"
        },
        "suspicious": {
          "type": "boolean",
          "description": "Check if the account is suspicious"
        },
        "kycCheckedStatus": {
          "type": "string",
          "description": "The status of the KYC is checked"
        },
        "kycCheckedStatusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The code of the KYC checked status"
        },
        "lastUpdated": {
          "type": "string",
          "description": "Last time updated"
        },
        "middleName": {
          "type": "string",
          "description": "The middlename"
        },
        "newsFeedsAllow": {
          "type": "boolean",
          "description": "Check if it is allowed the news feeds"
        },
        "nickname": {
          "type": "string",
          "description": "The nickname"
        },
        "paymentSegmentName": {
          "type": "string",
          "description": "The name of payment segment"
        },
        "phoneNumbers": {
          "type": "array",
          "description": "List of phone numbers of a player",
          "items": {
            "$ref": "#/definitions/PlayerPhoneNumber"
          }
        },
        "addressBooks": {
          "type": "array",
          "description": "The address details of a player",
          "items": {
            "$ref": "#/definitions/AddressBook"
          }
        },
        "pepInfo": {
          "description": "The pep information of a player",
          "$ref": "#/definitions/PEPPlayerInfo"
        },
        "phoneVerificationTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the phone verification type"
        },
        "playerAccountStatus": {
          "type": "string",
          "description": "The status of the account"
        },
        "playerRegistrationState": {
          "type": "string",
          "description": "The state of the player's registration",
          "enum": [
            "FULL",
            "PARTIAL",
            "PROSPECT",
            "ANONYMOUS",
            "UNDEFINED"
          ]
        },
        "postVerificationTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "The id of post verification type"
        },
        "receivePromotionalByPushNotification": {
          "type": "boolean",
          "description": "Receive promotional by push notification"
        },
        "receivePromotionalByEmail": {
          "type": "boolean",
          "description": "Receive promotional by email"
        },
        "receivePromotionalByPhone": {
          "type": "boolean",
          "description": "Receive promotional by phone"
        },
        "receivePromotionalByMobile": {
          "type": "boolean",
          "description": "Receive promotional by mobile phone"
        },
        "receivePromotionalByPost": {
          "type": "boolean",
          "description": "Receive promotional by post"
        },
        "receivePromotionalBySMS": {
          "type": "boolean",
          "description": "Receive promotional by sms"
        },
        "receivePromotionalByThirdParty": {
          "type": "boolean",
          "description": "Receive promotional by third party"
        },
        "smsVerificationTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the sms verification"
        },
        "secondaryLastName": {
          "type": "string",
          "description": "The secondary last name"
        },
        "secretAnswer": {
          "type": "string",
          "description": "The secret answer"
        },
        "secretQuestionFreeText": {
          "type": "string",
          "description": "The secret question free text"
        },
        "secretQuestionID": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the secret question"
        },
        "signUpDate": {
          "type": "string",
          "description": "The sign up date"
        },
        "thirdPartyVerificationTypeID": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the third party verification type"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "vipLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The vip's level"
        },
        "vipLevelID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the vip's level"
        },
        "vipLevelName": {
          "type": "string",
          "description": "The name of the vip's level"
        },
        "citizenshipId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the citizenship"
        }
      },
      "description": "The full version profile of a player"
    },
    "RestrictionPlayerData": {
      "type": "object",
      "properties": {
        "indefinitely": {
          "type": "boolean",
          "description": "Check if it is indefinitely"
        },
        "playerRestrictionType": {
          "type": "string",
          "description": "The type of a restriction"
        },
        "reason": {
          "type": "string",
          "description": "The reason that a player has a restriction"
        },
        "requestDate": {
          "type": "string",
          "description": "The requested date"
        },
        "restrictFromDate": {
          "type": "string",
          "description": "The date that the restriction starts"
        },
        "restrictNumMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the minutes of the restriction"
        },
        "restrictUntilDate": {
          "type": "string",
          "description": "The date that the restriction ends"
        }
      },
      "description": "The data for a player's restriction"
    },
    "TransactionTypes": {
      "type": "object",
      "properties": {
        "types": {
          "type": "array",
          "description": "The list of the supporter transaction types",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The system transaction types"
    },
    "City": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the city"
        },
        "name": {
          "type": "string",
          "description": "The name of the city"
        },
        "postalCodes": {
          "type": "array",
          "description": "The flag whether the city is active in the system",
          "items": {
            "$ref": "#/definitions/PostalCode"
          }
        },
        "active": {
          "type": "boolean",
          "description": "Check if city is active"
        }
      },
      "description": "The city object"
    },
    "PostalCode": {
      "type": "object",
      "required": [
        "active",
        "cityId",
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the postal code"
        },
        "cityId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the city"
        },
        "code": {
          "type": "string",
          "description": "The name of the postal code"
        },
        "active": {
          "type": "boolean",
          "description": "Check if postal code is active"
        }
      },
      "description": "The postal code object"
    },
    "Citizenship": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the citizenship"
        },
        "name": {
          "type": "string",
          "description": "The name of the citizenship"
        }
      },
      "description": "The Citizenship information"
    },
    "Nationality": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the nationality"
        },
        "name": {
          "type": "string",
          "description": "The name of the nationality"
        }
      }
    },
    "RegistrationSystemData": {
      "type": "object",
      "properties": {
        "countries": {
          "type": "array",
          "description": "The list of countries",
          "items": {
            "$ref": "#/definitions/Country"
          }
        },
        "secretQuestions": {
          "type": "array",
          "description": "The list of secret questions",
          "items": {
            "$ref": "#/definitions/SecretQuestion"
          }
        },
        "nationalities": {
          "type": "array",
          "description": "The list of nationalities",
          "items": {
            "$ref": "#/definitions/Nationality"
          }
        },
        "citizenships": {
          "type": "array",
          "description": "The list of citizenships",
          "items": {
            "$ref": "#/definitions/Citizenship"
          }
        }
      }
    },
    "Sportbook teams data": {
      "type": "object",
      "properties": {
        "extPlayerId": {
          "type": "string",
          "description": "The external player id"
        },
        "gameManufacturer": {
          "type": "string",
          "description": "The gamemanufacturer"
        },
        "sportName": {
          "type": "string",
          "description": "The sport name"
        },
        "playerName": {
          "type": "string",
          "description": "The player name"
        }
      },
      "description": "The sportbook teams data"
    },
    "The team's preferences filtering options": {
      "type": "object",
      "properties": {
        "externalTeamID": {
          "type": "string",
          "description": "The external team id"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "resultsLimit": {
          "type": "string",
          "description": "The result limit"
        }
      },
      "description": "Get all options for sportbook preferences"
    },
    "TransactionWithdrawResponse": {
      "type": "object",
      "properties": {
        "attributeValues": {
          "type": "array",
          "description": "The invalid bonus code",
          "items": {
            "$ref": "#/definitions/VerificationAttributeUpdate"
          }
        },
        "awaitingKYC": {
          "type": "boolean",
          "description": "Check for the awaiting KYC"
        },
        "balanceWithdrawalRequestId": {
          "type": "integer",
          "format": "int64",
          "description": "The balance withdraw request id"
        },
        "successed": {
          "type": "boolean",
          "description": "The payment transaction key"
        },
        "paymentKey": {
          "type": "string",
          "description": "The payment transaction key"
        },
        "returnURL": {
          "type": "string",
          "description": "The return URL"
        },
        "tokenKey": {
          "type": "string",
          "description": "The token key"
        },
        "verificationCode": {
          "type": "string",
          "description": "The payment transaction key"
        },
        "verificationToken": {
          "type": "string",
          "description": "The return URL"
        },
        "verificationType": {
          "type": "string",
          "description": "The verification type of the player",
          "enum": [
            "NOT_SET",
            "EMAIL_ADDRESS",
            "PHONE_NUMBER",
            "WITHDRAWAL_REQUEST",
            "PASSWORD",
            "PAYMENT_ACCOUNT"
          ]
        }
      },
      "description": "The withdraw response object"
    },
    "VerificationAttributeUpdate": {
      "type": "object",
      "properties": {
        "attrExtraID": {
          "type": "integer",
          "format": "int64",
          "description": "The extra attribute ID"
        },
        "attrValue1": {
          "type": "string",
          "description": "The first attribute value"
        },
        "attrValue2": {
          "type": "string",
          "description": "The second attribute value"
        },
        "attributeName": {
          "type": "string",
          "description": "The attribute name"
        }
      },
      "description": "The verification attribute update"
    },
    "PaymentTransaction": {
      "type": "object",
      "properties": {
        "accountReference": {
          "type": "string",
          "description": "The account reference"
        },
        "amount": {
          "type": "number",
          "description": "The amount"
        },
        "balanceAfter": {
          "type": "number",
          "description": "The balance after"
        },
        "balanceBonusAfter": {
          "type": "number",
          "description": "The bonus balance after"
        },
        "balanceHistoryID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the balance history"
        },
        "balanceRealAfter": {
          "type": "number",
          "description": "The real balance after"
        },
        "cancelWithdrawal": {
          "type": "boolean",
          "description": "Check if the withdrawal is cancelled"
        },
        "comment": {
          "type": "string",
          "description": "The comment"
        },
        "currencyCode": {
          "type": "string",
          "description": "The currency code"
        },
        "currencyName": {
          "type": "string",
          "description": "The currency name"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "The error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message"
        },
        "gatewayErrorCode": {
          "type": "string",
          "description": "The gateway error code"
        },
        "gatewayErrorMessage": {
          "type": "string",
          "description": "The gateway error message"
        },
        "expired": {
          "type": "boolean",
          "description": "Check if it is expired"
        },
        "paymentAccountID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment account"
        },
        "paymentGatewayName": {
          "type": "string",
          "description": "The name of the payment gateway"
        },
        "paymentGatewayTransactionKey": {
          "type": "string",
          "description": "The key of the payment gateway transaction"
        },
        "paymentMethodName": {
          "type": "string",
          "description": "The name of the payment method"
        },
        "paymentMethodSubName": {
          "type": "string",
          "description": "The sub-name of the payment method"
        },
        "serviceCharge": {
          "type": "number",
          "description": "The service charge"
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp"
        },
        "transactionStatusName": {
          "type": "string",
          "description": "The name of the transaction status"
        },
        "transactionTypeName": {
          "type": "string",
          "description": "The name of the transaction type"
        },
        "uniqueTransactionID": {
          "type": "string",
          "description": "The id of the unique transaction"
        }
      },
      "description": "The payment transaction"
    },
    "ArrayOfBonusRuleExtendedBase": {
      "type": "object",
      "properties": {
        "bonusRuleExtendedBase": {
          "type": "array",
          "xml": {
            "name": "BonusRuleExtendedBase"
          },
          "items": {
            "xml": {
              "name": "BonusRuleExtendedBase"
            },
            "$ref": "#/definitions/BonusRuleExtendedBase"
          }
        }
      }
    },
    "ArrayOfGameWagerWeight": {
      "type": "object",
      "properties": {
        "gameWagerWeight": {
          "type": "array",
          "xml": {
            "name": "GameWagerWeight"
          },
          "items": {
            "xml": {
              "name": "GameWagerWeight"
            },
            "$ref": "#/definitions/GameWagerWeight"
          }
        }
      }
    },
    "ArrayOfstring": {
      "type": "object",
      "properties": {
        "string": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BonusRule": {
      "type": "object",
      "required": [
        "activationEndDate",
        "activationStartDate",
        "bonusType",
        "description",
        "name",
        "wagerRequirementMultiplier"
      ],
      "properties": {
        "activationEndDate": {
          "type": "string",
          "xml": {
            "name": "ActivationEndDate"
          }
        },
        "activationStartDate": {
          "type": "string",
          "xml": {
            "name": "ActivationStartDate"
          }
        },
        "areAllGamesSelected": {
          "type": "boolean",
          "xml": {
            "name": "AreAllGamesSelected"
          }
        },
        "bonusCode": {
          "type": "string",
          "xml": {
            "name": "BonusCode"
          }
        },
        "bonusCustomTypeID": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "BonusCustomTypeID"
          }
        },
        "bonusRuleID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "BonusRuleID"
          }
        },
        "bonusType": {
          "type": "string",
          "xml": {
            "name": "BonusType"
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "expiryDate": {
          "type": "string",
          "xml": {
            "name": "ExpiryDate"
          }
        },
        "forfeitOnWithdraw": {
          "type": "boolean",
          "xml": {
            "name": "ForfeitOnWithdraw"
          }
        },
        "gameWagerWeights": {
          "xml": {
            "name": "GameWagerWeights"
          },
          "$ref": "#/definitions/ArrayOfGameWagerWeight"
        },
        "isFreeRounds": {
          "type": "boolean",
          "xml": {
            "name": "IsFreeRounds"
          }
        },
        "minOdd": {
          "type": "number",
          "xml": {
            "name": "MinOdd"
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "Name"
          }
        },
        "numFreeRounds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "NumFreeRounds"
          }
        },
        "playerSelectionID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PlayerSelectionID"
          }
        },
        "restrictByBonusCode": {
          "type": "boolean",
          "xml": {
            "name": "RestrictByBonusCode"
          }
        },
        "tags": {
          "xml": {
            "name": "Tags"
          },
          "$ref": "#/definitions/ArrayOfstring"
        },
        "wagerRequirementMultiplier": {
          "type": "number",
          "xml": {
            "name": "WagerRequirementMultiplier"
          }
        }
      }
    },
    "BonusRuleExtendedBase": {
      "type": "object",
      "properties": {
        "baseRule": {
          "xml": {
            "name": "BaseRule"
          },
          "$ref": "#/definitions/BonusRule"
        }
      }
    },
    "GameWagerWeight": {
      "type": "object",
      "required": [
        "bonusWagerWeight"
      ],
      "properties": {
        "bonusWagerWeight": {
          "type": "number",
          "xml": {
            "name": "BonusWagerWeight"
          }
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameID"
          }
        }
      }
    },
    "VoucherAdvanced": {
      "type": "object",
      "properties": {
        "bonuses": {
          "xml": {
            "name": "Bonuses"
          },
          "$ref": "#/definitions/ArrayOfBonusRuleExtendedBase"
        },
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "isDeleted": {
          "type": "boolean",
          "xml": {
            "name": "IsDeleted"
          }
        },
        "validityEndDate": {
          "type": "string",
          "xml": {
            "name": "ValidityEndDate"
          }
        },
        "validityStartDate": {
          "type": "string",
          "xml": {
            "name": "ValidityStartDate"
          }
        },
        "voucherCode": {
          "type": "string",
          "xml": {
            "name": "VoucherCode"
          }
        }
      }
    },
    "VoucherGetVoucherReturn": {
      "type": "object",
      "properties": {
        "voucher": {
          "xml": {
            "name": "Voucher"
          },
          "$ref": "#/definitions/VoucherAdvanced"
        }
      }
    },
    "VoucherRedeemData": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "description": "the amount redeemed"
        },
        "externalReference": {
          "type": "string",
          "description": "the external reference of the voucher"
        }
      },
      "description": "The voucher redeem object"
    },
    "ArrayOfBonusAwarded": {
      "type": "object",
      "properties": {
        "bonusAwarded": {
          "type": "array",
          "xml": {
            "name": "BonusAwarded"
          },
          "items": {
            "xml": {
              "name": "BonusAwarded"
            },
            "$ref": "#/definitions/BonusAwarded"
          }
        }
      }
    },
    "BonusAwarded": {
      "type": "object",
      "required": [
        "bonusAmountGiven",
        "bonusAmountRemaining",
        "bonusWagerRequirement",
        "bonusWagerRequirementAchieved",
        "bonusWagerRequirementAchievedPercentage",
        "bonusWagerRequirementRemain",
        "currentWinLockedAmount"
      ],
      "properties": {
        "bonusAmountGiven": {
          "type": "number",
          "xml": {
            "name": "BonusAmountGiven"
          }
        },
        "bonusAmountRemaining": {
          "type": "number",
          "xml": {
            "name": "BonusAmountRemaining"
          }
        },
        "bonusAwardedID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "BonusAwardedID"
          }
        },
        "bonusRule": {
          "xml": {
            "name": "BonusRule"
          },
          "$ref": "#/definitions/BonusRuleExtendedBase"
        },
        "bonusRuleID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "BonusRuleID"
          }
        },
        "bonusWagerRequirement": {
          "type": "number",
          "xml": {
            "name": "BonusWagerRequirement"
          }
        },
        "bonusWagerRequirementAchieved": {
          "type": "number",
          "xml": {
            "name": "BonusWagerRequirementAchieved"
          }
        },
        "bonusWagerRequirementAchievedPercentage": {
          "type": "number",
          "xml": {
            "name": "BonusWagerRequirementAchievedPercentage"
          }
        },
        "bonusWagerRequirementRemain": {
          "type": "number",
          "xml": {
            "name": "BonusWagerRequirementRemain"
          }
        },
        "currentRingFencedAmount": {
          "type": "number",
          "xml": {
            "name": "CurrentRingFencedAmount"
          }
        },
        "currentWinLockedAmount": {
          "type": "number",
          "xml": {
            "name": "CurrentWinLockedAmount"
          }
        },
        "cwFreeRound": {
          "xml": {
            "name": "CwFreeRound"
          },
          "$ref": "#/definitions/CommonWalletFreeRound"
        },
        "expiryDate": {
          "type": "string",
          "xml": {
            "name": "ExpiryDate"
          }
        },
        "gameWgrReqWeight": {
          "type": "number",
          "xml": {
            "name": "GameWgrReqWeight"
          }
        },
        "givenDate": {
          "type": "string",
          "xml": {
            "name": "GivenDate"
          }
        },
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "isLost": {
          "type": "boolean",
          "xml": {
            "name": "IsLost"
          }
        },
        "isSecured": {
          "type": "boolean",
          "xml": {
            "name": "IsSecured"
          }
        },
        "isUsedAll": {
          "type": "boolean",
          "xml": {
            "name": "IsUsedAll"
          }
        },
        "lostDate": {
          "type": "string",
          "xml": {
            "name": "LostDate"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Priority"
          }
        },
        "securedDate": {
          "type": "string",
          "xml": {
            "name": "SecuredDate"
          }
        },
        "transferEveryAmount": {
          "type": "number",
          "xml": {
            "name": "TransferEveryAmount"
          }
        },
        "transferEveryX": {
          "type": "number",
          "xml": {
            "name": "TransferEveryX"
          }
        },
        "transferEveryXLast": {
          "type": "number",
          "xml": {
            "name": "TransferEveryXLast"
          }
        },
        "usedAllDate": {
          "type": "string",
          "xml": {
            "name": "UsedAllDate"
          }
        }
      }
    },
    "CommonWalletFreeRound": {
      "type": "object",
      "required": [
        "costPerRound",
        "winTotal"
      ],
      "properties": {
        "costPerRound": {
          "type": "number",
          "xml": {
            "name": "CostPerRound"
          }
        },
        "cwFreeRoundId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "CwFreeRoundId"
          }
        },
        "dateCreated": {
          "type": "string",
          "xml": {
            "name": "DateCreated"
          }
        },
        "dateTransfered": {
          "type": "string",
          "xml": {
            "name": "DateTransfered"
          }
        },
        "expiryDate": {
          "type": "string",
          "xml": {
            "name": "ExpiryDate"
          }
        },
        "freeRoundIdf": {
          "type": "string",
          "xml": {
            "name": "FreeRoundIdf"
          }
        },
        "freeRoundStatus": {
          "type": "string",
          "xml": {
            "name": "FreeRoundStatus"
          }
        },
        "freeRoundsAwarded": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "FreeRoundsAwarded"
          }
        },
        "freeRoundsRemaining": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "FreeRoundsRemaining"
          }
        },
        "winTotal": {
          "type": "number",
          "xml": {
            "name": "WinTotal"
          }
        }
      }
    },
    "PlayerBalance": {
      "type": "object",
      "properties": {
        "clientExternalID": {
          "type": "string",
          "description": "The id of the external client"
        },
        "clientID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the client"
        },
        "clientStatID": {
          "type": "integer",
          "format": "int64",
          "description": "The stat id of the client"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currency ISO"
        },
        "currentBalance": {
          "type": "number",
          "description": "The current balance"
        },
        "currentBonusBalance": {
          "type": "number",
          "description": "The current bonus balance"
        },
        "currentBonusComponent": {
          "type": "number",
          "description": "Part of the CurrentBonusBalance: the remaining bonus that was given my a deposit, login or other bonus rule"
        },
        "currentBonusWinLockedComponent": {
          "type": "number",
          "description": "Part of the CurrentBonusBalance: Any winnings from bonus money cannot be withdrawn until the wagering requirement is met, thus are locked in this component"
        },
        "currentFreeBetBalance": {
          "type": "number",
          "description": "Bonus money that can be wagered only once. If the player wins the original stake is deducted from the winnings"
        },
        "currentLoyaltyPoints": {
          "type": "number",
          "description": "Loyalty points balance which can be used to redeem prizes"
        },
        "currentRealBalance": {
          "type": "number",
          "description": "Current real balance money, this money can always be withdrawn"
        },
        "currentRingFencedAmount": {
          "type": "number",
          "description": "The current ring fenced amount"
        },
        "currentRingFencedCasino": {
          "type": "number",
          "description": "The current ring fenced casino"
        },
        "currentRingFencedPoker": {
          "type": "number",
          "description": "The current ring fenced poker"
        },
        "currentRingFencedSB": {
          "type": "number",
          "description": "The current ring fenced SB"
        },
        "cwFreeRoundsBalance": {
          "type": "number",
          "description": "The free rounds balance for common wallet"
        },
        "cwFreeRoundsNum": {
          "type": "integer",
          "format": "int32",
          "description": "The number of free rounds in common wallet"
        },
        "cwFreeRoundsPlayed": {
          "type": "number",
          "description": "The played free rounds in common wallet"
        },
        "cwFreeRoundsPlayedNum": {
          "type": "integer",
          "format": "int32",
          "description": "The number of played free rounds in common wallet"
        },
        "cwFreeRoundsTransferredToBonus": {
          "type": "number",
          "description": "The transferred to bonus free rounds in common wallet"
        },
        "cwFreeRoundsWinLocked": {
          "type": "number",
          "description": "The win in locked free rounds in common wallet"
        },
        "deferredTax": {
          "type": "number",
          "description": "DeferredTax keeps a track of the potential tax and is not charged to the player’s real money balance on every return"
        },
        "depositedAmount": {
          "type": "number",
          "description": "The deposited amount"
        },
        "lastDepositDate": {
          "type": "string",
          "description": "The last deposit date"
        },
        "lastGameSessionRTP": {
          "type": "string",
          "description": "The last return to player value"
        },
        "lastPlayedDate": {
          "type": "string",
          "description": "The last played date"
        },
        "lastSessionRTP": {
          "type": "number",
          "description": "The last session return to player value"
        },
        "lastWithdrawalDate": {
          "type": "string",
          "description": "The last withdrawal date"
        },
        "lifetimeRTP": {
          "type": "number",
          "description": "The life time return to player value"
        },
        "maxAllowedWithdrawals": {
          "type": "number",
          "description": "The max allowed withdrawls"
        },
        "maxCountryBalanceThreshold": {
          "type": "number",
          "description": "The max threshold country balance"
        },
        "maxPlayerBalanceThreshold": {
          "type": "number",
          "description": "The max thresohold player balance"
        },
        "nonWitdrawableFunds": {
          "type": "number",
          "description": "The non withdrawable funds"
        },
        "numDeposits": {
          "type": "integer",
          "format": "int32",
          "description": "The number of deposits"
        },
        "numWithdrawals": {
          "type": "integer",
          "format": "int32",
          "description": "The number of withdrawals"
        },
        "provisionalRealMoneyBalance": {
          "type": "number",
          "description": "The provisional real money balance"
        },
        "totalAdjustments": {
          "type": "number",
          "description": "The total adjustments"
        },
        "totalBet": {
          "type": "number",
          "description": "Total amount wagered from Real+Bonus+BonusWinLocked money"
        },
        "totalBetBonus": {
          "type": "number",
          "description": "Total amount wagered from Bonus money"
        },
        "totalBetBonusWinLocked": {
          "type": "number",
          "description": "Total amount wagered from winnings of bonus money which was locked"
        },
        "totalBetReal": {
          "type": "number",
          "description": "Total amount wagered from Real money (including cash played if applicable"
        },
        "totalBonusTurnedReal": {
          "type": "number",
          "description": "The total bonus that turned to real"
        },
        "totalCashPlayed": {
          "type": "number",
          "description": "Total played in retailer and self-service using cash"
        },
        "totalCashPlayedRetail": {
          "type": "number",
          "description": "Total played at the retailer using cash"
        },
        "totalCashPlayedSelfService": {
          "type": "number",
          "description": "Total played using the self-service using cash"
        },
        "totalCashWin": {
          "type": "number",
          "description": "Total won in retailer and self-service using cash"
        },
        "totalCashWinPaidRetail": {
          "type": "number",
          "description": "Total won in the retailer and paid using cash"
        },
        "totalCashWinPaidSelfService": {
          "type": "number",
          "description": "Total won in the self-service and paid using cash"
        },
        "totalLoyaltyPoints": {
          "type": "number",
          "description": "Total Loyalty Points given over the lifetime of the player"
        },
        "totalLoyaltyPointsUsed": {
          "type": "number",
          "description": "Total Loyalty Points used to redeem prizes over the lifetime of the player"
        },
        "totalWalletRealPlayed": {
          "type": "number",
          "description": "Total played online,retailer and self service using wallet"
        },
        "totalWalletRealPlayedOnline": {
          "type": "number",
          "description": "Total played online using wallet"
        },
        "totalWalletRealPlayedRetail": {
          "type": "number",
          "description": "Total played in the retailer using wallet"
        },
        "totalWalletRealPlayedSelfService": {
          "type": "number",
          "description": "Total played using the self service using wallet"
        },
        "totalWalletRealWon": {
          "type": "number",
          "description": "Total won online, retialer and self-service using wallet"
        },
        "totalWalletRealWonOnline": {
          "type": "number",
          "description": "Total won online using wallet"
        },
        "totalWalletRealWonRetail": {
          "type": "number",
          "description": "Total won in the retailer using wallet"
        },
        "totalWalletRealWonSelfService": {
          "type": "number",
          "description": "Total won using the self service using wallet"
        },
        "totalWon": {
          "type": "number",
          "description": "The total won"
        },
        "totalWonBonus": {
          "type": "number",
          "description": "The total won bonus"
        },
        "totalWonBonusWinLocked": {
          "type": "number",
          "description": "The total won bonus winLocked"
        },
        "totalWonReal": {
          "type": "number",
          "description": "The total real won"
        },
        "withdrawalPendingAmount": {
          "type": "number",
          "description": "Any real balance which is locked to be processed by a withdrawal"
        },
        "withdrawnAmount": {
          "type": "number",
          "description": "The withdrawn amount"
        }
      },
      "description": "The balance of a player"
    },
    "PlayerGetBonusesBalancesReturn": {
      "type": "object",
      "properties": {
        "bonuses": {
          "xml": {
            "name": "Bonuses"
          },
          "$ref": "#/definitions/ArrayOfBonusAwarded"
        }
      }
    },
    "RetailDepositResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Check if it is success"
        },
        "paymentTransactionKey": {
          "type": "string",
          "description": "The payment transaction key"
        },
        "balanceManualTransactionId": {
          "type": "integer",
          "format": "int64",
          "description": "The manual balance transaction id"
        },
        "amount": {
          "type": "number",
          "description": "The deposited amount of money"
        },
        "date": {
          "type": "integer",
          "format": "int64",
          "description": "The transaction date/time"
        }
      },
      "description": "The retailer deposit response object"
    },
    "RetailDepositRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "The amount of money to be deposited"
        },
        "paymentAccountId": {
          "type": "integer",
          "format": "int64",
          "description": "The payment account id linked with the deposit action"
        },
        "description": {
          "type": "string",
          "description": "The description included with the description request"
        },
        "governmentIssuedId": {
          "type": "string",
          "description": "The player's government issued id"
        },
        "transactionId": {
          "type": "integer",
          "format": "int64",
          "description": "The transaction id"
        },
        "username": {
          "type": "string",
          "description": "The username"
        }
      },
      "description": "The retailer deposit request object"
    },
    "BalanceTransactionAttribute": {
      "type": "object",
      "properties": {
        "attrName": {
          "type": "string",
          "description": "The attribute name"
        },
        "attrValue": {
          "type": "string",
          "description": "The attribute value"
        }
      },
      "description": "The attributes for a balance transaction"
    },
    "DepositMethod": {
      "type": "object",
      "properties": {
        "accountHolderName": {
          "type": "string",
          "description": "The name of the account holder"
        },
        "accountName": {
          "type": "string",
          "description": "The name of the account"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currency ISO"
        },
        "entered": {
          "type": "boolean",
          "description": "Check if the method is entered"
        },
        "validated": {
          "type": "boolean",
          "description": "Check if the method is validated"
        },
        "paymentAttributes": {
          "type": "array",
          "description": "The payment accounts of the player",
          "items": {
            "$ref": "#/definitions/PaymentGatewayMethodAttribute"
          }
        },
        "paymentMethod": {
          "type": "string",
          "description": "The payment method"
        },
        "paymentMethodID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment method"
        },
        "playerLowerLimit": {
          "type": "number",
          "description": "The lower limit of the player"
        },
        "playerPaymentAccounts": {
          "type": "array",
          "description": "The payment accounts of the player",
          "items": {
            "$ref": "#/definitions/TransactionBalanceAccount"
          }
        },
        "playerUpperLimit": {
          "type": "number",
          "description": "The upper limit of the player"
        },
        "requireClientInfo": {
          "type": "boolean",
          "description": "Check the required info for client"
        }
      },
      "description": "The deposit method transaction"
    },
    "PaymentGatewayMethodAttribute": {
      "type": "object",
      "properties": {
        "allowSave": {
          "type": "boolean",
          "description": "Check if allows save"
        },
        "attrDefaultValue": {
          "type": "string",
          "description": "The default attribute value"
        },
        "attrDisplayName": {
          "type": "string",
          "description": "The display attribute name"
        },
        "attrName": {
          "type": "string",
          "description": "The attribute name"
        },
        "attrOptions": {
          "type": "array",
          "description": "The attribute options",
          "items": {
            "$ref": "#/definitions/BalanceTransactionAttribute"
          }
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "The display order"
        },
        "actived": {
          "type": "boolean",
          "description": "Check if it is actived"
        },
        "required": {
          "type": "boolean",
          "description": "Check if it is required"
        },
        "notes": {
          "type": "string",
          "description": "The notes"
        },
        "requiredForWithdrawal": {
          "type": "boolean",
          "description": "Check if it is required for withdrawal"
        },
        "validationRegex": {
          "type": "string",
          "description": "The validation regex"
        }
      },
      "description": "The method attribute of payment gateway"
    },
    "TransactionBalanceAccount": {
      "type": "object",
      "properties": {
        "accountReference": {
          "type": "string",
          "description": "The account reference"
        },
        "attributes": {
          "type": "array",
          "description": "The attributes",
          "items": {
            "$ref": "#/definitions/BalanceTransactionAttribute"
          }
        },
        "balanceAccountId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the balance account"
        },
        "comment": {
          "type": "string",
          "description": "The comment"
        },
        "paymentGateway": {
          "type": "string",
          "description": "The payment gateway"
        },
        "paymentMethod": {
          "type": "string",
          "description": "The payment method"
        },
        "paymentMethodSub": {
          "type": "string",
          "description": "The sub of payment method"
        },
        "token": {
          "type": "string",
          "description": "The token"
        }
      },
      "description": "The balance account of the transaction"
    },
    "TransactionDepositMethod": {
      "type": "object",
      "properties": {
        "beforeKYCDepositLimit": {
          "type": "number",
          "description": "The deposit limit before KYC"
        },
        "beforeKYCMaxAmount": {
          "type": "number",
          "description": "The max amount before KYC"
        },
        "depositMethods": {
          "type": "array",
          "description": "The deposit methods of the player",
          "items": {
            "$ref": "#/definitions/DepositMethod"
          }
        }
      },
      "description": "The transaction with all deposit methods"
    },
    "PaymentAccount": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "The list of attributes",
          "items": {
            "$ref": "#/definitions/BalanceTransactionAttribute"
          }
        },
        "token": {
          "type": "string",
          "description": "The token"
        },
        "kycChecked": {
          "type": "boolean",
          "description": "Check if they KYC is enabled"
        },
        "depositedAmount": {
          "type": "number",
          "description": "The deposit amount"
        },
        "withdrawnAmount": {
          "type": "number",
          "description": "The withdrawn amount"
        },
        "accountReference": {
          "type": "string",
          "description": "The account reference"
        },
        "paymentAccountID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of payment account"
        },
        "paymentGateway": {
          "type": "string",
          "description": "The payment gateway"
        },
        "dateCreated": {
          "type": "string",
          "description": "The created date"
        },
        "expiryDate": {
          "type": "string",
          "description": "The expiry date"
        },
        "canWithdraw": {
          "type": "boolean",
          "description": "Check if player can withdraw"
        },
        "isInternal": {
          "type": "boolean",
          "description": "Check if it is internal"
        },
        "creditCardHolderName": {
          "type": "string",
          "description": "The name of the credit card holder"
        },
        "isDefaultWithdrawal": {
          "type": "boolean",
          "description": "Check if the default withdrawal is enabled"
        },
        "paymentMethodDisplayName": {
          "type": "string",
          "description": "The name of the payment method"
        },
        "paymentMethodSubType": {
          "type": "string",
          "description": "The subtype of the payment method"
        },
        "paymentMethodType": {
          "type": "string",
          "description": "The type of the payment method"
        }
      },
      "description": "The transaction for every payment account"
    },
    "PaymentAccountAlreadyUsed": {
      "type": "object",
      "properties": {
        "accountHolderName": {
          "type": "string",
          "description": "The name of account holder"
        },
        "accountName": {
          "type": "string",
          "description": "The name of the account"
        },
        "accountReference": {
          "type": "string",
          "description": "The account reference"
        },
        "beforeKYCMaxLimit": {
          "type": "number",
          "description": "The max limit before KYC"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currency ISO"
        },
        "description": {
          "type": "string",
          "description": "The description"
        },
        "takeAccountIDFOnWithdraw": {
          "type": "boolean",
          "description": "Check if it receives the account IDF on withdraw"
        },
        "defaultForPaymentMethod": {
          "type": "boolean",
          "description": "Check if it is the default payment method"
        },
        "defaultWithdraw": {
          "type": "boolean",
          "description": "Check if it is the default withdraw"
        },
        "entered": {
          "type": "boolean",
          "description": "Check if it is entered"
        },
        "validated": {
          "type": "boolean",
          "description": "Check if it is validated"
        },
        "kycChecked": {
          "type": "boolean",
          "description": "Check if the KYC is checked"
        },
        "paymentAccountID": {
          "type": "integer",
          "format": "int64",
          "description": "The payment method"
        },
        "paymentAttributes": {
          "type": "array",
          "description": "The id of the payment method",
          "items": {
            "$ref": "#/definitions/PaymentGatewayMethodAttribute"
          }
        },
        "paymentGateway": {
          "type": "string",
          "description": "The name of the payment method"
        },
        "paymentMethodName": {
          "type": "string",
          "description": "The settings of the payment method"
        },
        "playerLowerLimit": {
          "type": "number",
          "description": "The name of the payment method"
        },
        "playerPaymentAccount": {
          "description": "The settings of the payment method",
          "$ref": "#/definitions/TransactionBalanceAccount"
        },
        "playerUpperLimit": {
          "type": "number",
          "description": "The name of the payment method"
        },
        "requireClientInfo": {
          "type": "boolean",
          "description": "The settings of the payment method"
        }
      },
      "description": "The already used payment accounts"
    },
    "PaymentGatewayMethod": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "The list with the payment gateway attributes",
          "items": {
            "$ref": "#/definitions/PaymentGatewayMethodAttribute"
          }
        },
        "bit8PaymentMethodID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment method"
        },
        "bit8PaymentMethodName": {
          "type": "string",
          "description": "The name of the payment method"
        },
        "countryCode": {
          "type": "string",
          "description": "The country code"
        },
        "actived": {
          "type": "boolean",
          "description": "Check if it is actived"
        },
        "subMethod": {
          "type": "boolean",
          "description": "Check if it is sub-method"
        },
        "name": {
          "type": "string",
          "description": "The name"
        },
        "orderNo": {
          "type": "integer",
          "format": "int32",
          "description": "The order number"
        },
        "parentPaymentMethodID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the parent payment method"
        },
        "paymentGatewayID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment gateway"
        },
        "paymentGatewayMethodID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment gateway method"
        },
        "paymentMethodID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment method"
        },
        "subName": {
          "type": "string",
          "description": "The sub-name"
        },
        "supportedCurrencies": {
          "type": "string",
          "description": "The supported currencies"
        }
      },
      "description": "The payment gateway method"
    },
    "TransactionWithdrawMethod": {
      "type": "object",
      "properties": {
        "beforeKYCWithdrawalLimit": {
          "type": "number",
          "description": "The limit before the KYC withdrawal"
        },
        "withdrawalMethods": {
          "type": "array",
          "description": "The withdrawal methods",
          "items": {
            "$ref": "#/definitions/WithdrawMethod"
          }
        }
      },
      "description": "The transaction withdraw method"
    },
    "WithdrawMethod": {
      "type": "object",
      "properties": {
        "allowMultipleAccounts": {
          "type": "boolean",
          "description": "Check if allows multiple accounts"
        },
        "beforeKYCUpperLimit": {
          "type": "number",
          "description": "The upper limit before KYC"
        },
        "canWithdrawWithoutPaymentAccount": {
          "type": "boolean",
          "description": "Check if I can withdraw without payment account"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currency ISO"
        },
        "takeAccountIDFOnWithdraw": {
          "type": "boolean",
          "description": "Check if I can take account IDF on withdraw"
        },
        "kycChecked": {
          "type": "boolean",
          "description": "Is the KYC checked"
        },
        "paymentAccounts": {
          "type": "array",
          "description": "The payment accounts",
          "items": {
            "$ref": "#/definitions/PaymentAccountAlreadyUsed"
          }
        },
        "paymentMethod": {
          "type": "string",
          "description": "The payment method"
        },
        "paymentMethodID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment method"
        },
        "paymentMethodName": {
          "type": "string",
          "description": "The name of the payment method"
        },
        "paymentMethodSettings": {
          "description": "The settings of the payment method",
          "$ref": "#/definitions/PaymentGatewayMethod"
        },
        "playerLowerLimit": {
          "type": "number",
          "description": "The lower limit of the player"
        },
        "playerUpperLimit": {
          "type": "number",
          "description": "The upper limit of the player"
        }
      },
      "description": "The withdraw method object"
    },
    "VoucherGetBonusesReturn": {
      "type": "object",
      "properties": {
        "bonuses": {
          "xml": {
            "name": "Bonuses"
          },
          "$ref": "#/definitions/ArrayOfBonusRuleExtendedBase"
        }
      }
    },
    "AccountTransaction": {
      "type": "object",
      "properties": {
        "accountReference": {
          "type": "string",
          "description": "The account reference"
        },
        "amount": {
          "type": "number",
          "description": "The amount"
        },
        "amountAbsolute": {
          "type": "number",
          "description": "The absolute amount"
        },
        "balanceBonusAfter": {
          "type": "number",
          "description": "The after balance bonus"
        },
        "balanceFreeRoundsAfter": {
          "type": "number",
          "description": "The after balance free rounds"
        },
        "balanceOperationType": {
          "type": "string",
          "description": "The type of the balance operation"
        },
        "balanceRealAfter": {
          "type": "number",
          "description": "The after real balance"
        },
        "balanceTransactionID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the balance transaction"
        },
        "bonusName": {
          "type": "string",
          "description": "The name of the bonus"
        },
        "classification": {
          "type": "string",
          "description": "The classification"
        },
        "couponIdentifier": {
          "type": "string",
          "description": "The identifier of the wager"
        },
        "currencyCode": {
          "type": "string",
          "description": "The code of the currency"
        },
        "descriptionFreeText": {
          "type": "string",
          "description": "The free text of the description"
        },
        "errorCode": {
          "type": "string",
          "description": "The error code"
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message"
        },
        "exchangeRate": {
          "type": "number",
          "description": "The exchange rate"
        },
        "gwTransactionKey": {
          "type": "string",
          "description": "The gateway transaction key"
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game"
        },
        "gatewayName": {
          "type": "string",
          "description": "The name of the gateway"
        },
        "loyaltyPoints": {
          "type": "number",
          "description": "The loyalty points"
        },
        "manufacturerGameIDF": {
          "type": "string",
          "description": "The game identifier of the manufacturer"
        },
        "paymentMethodName": {
          "type": "string",
          "description": "The name of the payment method"
        },
        "paymentTransactionID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment transaction"
        },
        "paymentUID": {
          "type": "string",
          "description": "The unique identifier of the payment"
        },
        "platform": {
          "type": "string",
          "description": "The platform"
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp"
        },
        "withdrawalRequestId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the withdraw request"
        },
        "transactionStatusName": {
          "type": "string",
          "description": "The name of the transaction status"
        },
        "transactionTypeID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the transaction type"
        },
        "transactionTypeName": {
          "type": "string",
          "description": "The name of transaction type"
        }
      },
      "description": "The account transaction"
    },
    "AccountTransactionPageable": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "accountTransactions": {
          "type": "array",
          "description": "The list of account transactions",
          "items": {
            "$ref": "#/definitions/AccountTransaction"
          }
        }
      },
      "description": "The full account transaction object"
    },
    "FilterCriteria": {
      "type": "object",
      "properties": {
        "filterCriteriaName": {
          "type": "string",
          "example": "string",
          "description": "The name of order criteria",
          "enum": [
            "BalanceTransactionID",
            "TransactionTypeName TransactionTypeID",
            "PaymentUID",
            "PaymentMethodName",
            "Platform",
            "PlatformType",
            "LicenseType",
            "GameID",
            "ManufacturerGameIDF",
            "CouponIdentifier",
            "LotteryCouponIdentifier",
            "BetStatus",
            "Modifiers",
            "Timestamp",
            "WinAmount",
            "BetTotal",
            "GameName",
            "CouponDate",
            "BoardCount",
            "CouponCost"
          ]
        },
        "filterCriteriaValues": {
          "type": "array",
          "description": "The list with filter criteria values",
          "items": {
            "$ref": "#/definitions/FilterCriteriaValue"
          }
        }
      },
      "description": "The filter criteria object"
    },
    "FilterCriteriaValue": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string",
          "description": "The filter criteria condition",
          "enum": [
            "INCLUDE",
            "EXCLUDE",
            "GREATER_THAN",
            "SMALLER_THAN",
            "GREATER_THAN_OR_EQUAL_TO",
            "SMALLER_THAN_OR_EQUAL_TO",
            "ASC",
            "DESC"
          ]
        },
        "value": {
          "type": "string",
          "example": "string",
          "description": "The value of filter criteria",
          "enum": [
            "open",
            "won",
            "lost",
            "web",
            "mobile",
            "Deposit",
            "Withdrawal",
            "WithdrawalRequest",
            "Bonus",
            "LoyaltyPoints",
            "Winnings",
            "Correction",
            "Compensation",
            "Bet",
            "Win",
            "BonusAwarded",
            "BonusLost",
            "BonusRequirementMet",
            "WithdrawalCancelled",
            "Cashback",
            "CashbackCancelled"
          ]
        }
      },
      "description": "The values of criteria"
    },
    "Order Criteria": {
      "type": "object",
      "properties": {
        "orderCriteriaName": {
          "type": "string",
          "example": "string",
          "description": "The name of order criteria",
          "enum": [
            "BalanceTransactionID",
            "Timestamp",
            "Amount",
            "TransactionStatus",
            "PaymentUID",
            "TransactionTypeName",
            "TransactionTypeID",
            "PaymentMethodName",
            "TransactionStatusName"
          ]
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Priority of the criterion, lower number means higher priority; eg. 0 orders before 1"
        },
        "condition": {
          "type": "string",
          "description": "The criteria condition",
          "enum": [
            "INCLUDE",
            "EXCLUDE",
            "GREATER_THAN",
            "SMALLER_THAN",
            "GREATER_THAN_OR_EQUAL_TO",
            "SMALLER_THAN_OR_EQUAL_TO",
            "ASC",
            "DESC"
          ]
        }
      },
      "description": "The order criteria"
    },
    "FilterOrderPagination": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        }
      },
      "description": "The search info"
    },
    "PaymentTransactionExtended": {
      "type": "object",
      "properties": {
        "alreadyProcessed": {
          "type": "boolean",
          "description": "Check if the transaction is already processed"
        },
        "paymentTransaction": {
          "description": "The payment transaction",
          "$ref": "#/definitions/PaymentTransaction"
        }
      },
      "description": "The extended payment transaction object"
    },
    "ArrayOfVoucher": {
      "type": "object",
      "properties": {
        "voucher": {
          "type": "array",
          "xml": {
            "name": "Voucher"
          },
          "items": {
            "xml": {
              "name": "Voucher"
            },
            "$ref": "#/definitions/Voucher"
          }
        }
      }
    },
    "VoucherGetApplicableCodesReturn": {
      "type": "object",
      "properties": {
        "vouchers": {
          "xml": {
            "name": "Vouchers"
          },
          "$ref": "#/definitions/ArrayOfVoucher"
        }
      }
    },
    "TransactionDepositResponse": {
      "type": "object",
      "properties": {
        "transactionBalanceAccounts": {
          "type": "array",
          "description": "The list with transaction balance accounts",
          "items": {
            "$ref": "#/definitions/TransactionBalanceAccount"
          }
        },
        "invalidBonusCode": {
          "type": "boolean",
          "description": "The invalid bonus code"
        },
        "successed": {
          "type": "boolean",
          "description": "Check if it is successed"
        },
        "paymentGateway": {
          "type": "string",
          "description": "The payment gateway"
        },
        "paymentTransactionKey": {
          "type": "string",
          "description": "The payment transaction key"
        },
        "returnURL": {
          "type": "string",
          "description": "The return URL"
        },
        "tokenKey": {
          "type": "string",
          "description": "The token key"
        }
      },
      "description": "The deposit response object"
    },
    "TransactionDepositRequest": {
      "type": "object",
      "properties": {
        "authenticationPin": {
          "type": "string",
          "description": "The authentication pin"
        },
        "bonusCode": {
          "type": "string",
          "description": "The bonus code"
        },
        "browser": {
          "type": "string",
          "description": "The browser"
        },
        "failureURL": {
          "type": "string",
          "description": "The failure URL"
        },
        "ipAddress": {
          "type": "string",
          "description": "The ip address"
        },
        "languageCode": {
          "type": "string",
          "description": "The language code"
        },
        "paymentAccountAttributes": {
          "type": "array",
          "description": "The payment account attributes",
          "items": {
            "$ref": "#/definitions/BalanceTransactionAttribute"
          }
        },
        "paymentAccountID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the payment account"
        },
        "pendingURL": {
          "type": "string",
          "description": "The pending URL"
        },
        "retryPlayerFailedCoupons": {
          "type": "boolean",
          "description": "Check if the retry for failed coupon from player is enabled"
        },
        "siteType": {
          "type": "string",
          "description": "The site type"
        },
        "styleURL": {
          "type": "string",
          "description": "The style URL"
        },
        "successURL": {
          "type": "string",
          "description": "The success URL"
        },
        "cancelURL": {
          "type": "string",
          "description": "The cancel URL"
        }
      },
      "description": "The deposit option request object"
    },
    "The rejected payment transaction information": {
      "type": "object",
      "required": [
        "paymentKey",
        "reason"
      ],
      "properties": {
        "paymentKey": {
          "type": "string",
          "description": "The payment reference key"
        },
        "transactionType": {
          "type": "string",
          "example": "Deposit",
          "description": "The payment transactionType"
        },
        "reason": {
          "type": "string",
          "example": "Rejected By Bank",
          "description": "The transaction rejection reason"
        }
      }
    },
    "LoyaltyRedeemLoyaltyPointsToPrizeReturn": {
      "type": "object",
      "required": [
        "loyaltyPoints"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "xml": {
            "name": "Amount"
          }
        },
        "error": {
          "xml": {
            "name": "Error"
          },
          "$ref": "#/definitions/ValidationError"
        },
        "extraID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ExtraID"
          }
        },
        "freeRounds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "FreeRounds"
          }
        },
        "isSuccess": {
          "type": "boolean",
          "xml": {
            "name": "IsSuccess"
          }
        },
        "limitedOfferPlacing": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "LimitedOfferPlacing"
          }
        },
        "loyaltyPoints": {
          "type": "number",
          "xml": {
            "name": "LoyaltyPoints"
          }
        },
        "loyaltyRedemeptionTransactionID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "LoyaltyRedemeptionTransactionID"
          }
        },
        "prizeType": {
          "type": "string",
          "xml": {
            "name": "PrizeType"
          },
          "enum": [
            "CASH",
            "BONUS",
            "PROMOTION",
            "CUSTOM",
            "FREEROUNDS",
            "TOURNAMENT",
            "GIFT"
          ]
        },
        "transactionDate": {
          "type": "string",
          "xml": {
            "name": "TransactionDate"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "errorNo": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "ErrorNo"
          }
        }
      }
    },
    "LoyaltyRedeemLoyaltyPointsToPrizeOptions": {
      "type": "object",
      "properties": {
        "authenticationPin": {
          "type": "string",
          "xml": {
            "name": "AuthenticationPin"
          }
        },
        "loyaltyRedemptionID": {
          "type": "string",
          "xml": {
            "name": "LoyaltyRedemptionID"
          }
        }
      }
    },
    "TokenDTO": {
      "type": "object",
      "required": [
        "access_token",
        "clientId",
        "token_type"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "description": "the generated authorization token"
        },
        "token_type": {
          "type": "string",
          "description": "the type of the generated token"
        },
        "refresh_token": {
          "type": "string",
          "description": "the token used to refresh login of the user"
        },
        "expires_in": {
          "type": "integer",
          "format": "int64",
          "description": "the time in seconds of the duration of the token"
        },
        "scope": {
          "type": "string",
          "description": "the scope of the generated token"
        },
        "lastLoginDate": {
          "type": "string",
          "format": "date-time",
          "description": "the last login date"
        },
        "greetingMessage": {
          "type": "string",
          "description": "the greeting message"
        },
        "playerRegistrationSts": {
          "type": "string",
          "description": "the player registration status"
        },
        "clientId": {
          "type": "integer",
          "format": "int64",
          "description": "the client id"
        },
        "cardStatus": {
          "type": "string",
          "description": "the card status"
        },
        "cardExpirationDate": {
          "type": "integer",
          "format": "int64",
          "description": "the card expiration date(epoch)"
        },
        "termsStatus": {
          "type": "string",
          "description": "the client's terms and condition status(OK, PENDING, OPTED_IN etc)",
          "enum": [
            "UNDEFINED",
            "OK",
            "OPT_PENDING",
            "REQ_PENDING",
            "REQUIRED"
          ]
        }
      }
    },
    "BonusCoupon": {
      "type": "object",
      "properties": {
        "bonusCouponID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the bonus wager"
        },
        "bonusRuleIDArray": {
          "type": "array",
          "description": "The array of the ids of the bonus rules",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "bonusTags": {
          "type": "array",
          "description": "The list of bonus tags",
          "items": {
            "$ref": "#/definitions/BonusGroup"
          }
        },
        "couponCode": {
          "type": "string",
          "description": "The wager code"
        },
        "displayName": {
          "type": "string",
          "description": "The display name"
        },
        "actived": {
          "type": "boolean",
          "description": "Check if it is actived"
        },
        "requirePlayerSelection": {
          "type": "boolean",
          "description": "Check if it player selection required"
        },
        "selectNumBonuses": {
          "type": "integer",
          "format": "int32",
          "description": "Select number of bonuses"
        },
        "validityEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "The validity end date"
        },
        "validityStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "The validity start date"
        }
      },
      "description": "The bonuses of a wager"
    },
    "BonusGroup": {
      "type": "object",
      "properties": {
        "bonusGroupID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the bonus group"
        },
        "bonusRuleIDArray": {
          "type": "array",
          "description": "The array of the ids of the bonus rules",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time",
          "description": "Created date"
        },
        "friendlyName": {
          "type": "string",
          "description": "The friendly name"
        },
        "name": {
          "type": "string",
          "description": "The name"
        }
      },
      "description": "The group of a bonus"
    },
    "ForceChangePassword": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The enumeration type for force change password",
          "enum": [
            "USERNAME",
            "EMAIL",
            "PLAYER_CARD"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value for force change password"
        }
      },
      "description": "Force change password object"
    },
    "KYCBase64File": {
      "type": "object",
      "properties": {
        "base64FileData": {
          "type": "string",
          "description": "The kyc document file base64 data"
        },
        "originalFilename": {
          "type": "string",
          "description": "The kyc document file original name"
        }
      },
      "description": "The KYC document base64 file information"
    },
    "KYCDataRegistrationRequest": {
      "type": "object",
      "required": [
        "documentNumber",
        "documentType"
      ],
      "properties": {
        "issueDate": {
          "type": "string",
          "description": "The issue date"
        },
        "issuingAuthority": {
          "type": "string",
          "description": "The issue authority"
        },
        "issuingCountry": {
          "type": "string",
          "description": "The issue authority"
        },
        "expiryDate": {
          "type": "string",
          "description": "The expiry date"
        },
        "documentType": {
          "type": "string",
          "description": "The type of the document",
          "enum": [
            "UNKNOWN",
            "IDENTITY_CARD",
            "PASSPORT",
            "DRIVING_LICENSE",
            "BANK_STATEMENT",
            "UTILITY_BILL"
          ]
        },
        "documentNumber": {
          "type": "string",
          "description": "The document number"
        },
        "kycAcceptance": {
          "type": "boolean",
          "description": "The KYC Acceptance"
        },
        "base64Files": {
          "type": "array",
          "description": "The base 64 list of files",
          "items": {
            "$ref": "#/definitions/KYCBase64File"
          }
        },
        "balanceAccountId": {
          "type": "integer",
          "format": "int64",
          "description": "The balance account id"
        },
        "documentId": {
          "type": "integer",
          "format": "int64",
          "description": "The kyc document system id"
        },
        "fileExtension": {
          "type": "string",
          "description": "The kyc document's file extension"
        },
        "filePath": {
          "type": "string",
          "description": "The kyc document's file path location"
        },
        "thumbnailName": {
          "type": "string",
          "description": "The kyc document's thumbnail name"
        },
        "thumbnailPath": {
          "type": "string",
          "description": "The kyc document's thumbnail path"
        },
        "originalFilename": {
          "type": "string",
          "description": "The kyc document original final name"
        },
        "savedFileName": {
          "type": "string",
          "description": "The kyc document saved file name"
        },
        "description": {
          "type": "string",
          "description": "The kyc document description"
        }
      },
      "description": "The request data of the KYC document"
    },
    "Player": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the player"
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address of the player"
        },
        "phoneNumbers": {
          "type": "array",
          "description": "The phone numbers of the player",
          "items": {
            "$ref": "#/definitions/PlayerPhoneNumber"
          }
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the player"
        },
        "middleName": {
          "type": "string",
          "description": "The middle name of the player"
        },
        "nickName": {
          "type": "string",
          "description": "The nickname of the player"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the player"
        },
        "gender": {
          "type": "string",
          "description": "The gender of the player ( M, F, U for Male, Female and Unknown"
        },
        "addressBooks": {
          "type": "array",
          "description": "The address details of a player",
          "items": {
            "$ref": "#/definitions/AddressBook"
          }
        },
        "pepInfo": {
          "description": "The pep information of a player",
          "$ref": "#/definitions/PEPPlayerInfo"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currencyISO"
        },
        "languageISO": {
          "type": "string",
          "description": "The languageISO"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "The birth date of the player"
        },
        "password": {
          "type": "string",
          "description": "The password"
        },
        "username": {
          "type": "string",
          "description": "The birth date of the player"
        },
        "bonusDontWant": {
          "type": "boolean",
          "description": "Check if the player don't want bonuses"
        },
        "bonusSeeker": {
          "type": "boolean",
          "description": "Check for bonus seeker"
        },
        "testPlayer": {
          "type": "boolean",
          "description": "Check if he is test player"
        },
        "testPlayerAllowTransfers": {
          "type": "boolean",
          "description": "Check if the test player is allowed to transfer money"
        },
        "activateAccount": {
          "type": "boolean",
          "description": "Check if the account is activated"
        },
        "contactByEmail": {
          "type": "boolean",
          "description": "Check if contacts with player's email"
        },
        "contactByPhone": {
          "type": "boolean",
          "description": "Check if contacts with player's phone"
        },
        "contactByPost": {
          "type": "boolean",
          "description": "Check if contacts with player's post"
        },
        "contactBySMS": {
          "type": "boolean",
          "description": "Check if contacts with player's sms"
        },
        "contactByThirdParty": {
          "type": "boolean",
          "description": "Check if contacts with the third party"
        },
        "receivePromotional": {
          "type": "boolean",
          "description": "Check if player receives promotional"
        },
        "receivePromotionalByEmail": {
          "type": "boolean",
          "description": "Check if player receives promotional by email"
        },
        "receivePromotionalByPushNotification": {
          "type": "boolean",
          "description": "Check if player receives promotional by push notification"
        },
        "receivePromotionalByPhone": {
          "type": "boolean",
          "description": "Check if player receives promotional by phone"
        },
        "receivePromotionalByMobile": {
          "type": "boolean",
          "description": "Check if player receives promotional by mobile phone"
        },
        "receivePromotionalByPost": {
          "type": "boolean",
          "description": "Check if player receives promotional by post"
        },
        "receivePromotionalBySMS": {
          "type": "boolean",
          "description": "Check if player receives promotional by sms"
        },
        "receivePromotionalByThirdParty": {
          "type": "boolean",
          "description": "Check if player receives promotional by third party"
        },
        "ipAddress": {
          "type": "string",
          "description": "The ip address of the player"
        },
        "activationCode": {
          "type": "string",
          "description": "The activation code of the player"
        },
        "smsVerificationToken": {
          "type": "string",
          "description": "The 6 sms verification token used for activation or account update"
        },
        "bonusCoupon": {
          "description": "The bonus coupons",
          "$ref": "#/definitions/BonusCoupon"
        },
        "bonusCouponStatus": {
          "type": "string",
          "description": "The status of bonus wager"
        },
        "clientID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the client"
        },
        "clientProfileID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of client's profile"
        },
        "retailerId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the retailer that the player has been registered"
        },
        "activated": {
          "type": "boolean",
          "description": "The current bonus balance"
        },
        "playerRegistrationState": {
          "type": "string",
          "description": "The current ring fenced poker",
          "enum": [
            "FULL",
            "PARTIAL",
            "PROSPECT",
            "ANONYMOUS",
            "UNDEFINED"
          ]
        },
        "passwordDetails": {
          "description": "The password details of a player",
          "$ref": "#/definitions/PlayerPassword"
        },
        "governmentIssuedId": {
          "type": "string",
          "description": "The id of the government issued"
        },
        "governmentIssuedIdType": {
          "type": "integer",
          "format": "int64",
          "description": "The type of the government id"
        },
        "kycDataRegistrationRequests": {
          "type": "array",
          "description": "The request data of the KYC document",
          "items": {
            "$ref": "#/definitions/KYCDataRegistrationRequest"
          }
        },
        "citizenshipId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the citizenship"
        },
        "paymentAccounts": {
          "type": "array",
          "description": "The player's payment account details (will be created upon registration)",
          "items": {
            "$ref": "#/definitions/PaymentAccount"
          }
        },
        "terms": {
          "type": "array",
          "description": "The list of the player's accepted, rejected, revoked terms and conditions information",
          "items": {
            "$ref": "#/definitions/TermsAndConditionsStatusUpdateRequest"
          }
        }
      },
      "description": "The details that a player needs in order to register or update his account"
    },
    "PlayerPassword": {
      "type": "object",
      "properties": {
        "authenticationPin": {
          "type": "string",
          "description": "The pin for authentication"
        },
        "newPassword": {
          "type": "string",
          "description": "The new password"
        },
        "oldPassword": {
          "type": "string",
          "description": "The old password"
        },
        "secretAnswer": {
          "type": "string",
          "description": "The secret answer"
        },
        "secretQuestionFreeText": {
          "type": "string",
          "description": "The secret question in text"
        },
        "secretQuestionID": {
          "type": "integer",
          "format": "int32",
          "description": "The id of secret question"
        },
        "passwordResetCode": {
          "type": "string",
          "description": "The code for reset password"
        },
        "forceChangePassword": {
          "description": "In case of force change password",
          "$ref": "#/definitions/ForceChangePassword"
        }
      },
      "description": "The password details of a player"
    },
    "TermsAndConditionsStatusUpdateRequest": {
      "type": "object",
      "required": [
        "status",
        "tcId",
        "versionNum"
      ],
      "properties": {
        "tcId": {
          "type": "integer",
          "format": "int64",
          "description": "The terms and condition id"
        },
        "versionNum": {
          "type": "integer",
          "format": "int32",
          "description": "The version number"
        },
        "status": {
          "type": "string",
          "description": "The status that is going to be changed for the selected T&C (ACCEPTED, REJECTED, REVOKED)",
          "enum": [
            "NONE",
            "REVOKED",
            "ACCEPTED",
            "REJECTED",
            "PENDING"
          ]
        }
      },
      "description": "The player's terms and conditions update request"
    },
    "BonusAdvanced": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "bonuses": {
          "type": "array",
          "description": "The list of bonuses",
          "items": {
            "$ref": "#/definitions/Bonus"
          }
        }
      },
      "description": "The bonus advanced object"
    },
    "BonusPlayerAdvancedOption": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "kindOfBonus": {
          "type": "string",
          "description": "The kind of bonus ",
          "enum": [
            "awarded",
            "available",
            "both"
          ]
        }
      },
      "description": "The option request for player bonuses"
    },
    "PromotionPageable": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "promotions": {
          "type": "array",
          "description": "The list of promotions",
          "items": {
            "$ref": "#/definitions/Promotion"
          }
        }
      },
      "description": "The full promotion object"
    },
    "LoyaltySchema": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the loyalty"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "loyaltyRedemptionID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of loyalty redemption"
        },
        "minimumLoyaltyPoints": {
          "type": "number",
          "description": "The minimum loyalty points"
        },
        "name": {
          "type": "string",
          "description": "The name of loyalty"
        },
        "prizeID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the prize"
        },
        "prizeType": {
          "type": "string",
          "description": "The type of the prize",
          "enum": [
            "CASH",
            "BONUS",
            "PROMOTION",
            "CUSTOM",
            "FREEROUNDS",
            "TOURNAMENT",
            "GIFT"
          ]
        },
        "startDate": {
          "type": "string",
          "description": "The start date"
        }
      },
      "description": "The loyalty schemes"
    },
    "LoyaltyStats": {
      "type": "object",
      "properties": {
        "totalLoyaltyPointsGiven": {
          "type": "number",
          "description": "The total given loyalty points"
        },
        "totalLoyaltyPointsUsed": {
          "type": "number",
          "description": "The total used loyalty points"
        },
        "currentLoyaltyPoints": {
          "type": "number",
          "description": "The current loyalty points"
        }
      },
      "description": "The loyalty statistics"
    },
    "PlayerLoyalties": {
      "type": "object",
      "properties": {
        "loyaltySchemes": {
          "type": "array",
          "description": "The list with the loyalties",
          "items": {
            "$ref": "#/definitions/LoyaltySchema"
          }
        },
        "loyaltyStats": {
          "description": "The loyalty statistics",
          "$ref": "#/definitions/LoyaltyStats"
        }
      },
      "description": "The loyalties of a player"
    },
    "CloseAccountOptions": {
      "type": "object",
      "properties": {
        "authenticationPin": {
          "type": "string",
          "description": "The authentication pin of the player"
        },
        "onlyDisallowLogin": {
          "type": "boolean",
          "description": "Flag whether player has only requested login disallow"
        }
      },
      "description": "The options requested for player to close his account"
    },
    "PlayerProfileShortDTO": {
      "type": "object",
      "properties": {
        "activateAccount": {
          "type": "boolean",
          "description": "The activate account flag"
        },
        "clientID": {
          "type": "integer",
          "format": "int64",
          "description": "The client id of the user"
        },
        "clientStatID": {
          "type": "integer",
          "format": "int64",
          "description": "The client stat id of the user"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currencyISO of the user"
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address of the user"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user"
        },
        "selfExclusion": {
          "type": "boolean",
          "description": "The self exclusion flag"
        },
        "playerRestrictions": {
          "type": "array",
          "description": "Player restriction object",
          "items": {
            "$ref": "#/definitions/RestrictionPlayerData"
          }
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user"
        },
        "userName": {
          "type": "string",
          "description": "The username of the user"
        },
        "languageISO": {
          "type": "string",
          "description": "The languageISO of the user"
        },
        "gender": {
          "type": "string",
          "description": "The gender of the player"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "The date of birth"
        }
      },
      "description": "The short version profile of a player"
    },
    "DeviceAccount": {
      "type": "object",
      "required": [
        "createdDate",
        "deviceID",
        "osname",
        "uuid"
      ],
      "properties": {
        "brandName": {
          "type": "string",
          "description": "The brand name"
        },
        "browserName": {
          "type": "string",
          "description": "The browser name"
        },
        "browserVersion": {
          "type": "string",
          "description": "The browser version"
        },
        "createdDate": {
          "type": "string",
          "description": "The creation date"
        },
        "deviceID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the device"
        },
        "macAddress": {
          "type": "string",
          "description": "The mac address"
        },
        "modelType": {
          "type": "string",
          "description": "The type of the model"
        },
        "osname": {
          "type": "string",
          "description": "The operating system name"
        },
        "osversion": {
          "type": "string",
          "description": "The operating system version "
        },
        "platformType": {
          "type": "string",
          "description": "The type of the platform"
        },
        "userAgent": {
          "type": "string",
          "description": "The user agent"
        },
        "uuid": {
          "type": "string",
          "description": "The unique uid"
        }
      },
      "description": "The device account"
    },
    "PlayerFutureLimit": {
      "type": "object",
      "properties": {
        "licenseType": {
          "type": "string",
          "description": "The license type"
        },
        "operatorAmount": {
          "type": "number",
          "description": "The operator amount"
        },
        "period": {
          "type": "string",
          "description": "The period"
        },
        "setAmount": {
          "type": "number",
          "description": "The amount that has been set"
        },
        "timestampSet": {
          "type": "string",
          "description": "The set timestamp"
        },
        "type": {
          "type": "string",
          "description": "The type"
        },
        "typeExtraInfo": {
          "type": "string",
          "description": "The type extra info"
        }
      },
      "description": "The future limits of a player"
    },
    "PlayerLimit": {
      "type": "object",
      "properties": {
        "futureLimits": {
          "type": "array",
          "description": "The future limits",
          "items": {
            "$ref": "#/definitions/PlayerFutureLimit"
          }
        },
        "licenseType": {
          "type": "string",
          "description": "The license type"
        },
        "operatorAmount": {
          "type": "number",
          "description": "The operator amount"
        },
        "period": {
          "type": "string",
          "description": "The period"
        },
        "remainingAmount": {
          "type": "number",
          "description": "The remaining amount"
        },
        "setAmount": {
          "type": "number",
          "description": "The amount that has been set"
        },
        "timestampExpire": {
          "type": "string",
          "description": "The expired timestamp"
        },
        "timestampSet": {
          "type": "string",
          "description": "The set timestamp"
        },
        "type": {
          "type": "string",
          "description": "The type"
        },
        "typeExtraInfo": {
          "type": "string",
          "description": "The type extra info"
        }
      },
      "description": "The limits of a player"
    },
    "Sportbook competition data": {
      "type": "object",
      "properties": {
        "extGroupID": {
          "type": "string",
          "description": "The external group id"
        },
        "gameManufacturer": {
          "type": "string",
          "description": "The game manufacturer"
        },
        "groupName": {
          "type": "string",
          "description": "The group name"
        }
      },
      "description": "The sportbook competition data"
    },
    "Sportbook sports data": {
      "type": "object",
      "properties": {
        "extSportID": {
          "type": "string",
          "description": "The external sport id"
        },
        "gameManufacturer": {
          "type": "string",
          "description": "The gamemanufacturer"
        },
        "sportName": {
          "type": "string",
          "description": "The sport name"
        }
      },
      "description": "The sportbook sports data"
    },
    "Sportsbook player preferences": {
      "type": "object",
      "properties": {
        "additionalBetStakes": {
          "type": "array",
          "description": "The additional bet stakes",
          "items": {
            "type": "number"
          }
        },
        "autoAcceptHigherOdds": {
          "type": "boolean",
          "description": "The auto accept higher odds"
        },
        "autoAcceptAllOdds": {
          "type": "boolean",
          "description": "The auto accept all odds"
        },
        "betslipNotification": {
          "type": "boolean",
          "description": "Check if the betslip notificication is enabled"
        },
        "betslipType": {
          "type": "string",
          "description": "The type of the betslip"
        },
        "clientID": {
          "type": "string",
          "description": "The id of the client"
        },
        "defaultBetStake": {
          "type": "number",
          "description": "The default bet stake"
        },
        "favouriteCompetitions": {
          "type": "array",
          "description": "The favourite competitions",
          "items": {
            "$ref": "#/definitions/Sportbook competition data"
          }
        },
        "favouriteSports": {
          "type": "array",
          "description": "The favourite sports",
          "items": {
            "$ref": "#/definitions/Sportbook sports data"
          }
        },
        "favouriteTeams": {
          "type": "array",
          "description": "The favourite teams",
          "items": {
            "$ref": "#/definitions/Sportbook teams data"
          }
        },
        "favouritePlayers": {
          "type": "array",
          "description": "The favourite players",
          "items": {
            "$ref": "#/definitions/Sportbook teams data"
          }
        },
        "addFavouriteCompetitions": {
          "type": "array",
          "description": "The added favourite competitions",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "addFavouriteCompetitionsExternalIDs": {
          "type": "array",
          "description": "The external ids of the added favourite competitions",
          "items": {
            "type": "string"
          }
        },
        "addFavouriteSports": {
          "type": "array",
          "description": "The added favourite sports",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "addFavouriteSportsExternalIDs": {
          "type": "array",
          "description": "The external ids of the added favourite sports",
          "items": {
            "type": "string"
          }
        },
        "addFavouriteTeams": {
          "type": "array",
          "description": "The added favourite teams",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "addFavouriteTeamsExternalIDs": {
          "type": "array",
          "description": "The external ids of the added favourite teams",
          "items": {
            "type": "string"
          }
        },
        "deleteFavouriteCompetitions": {
          "type": "array",
          "description": "The deleted favourite competitions",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "deleteFavouriteCompetitionsExternalIDs": {
          "type": "array",
          "description": "The external ids of the deleted favourite competitions",
          "items": {
            "type": "string"
          }
        },
        "deleteFavouriteSports": {
          "type": "array",
          "description": "The deleted favourite sports",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "deleteFavouriteSportsExternalIDs": {
          "type": "array",
          "description": "The external ids of the deleted favourite sports",
          "items": {
            "type": "string"
          }
        },
        "deleteFavouriteTeams": {
          "type": "array",
          "description": "The deleted favourite teams",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "deleteFavouriteTeamsExternalIDs": {
          "type": "array",
          "description": "The external ids of the deleted favourite teams",
          "items": {
            "type": "string"
          }
        },
        "gameManufacturer": {
          "type": "string",
          "description": "The game manufacturer"
        },
        "keepBetslipSelections": {
          "type": "boolean",
          "description": "Check if betslip selections are enabled"
        },
        "useExternalIDs": {
          "type": "boolean",
          "description": "Check if the external ids are used"
        }
      },
      "description": "The domain player preferences"
    },
    "BoardsSummary": {
      "type": "object",
      "properties": {
        "boardNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the board"
        },
        "noPanels": {
          "type": "integer",
          "format": "int32",
          "description": "The total panels"
        },
        "quickPickSelectionType": {
          "type": "string",
          "description": "The type of quickPick selection"
        },
        "selectionSource": {
          "type": "integer",
          "format": "int32",
          "description": "The source of the selection"
        },
        "systemSelection": {
          "type": "integer",
          "format": "int32",
          "description": "The system selection"
        },
        "panelsSummaries": {
          "type": "array",
          "description": "The list of panel summaries",
          "items": {
            "$ref": "#/definitions/PanelsSummary"
          }
        },
        "options": {
          "type": "array",
          "description": "The special options depend on the game, in board level",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The board summary"
    },
    "DBGCouponSummary": {
      "type": "object",
      "properties": {
        "cost": {
          "type": "number",
          "description": "The cost of the coupon"
        },
        "couponDate": {
          "type": "string",
          "description": "The date of the coupon"
        },
        "couponStatus": {
          "type": "string",
          "description": "The status of the coupon"
        },
        "couponStatusCode": {
          "type": "string",
          "description": "The code of the coupon's status"
        },
        "couponFavouriteName": {
          "type": "string",
          "description": "The coupon's favourite name"
        },
        "firstDrawDate": {
          "type": "string",
          "description": "The date of the first draw"
        },
        "firstDrawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the first draw"
        },
        "lastDrawDate": {
          "type": "string",
          "description": "The date of the last draw"
        },
        "lastDrawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the last draw"
        },
        "lotteryCouponID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the lottery coupon"
        },
        "lotteryCouponIDF": {
          "type": "string",
          "description": "The barcode of the lottery coupon"
        },
        "noTickets": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the tickets"
        },
        "primaryGameID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the primary game"
        },
        "primaryGameTitle": {
          "type": "string",
          "description": "The title of the primary game"
        },
        "refundsAmount": {
          "type": "number",
          "description": "The refunds amount"
        },
        "winAmount": {
          "type": "number",
          "description": "The win amount"
        },
        "winGrossAmount": {
          "type": "number",
          "description": "The gross win amount"
        },
        "winNetAmount": {
          "type": "number",
          "description": "The net win amount"
        },
        "winTaxAmount": {
          "type": "number",
          "description": "The tax win amount"
        },
        "ticketsSummaries": {
          "type": "array",
          "description": "The tax win amount",
          "items": {
            "$ref": "#/definitions/TicketsSummary"
          }
        }
      },
      "description": "The dgb coupon summary"
    },
    "FundsSummary": {
      "type": "object",
      "properties": {
        "totalBet": {
          "type": "number",
          "description": "The total Bets of the player according to the filter passed"
        },
        "totalWin": {
          "type": "number",
          "description": "The total Wins of the player according to the filter passed"
        }
      },
      "description": "The funds summary object"
    },
    "PanelsSummary": {
      "type": "object",
      "properties": {
        "panelType": {
          "type": "string",
          "description": "The type of the panel"
        },
        "numbers": {
          "type": "string",
          "description": "The numbers of panels"
        },
        "options": {
          "type": "array",
          "description": "The special options depend on the game, in panel level",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The panel summary"
    },
    "ParticipationsSummary": {
      "type": "object",
      "properties": {
        "cost": {
          "type": "number",
          "description": "The cost of the coupon"
        },
        "drawDate": {
          "type": "string",
          "description": "The date of the draw"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "The draw number"
        },
        "visualDrawNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The visual draw number"
        }
      },
      "description": "The participation coupon summary"
    },
    "PlayerCouponTrail": {
      "type": "object",
      "properties": {
        "betStatus": {
          "type": "string",
          "description": "The status of the bet ('open', 'won', 'lost', 'blocked', 'cancelled', 'other' or 'draw')"
        },
        "betTotal": {
          "type": "number",
          "description": "The total bet amount"
        },
        "channelType": {
          "type": "string",
          "description": "The type of the channel"
        },
        "gameID": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the game"
        },
        "gameName": {
          "type": "string",
          "description": "The name of the game"
        },
        "gameVendor": {
          "type": "string",
          "description": "The game provider name"
        },
        "gameRoundID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game round"
        },
        "gameType": {
          "type": "integer",
          "format": "int64",
          "description": "The type of the game"
        },
        "roundsSummary": {
          "description": "The rounds summary",
          "$ref": "#/definitions/RoundSummary"
        },
        "licenseType": {
          "type": "string",
          "description": "The type of the license"
        },
        "platformType": {
          "type": "string",
          "description": "The type of the platform"
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp"
        },
        "trailID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the trail"
        },
        "uniqueBetReference": {
          "type": "string",
          "description": "The unique bet reference (for casino 'CR' + Bit8 round ID, for lottery the coupon barcode, for sportsbook the bet transaction reference)"
        },
        "winTotal": {
          "type": "number",
          "description": "The total win amount"
        },
        "dbgCoupons": {
          "description": "The list of dbg coupons",
          "$ref": "#/definitions/DBGCouponSummary"
        },
        "spbCoupons": {
          "description": "The list of sportsbook coupons",
          "$ref": "#/definitions/SPBCouponSummary"
        }
      },
      "description": "The player trail object"
    },
    "PlayerTrailPageable": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "trails": {
          "type": "array",
          "description": "The list of bet trail transactions",
          "items": {
            "$ref": "#/definitions/PlayerCouponTrail"
          }
        },
        "fundsSummary": {
          "description": "The total bet/won fund according to the filter passed",
          "$ref": "#/definitions/FundsSummary"
        }
      },
      "description": "The player trail object with pagination"
    },
    "RoundSummary": {
      "type": "object",
      "properties": {
        "playCheckURL": {
          "type": "string",
          "description": "The play check URL"
        }
      },
      "description": "The rounds summary"
    },
    "SBMultipleSummary": {
      "type": "object",
      "properties": {
        "betIDF": {
          "type": "string",
          "description": "The identifier of the bet"
        },
        "cashOutEnabled": {
          "type": "boolean",
          "description": "Check if cash out is enabled"
        },
        "cashedOut": {
          "type": "boolean",
          "description": "Check if the coupon has been cashed out"
        },
        "cost": {
          "type": "number",
          "description": "The cost of the coupon"
        },
        "multipleType": {
          "type": "string",
          "description": "The type of multiple"
        },
        "potentialReturn": {
          "type": "number",
          "description": "The potencial return"
        },
        "pricePerCombination": {
          "type": "number",
          "description": "The price per combination"
        },
        "sbSingles": {
          "type": "array",
          "description": "The list of sportsbook singles",
          "items": {
            "$ref": "#/definitions/SBSingleSummary"
          }
        }
      },
      "description": "The sportsbook multiples summary"
    },
    "SBSingleSummary": {
      "type": "object",
      "properties": {
        "betIDF": {
          "type": "string",
          "description": "The identifier of the bet"
        },
        "betType": {
          "type": "string",
          "description": "The type of the bet"
        },
        "cashOutEnabled": {
          "type": "boolean",
          "description": "Check if cash out mode is enabled"
        },
        "cashedOut": {
          "type": "boolean",
          "description": "Check if coupon is cashed out"
        },
        "cost": {
          "type": "number",
          "description": "The cost of the coupon"
        },
        "event": {
          "type": "string",
          "description": "The event"
        },
        "extEventID": {
          "type": "string",
          "description": "The id of the external event"
        },
        "extGroupID": {
          "type": "string",
          "description": "The id of the external group"
        },
        "extMarketID": {
          "type": "string",
          "description": "The id of the external market"
        },
        "extSelectionID": {
          "type": "string",
          "description": "The id of the external selection"
        },
        "extSportID": {
          "type": "string",
          "description": "The id of the external sport"
        },
        "group": {
          "type": "string",
          "description": "The group"
        },
        "isBanker": {
          "type": "boolean",
          "description": "Check if banker option is enable"
        },
        "market": {
          "type": "string",
          "description": "The market"
        },
        "odds": {
          "type": "number",
          "description": "The odds"
        },
        "pricePerCombination": {
          "type": "number",
          "description": "The price per combination"
        },
        "selection": {
          "type": "string",
          "description": "The selection"
        },
        "sport": {
          "type": "string",
          "description": "The sport"
        }
      },
      "description": "The sportsbook singles summary"
    },
    "SPBCouponSummary": {
      "type": "object",
      "properties": {
        "barcode": {
          "type": "string",
          "description": "The barcode of the coupon"
        },
        "cost": {
          "type": "number",
          "description": "The cost of the coupon"
        },
        "date": {
          "type": "string",
          "description": "The date of the coupon"
        },
        "sbMultiples": {
          "type": "array",
          "description": "The list of sportsbook multiples",
          "items": {
            "$ref": "#/definitions/SBMultipleSummary"
          }
        },
        "noMultiples": {
          "type": "integer",
          "format": "int32",
          "description": "The number of multiples"
        },
        "noSingles": {
          "type": "integer",
          "format": "int32",
          "description": "The number of singles"
        },
        "sbBetID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the sportsbook bet"
        },
        "sbSingles": {
          "type": "array",
          "description": "The list of sportsbook singles",
          "items": {
            "$ref": "#/definitions/SBSingleSummary"
          }
        },
        "transactionRef": {
          "type": "string",
          "description": "The transaction referrence"
        },
        "winAmount": {
          "type": "number",
          "description": "The win amount"
        }
      },
      "description": "The sportsbook coupon summary"
    },
    "TicketsSummary": {
      "type": "object",
      "properties": {
        "cost": {
          "type": "number",
          "description": "The cost of the coupon"
        },
        "gameTitle": {
          "type": "string",
          "description": "The title of the game"
        },
        "isPrimaryGame": {
          "type": "boolean",
          "description": "Check if it is primary game"
        },
        "noColumns": {
          "type": "integer",
          "format": "int32",
          "description": "The number of columns"
        },
        "noBoards": {
          "type": "integer",
          "format": "int32",
          "description": "The number of boards"
        },
        "participationsSummaries": {
          "type": "array",
          "description": "The list of participation summaries",
          "items": {
            "$ref": "#/definitions/ParticipationsSummary"
          }
        },
        "boardsSummaries": {
          "type": "array",
          "description": "The list of board summaries",
          "items": {
            "$ref": "#/definitions/BoardsSummary"
          }
        },
        "options": {
          "type": "array",
          "description": "The special options depend on the game, in ticket level",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The ticket coupon summary"
    },
    "PlayerTrailOptions": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "sportsBookBetSlipWithSeparatedBets": {
          "type": "boolean",
          "description": "Check for betslips in sportsbook with separated bets"
        },
        "calculateTotals": {
          "type": "boolean",
          "description": "Check if totals are going to be calculated"
        }
      },
      "description": "The player trail request body"
    },
    "MetricTotal": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the metric"
        },
        "description": {
          "type": "string",
          "description": "The description of the metric"
        },
        "name": {
          "type": "string",
          "description": "The name of the metric"
        },
        "isActive": {
          "type": "boolean",
          "description": "Check if metric is active"
        },
        "isDeleted": {
          "type": "boolean",
          "description": "Check if metric is deleted"
        },
        "lifetimeAwarded": {
          "type": "number",
          "description": "The awarded lifetime"
        },
        "lifetimeDeducted": {
          "type": "number",
          "description": "The deducted lifetime"
        },
        "balance": {
          "type": "number",
          "description": "The balance of the metric"
        }
      },
      "description": "The full Metric object"
    },
    "MtanVerificationRequest": {
      "type": "object",
      "required": [
        "actionType"
      ],
      "properties": {
        "actionType": {
          "type": "string",
          "description": "the action type name for the mtan verification token, default = NotSet",
          "enum": [
            "NotSet",
            "PlayerPaymentAccount",
            "PlayerProfileData",
            "PlayerBet",
            "PlayerCloseAccount",
            "PlayerLimits",
            "PlayerActivation"
          ]
        },
        "token": {
          "type": "string",
          "description": "the mtan verification token"
        },
        "code": {
          "type": "string",
          "description": "the mtan verification code"
        }
      },
      "description": "The Mtan Verification request options information"
    },
    "KYCDocumentData": {
      "type": "object",
      "required": [
        "defaulted",
        "description",
        "documentNumber",
        "documentType",
        "fileExtension",
        "filePath",
        "originalFileName",
        "savedFileName",
        "thumbnailName",
        "thumbnailPath"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the document"
        },
        "expiryDate": {
          "type": "string",
          "description": "The expiration date"
        },
        "documentNumber": {
          "type": "string",
          "description": "The document number"
        },
        "documentType": {
          "type": "string",
          "description": "The type of the document",
          "enum": [
            "UNKNOWN",
            "IDENTITY_CARD",
            "PASSPORT",
            "DRIVING_LICENSE",
            "BANK_STATEMENT",
            "UTILITY_BILL"
          ]
        },
        "fileExtension": {
          "type": "string",
          "description": "The extension of the file"
        },
        "filePath": {
          "type": "string",
          "description": "The path of the file"
        },
        "defaulted": {
          "type": "boolean",
          "description": "Check if it is default"
        },
        "customStatusId": {
          "type": "integer",
          "format": "int32",
          "description": "The custom status id"
        },
        "documentSource": {
          "type": "string",
          "description": "The document source"
        },
        "notes": {
          "type": "string",
          "description": "The notes"
        },
        "originalFileName": {
          "type": "string",
          "description": "The name of the original file"
        },
        "savedFileName": {
          "type": "string",
          "description": "The name of the saved file"
        },
        "thumbnailName": {
          "type": "string",
          "description": "The name of the thumbnail"
        },
        "thumbnailPath": {
          "type": "string",
          "description": "The path of the thumbnail"
        },
        "url": {
          "type": "string",
          "description": "The url"
        }
      },
      "description": "The data of the KYC document"
    },
    "KYCStatusData": {
      "type": "object",
      "properties": {
        "checked": {
          "type": "boolean",
          "description": "Whether the account has been KYC checked"
        },
        "status": {
          "type": "string",
          "description": "The player KYC checked status name"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The player KYC checked status code"
        },
        "statusDisplayName": {
          "type": "string",
          "description": "The player KYC checked status display name"
        },
        "date": {
          "type": "string",
          "description": "Date time the account has been KYC checked"
        }
      },
      "description": "The data of the player's KYC Status"
    },
    "KYCDocumentDataExtended": {
      "type": "object",
      "required": [
        "defaulted",
        "description",
        "documentNumber",
        "documentType",
        "fileExtension",
        "filePath",
        "originalFileName",
        "savedFileName",
        "thumbnailName",
        "thumbnailPath"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the document"
        },
        "expiryDate": {
          "type": "string",
          "description": "The expiration date"
        },
        "documentNumber": {
          "type": "string",
          "description": "The document number"
        },
        "documentType": {
          "type": "string",
          "description": "The type of the document",
          "enum": [
            "UNKNOWN",
            "IDENTITY_CARD",
            "PASSPORT",
            "DRIVING_LICENSE",
            "BANK_STATEMENT",
            "UTILITY_BILL"
          ]
        },
        "fileExtension": {
          "type": "string",
          "description": "The extension of the file"
        },
        "filePath": {
          "type": "string",
          "description": "The path of the file"
        },
        "defaulted": {
          "type": "boolean",
          "description": "Check if it is default"
        },
        "customStatusId": {
          "type": "integer",
          "format": "int32",
          "description": "The custom status id"
        },
        "documentSource": {
          "type": "string",
          "description": "The document source"
        },
        "notes": {
          "type": "string",
          "description": "The notes"
        },
        "originalFileName": {
          "type": "string",
          "description": "The name of the original file"
        },
        "savedFileName": {
          "type": "string",
          "description": "The name of the saved file"
        },
        "thumbnailName": {
          "type": "string",
          "description": "The name of the thumbnail"
        },
        "thumbnailPath": {
          "type": "string",
          "description": "The path of the thumbnail"
        },
        "url": {
          "type": "string",
          "description": "The url"
        },
        "balanceAccountId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the balance account"
        },
        "documentId": {
          "type": "integer",
          "format": "int64",
          "description": "The kyc document system id"
        },
        "dateCreated": {
          "type": "string",
          "description": "The created date"
        },
        "customStatusName": {
          "type": "string",
          "description": "The name of the custom status"
        },
        "documentTypeName": {
          "type": "string",
          "description": "The name of the document type"
        }
      },
      "description": "The extended data of the KYC document"
    },
    "KYCDocumentDataRequest": {
      "type": "object",
      "required": [
        "base64FileData",
        "clientStatID",
        "kycDocumentData",
        "originalFileName"
      ],
      "properties": {
        "clientStatID": {
          "type": "integer",
          "format": "int64",
          "description": "The client stat id"
        },
        "base64FileData": {
          "type": "string",
          "description": "The KYC document's file base64 data"
        },
        "originalFileName": {
          "type": "string",
          "description": "The name of the original file"
        },
        "balanceAccountId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the balance account"
        },
        "kycDocumentData": {
          "description": "The data of the KYC document",
          "$ref": "#/definitions/KYCDocumentData"
        }
      },
      "description": "The request data of the KYC document"
    },
    "PlayerActivationCodes": {
      "type": "object",
      "properties": {
        "activationCode": {
          "type": "string",
          "description": "The activation code of the player"
        },
        "smsVerificationToken": {
          "type": "string",
          "description": "The 6 sms verification token used for activation or account update"
        }
      },
      "description": "The player activation codes"
    },
    "PlayerProfileExternalDTO": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "integer",
          "format": "int64",
          "description": "The client id of the user"
        },
        "clientStatID": {
          "type": "integer",
          "format": "int64",
          "description": "The client stat id of the user"
        },
        "currencyISO": {
          "type": "string",
          "description": "The currencyISO of the user"
        },
        "userName": {
          "type": "string",
          "description": "The username of the user"
        },
        "languageISO": {
          "type": "string",
          "description": "The languageISO of the user"
        },
        "countryISO": {
          "type": "string",
          "description": "The countryISO of the user"
        }
      },
      "description": "The external profile of a player"
    },
    "PlayerResetPasswordChecks": {
      "type": "object",
      "properties": {
        "checkType": {
          "type": "string",
          "description": "The custom type property for reset password",
          "enum": [
            "AUTHENTICATION_PIN",
            "SECRET_ANSWER"
          ]
        },
        "checkValue": {
          "type": "string",
          "description": "The custom value property for reset password"
        }
      },
      "description": "The custom checks for player's reset password"
    },
    "GameDrawNotification": {
      "type": "object",
      "properties": {
        "dateSubscription": {
          "type": "string",
          "description": "The date of the subscription"
        },
        "gameClientNotificationID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game client notification"
        },
        "gameDrawNotificationType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of game draw notification"
        },
        "gameID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game"
        },
        "name": {
          "type": "string",
          "description": "The name"
        }
      },
      "description": "The game draw notification"
    },
    "GameFavorite": {
      "type": "object",
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game"
        },
        "autoAssigned": {
          "type": "boolean",
          "description": "Check if it is auto assigned"
        },
        "playerAssigned": {
          "type": "boolean",
          "description": "Check if it is assigned to a player"
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "The ranking of the specific game"
        }
      },
      "description": "The game favorite object"
    },
    "Bet": {
      "type": "object",
      "required": [
        "barcode",
        "selections",
        "system",
        "totalStake"
      ],
      "properties": {
        "selections": {
          "type": "array",
          "description": "The bet selections",
          "items": {
            "$ref": "#/definitions/Selection"
          }
        },
        "stake": {
          "description": "The stake amount",
          "$ref": "#/definitions/Stake"
        },
        "system": {
          "description": "The selected bet system",
          "$ref": "#/definitions/System"
        },
        "winType": {
          "type": "string",
          "description": "Win bet data type:WIN, PLACE, EACH_WAY"
        },
        "checkOdds": {
          "type": "integer",
          "format": "int32",
          "description": "Check type of the additional odds data. The system will reject a coupons when: 1. a selected forecast has lower current Odds or different current Handicap / UO value than these the player has seen  2. a selected forecast has different current Odds / Handicap / UO value than these the player has seen 3. a selected forecast has different Handicap / UO value than these the player has seen"
        },
        "totalStake": {
          "type": "number",
          "format": "double",
          "description": "Total selection stake"
        },
        "potentialPayout": {
          "type": "number",
          "format": "double",
          "description": "The potential payout"
        },
        "totalOdds": {
          "type": "number",
          "format": "double",
          "description": "Total odds of the specific bet part"
        },
        "barcode": {
          "type": "string",
          "description": "a unique internal code of the bet. It is mandatory only for place bet method. Not required for reserve funds method"
        },
        "betId": {
          "type": "integer",
          "format": "int64",
          "description": "The bet id"
        },
        "betNo": {
          "type": "integer",
          "format": "int32",
          "description": "The bet number"
        },
        "status": {
          "type": "string",
          "description": "Status of the part bet(e.g. ACCEPTED, REJECTED, VOID)"
        },
        "rejectionReason": {
          "type": "string",
          "description": "The reason why a bet has been rejected"
        },
        "isliveBet": {
          "type": "boolean",
          "description": "In case this is live bet or not"
        },
        "cashOut": {
          "type": "boolean",
          "description": "In case this bet can be cashed out"
        },
        "totalPrice": {
          "type": "number",
          "format": "double",
          "description": "The total price of the bet"
        },
        "reserveRef": {
          "type": "integer",
          "format": "int64",
          "description": "Reserve funds reference of the bet"
        },
        "freeBet": {
          "type": "boolean",
          "description": "Free Bet indicator"
        },
        "discountBonusAmount": {
          "type": "number",
          "format": "double",
          "description": "Discount bonus amount"
        },
        "bonusStake": {
          "description": "Bonus stake",
          "$ref": "#/definitions/Stake"
        },
        "totalDiscountStake": {
          "type": "number",
          "format": "double",
          "description": "The discounted bet stake"
        }
      },
      "description": "The bet domain object"
    },
    "BettingGame": {
      "type": "object",
      "required": [
        "bets",
        "gameStateId"
      ],
      "properties": {
        "gameStateId": {
          "type": "integer",
          "format": "int32",
          "description": "a unique identifier for the game"
        },
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "The player id"
        },
        "bets": {
          "type": "array",
          "description": "List of placed bets",
          "items": {
            "$ref": "#/definitions/Bet"
          }
        },
        "acceptPriceChange": {
          "type": "boolean",
          "description": "The acceptPriceChange"
        },
        "multiFactor": {
          "type": "integer",
          "format": "int32",
          "description": "It defines the game cost. If it is 1 the cost would be 1*columns. If it is 2 the cost would be 2*columns"
        }
      },
      "description": "The place bet request"
    },
    "Board": {
      "type": "object",
      "properties": {
        "boardId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the board"
        },
        "betType": {
          "type": "integer",
          "format": "int32",
          "description": "The bet type option depend on the game. e.g Straight, Box, Front-2, …, for Pick-x)"
        },
        "multipliers": {
          "type": "array",
          "description": "The list of multipliers",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "options": {
          "type": "array",
          "description": "The list of options",
          "items": {
            "type": "string"
          }
        },
        "panels": {
          "type": "array",
          "description": "The list of panels",
          "items": {
            "$ref": "#/definitions/Panel"
          }
        },
        "quickPick": {
          "type": "boolean",
          "description": "Check for quick pick selection. Available values ( 0=Unknown, 1=Manual entry, 2=QuickPick(pressing the QP button), 3=Partial QP(future use), 4=Weather selections, 5=QuickPick(shaking the phone), 6=Statistics(using statistics screen), 7=Favorites(Column from favorites) ) This information is for convenience only."
        }
      },
      "description": "The board object"
    },
    "Channel": {
      "type": "object",
      "required": [
        "description",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "A unique id of the channel"
        },
        "name": {
          "type": "string",
          "description": "The short name of the channel"
        },
        "description": {
          "type": "string",
          "description": "A description of the channel"
        }
      },
      "description": "The available channels"
    },
    "DatePatern": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "description": "The date of the specific draw"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of this draw"
        }
      },
      "description": "The date patern object"
    },
    "DayPattern": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "description": "The day of the specific draw"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of this draw"
        }
      },
      "description": "The day patern object"
    },
    "DrawBasedGame": {
      "type": "object",
      "properties": {
        "boards": {
          "type": "array",
          "description": "The list of boards",
          "items": {
            "$ref": "#/definitions/Board"
          }
        },
        "columns": {
          "type": "integer",
          "format": "int32",
          "description": "The number of columns played"
        },
        "cost": {
          "type": "number",
          "description": "The draw based game cost"
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time that the wager was played"
        },
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier for the game"
        },
        "barcode": {
          "type": "string",
          "description": "The unique internal code of the barcode. It is mandatory only for place bet method. Not required for reserve funds method"
        },
        "multipliers": {
          "type": "array",
          "description": "The list of multipliers",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "options": {
          "type": "array",
          "description": "The list of options. This information is for convenience only.",
          "items": {
            "type": "string"
          }
        },
        "participatingDraws": {
          "description": "The participatingDraws object",
          "$ref": "#/definitions/ParticipatingDraws"
        },
        "quickPick": {
          "type": "boolean",
          "description": "The boolean representing if quickpick mode is enabled."
        },
        "quickPickType": {
          "type": "integer",
          "format": "int32",
          "description": "Available values ( 0=Unknown, 1=Manual entry, 2=QuickPick(pressing the QP button), 3=Partial QP(future use), 4=Weather selections, 5=QuickPick(shaking the phone), 6=Statistics(using statistics screen), 7=Favorites(Column from favorites) ) This information is for convenience only."
        },
        "status": {
          "type": "string",
          "description": "The status of the wager",
          "enum": [
            "Autoplay",
            "Playing",
            "Played",
            "Canceling",
            "Canceled",
            "Winning",
            "Paying",
            "Paid",
            "Not winning",
            "Closed",
            "Blocked",
            "Temporary blocked",
            "Failed"
          ]
        },
        "teamShares": {
          "type": "integer",
          "format": "int32",
          "description": "The status of the wager"
        }
      },
      "description": "The draw-based game request"
    },
    "Favorites": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "lotteryGameNumbers": {
          "type": "array",
          "description": "The list of favorite numbers per game",
          "items": {
            "$ref": "#/definitions/LotteryFavouriteGameNumber"
          }
        },
        "lotteryNumbers": {
          "type": "array",
          "description": "a list of favorite numbers",
          "items": {
            "$ref": "#/definitions/LotteryFavouriteNumber"
          }
        },
        "wagerRequests": {
          "type": "array",
          "description": "The list of favorite wagerRequests",
          "items": {
            "$ref": "#/definitions/WagerRequest"
          }
        }
      },
      "description": "The favorite object"
    },
    "LotteryFavouriteGameNumber": {
      "type": "object",
      "properties": {
        "gameID": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the game"
        },
        "lotteryFavouriteNumbers": {
          "type": "array",
          "description": "The list with filter criteria values",
          "items": {
            "$ref": "#/definitions/LotteryFavouriteNumber"
          }
        }
      },
      "description": "The favourite game numbers object"
    },
    "LotteryFavouriteNumber": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "The favorite number"
        },
        "orderNum": {
          "type": "integer",
          "format": "int32",
          "description": "The order of the numbers"
        }
      },
      "description": "The favourite numbers object"
    },
    "OddData": {
      "type": "object",
      "required": [
        "decimal"
      ],
      "properties": {
        "decimal": {
          "type": "number",
          "format": "double",
          "description": "Decimal odds of each selection (e.g. 2,60)"
        },
        "fractional": {
          "type": "string",
          "description": "Fractional representation of odds (e.g. 8/5)"
        }
      },
      "description": "The odds data object"
    },
    "Panel": {
      "type": "object",
      "properties": {
        "panelId": {
          "type": "integer",
          "format": "int32",
          "description": "the unique number of the panel"
        },
        "qpSelections": {
          "type": "integer",
          "format": "int32",
          "description": "The selected numbers from quickpick"
        },
        "options": {
          "type": "array",
          "description": "The list of options",
          "items": {
            "type": "string"
          }
        },
        "quickPick": {
          "type": "boolean",
          "description": "Check for quick pick selection. Available values ( 0=Unknown, 1=Manual entry, 2=QuickPick(pressing the QP button), 3=Partial QP(future use), 4=Weather selections, 5=QuickPick(shaking the phone), 6=Statistics(using statistics screen), 7=Favorites(Column from favorites) ) This information is for convenience only."
        },
        "requested": {
          "type": "integer",
          "format": "int32",
          "description": "The requested option"
        },
        "selection": {
          "type": "array",
          "description": "The remaining selected numbers",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "The panel object"
    },
    "ParticipatingDraws": {
      "type": "object",
      "properties": {
        "datePattern": {
          "type": "array",
          "description": "The unique id for the participation",
          "items": {
            "$ref": "#/definitions/DatePatern"
          }
        },
        "dayPattern": {
          "type": "array",
          "description": "The status of the participation",
          "items": {
            "$ref": "#/definitions/DayPattern"
          }
        },
        "draws": {
          "type": "array",
          "description": "The list with the number of draws ahead that participations will start",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "firstDraw": {
          "type": "integer",
          "format": "int32",
          "description": "The first draw"
        },
        "firstDrawTime": {
          "type": "string",
          "description": "The time of first draw"
        },
        "lastDraw": {
          "type": "integer",
          "format": "int32",
          "description": "The last draw"
        },
        "lastDrawTime": {
          "type": "string",
          "description": "The time of last draw"
        },
        "multipleDraws": {
          "type": "integer",
          "format": "int32",
          "description": "The multiple draws"
        },
        "drawOffsets": {
          "type": "array",
          "description": "The draw Offsets",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "The participation draw-based game object"
    },
    "Selection": {
      "type": "object",
      "properties": {
        "partNo": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the selection. If there are 3 selections they should have 1,2,3 respectively"
        },
        "selectionId": {
          "type": "string",
          "description": "The selection id(For Iflex will be \"MARK_CODE_EVENT_CODE\")"
        },
        "eventId": {
          "type": "integer",
          "format": "int32",
          "description": "The event id"
        },
        "odds": {
          "description": "The odds data object",
          "$ref": "#/definitions/OddData"
        },
        "banker": {
          "type": "boolean",
          "description": "The banker definition"
        },
        "lines": {
          "type": "array",
          "description": "The Handicap/Under-Over value (Only IFlex will have 2 indexes (var0, var1))",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "getiMarket": {
          "type": "integer",
          "format": "int32",
          "description": "The index market(-1:No i-market 0..19: i-market played position OR 0..127: Live Home Team Score when the forecast=724..729)"
        },
        "scores": {
          "type": "array",
          "description": "The match score. Indexed by team A score[0] & team B score [1]",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "groupValue": {
          "type": "array",
          "description": "Mandatory for Iflex (0: No group), (1..10  : groups A, B, C, D, AB, AC, AD, BC, BD, CD), (11..20: R-groups A, B, C, D, AB, AC, AD, BC, BD, CD), (+100  : Banker selection)",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "status": {
          "type": "string",
          "description": "The status of the selection, equivalent to the status of the BetPartPlacementResult"
        },
        "inplay": {
          "type": "boolean",
          "description": "inplay"
        },
        "imarket": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The selection domain object"
    },
    "Stake": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "Betting amount on each combination will be produced from those parts (Cents)"
        },
        "currency": {
          "type": "string",
          "description": "Description of the currency with letters e.g. \"GBP\""
        }
      },
      "description": "The stake data"
    },
    "System": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Betting data type:SINGLE, MULTIPLE, DOUBLE, SYSTEM_3, SYSTEM_4, SYSTEM_5, SYSTEM_6, SYSTEM_7, SYSTEM_8, BANKER_2BANKER_3BANKER_4BANKER_5BANKER_6BANKER_7BANKER_8TRIXIECANADIAN, HEINZ, SUPER_HEINZ, PATENT, LUCKY_15, LUCKY_31, LUCKY_63, LUCKY_127YANKEE, GOLIATH, SUPER_GOLIATH, WINCAST, SCORECAST, ANYTIME_SCORECAST, TIMECAST, STRAIGHT_FORECAST, REVERSE_FORECAST, COMBINATION_FORECAST, TRICAST, COMBINATION_TRICAST"
        },
        "systems": {
          "type": "array",
          "description": "The bet system multiplier (Only IFlex)",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "The system domain object"
    },
    "TransactionRequest": {
      "type": "object",
      "required": [
        "channel",
        "id",
        "playerId",
        "refId",
        "transactionTime",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique internal id of the transaction request, used as reserveRef"
        },
        "channel": {
          "description": "The related channel",
          "$ref": "#/definitions/Channel"
        },
        "retailerId": {
          "type": "integer",
          "format": "int64",
          "description": "The unique id of the retailer"
        },
        "retailerTerminalId": {
          "type": "integer",
          "format": "int64",
          "description": "The unique id of the retailer terminal"
        },
        "retailerEmployeeId": {
          "type": "integer",
          "format": "int64",
          "description": "The unique id of the retailer employee"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The status of the transaction request"
        },
        "type": {
          "description": "The type of the transaction",
          "$ref": "#/definitions/TransactionType"
        },
        "transactionTime": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the transaction occured"
        },
        "wagerPlacedTime": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the wager has been placed"
        },
        "wagerSettledTime": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the wager has been settled"
        },
        "refId": {
          "type": "string",
          "description": "A unique reference id"
        },
        "externalPartyName": {
          "type": "string",
          "description": "The external party name"
        },
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "The player id"
        }
      },
      "description": "The request of the transaction"
    },
    "TransactionType": {
      "type": "object",
      "required": [
        "description",
        "type"
      ],
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the transaction"
        },
        "description": {
          "type": "string",
          "description": "A description of the type of the transaction"
        }
      },
      "description": "The type of a transaction"
    },
    "Wager": {
      "type": "object",
      "properties": {
        "dbg": {
          "description": "The draw based game object",
          "$ref": "#/definitions/DrawBasedGame"
        },
        "bettingGame": {
          "description": "The betting game object",
          "$ref": "#/definitions/BettingGame"
        }
      },
      "description": "The wager object"
    },
    "WagerRequest": {
      "type": "object",
      "required": [
        "transactionRequest",
        "wager"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "a unique internal id of the coupon"
        },
        "barcode": {
          "type": "string",
          "description": "a unique internal code of the wager"
        },
        "wagerCost": {
          "type": "integer",
          "format": "int64",
          "description": "the total wager cost"
        },
        "favoriteDescription": {
          "type": "string",
          "description": "the description in case of favorite wager"
        },
        "syndicateId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the syndicate"
        },
        "comboId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the combo"
        },
        "favoriteIdf": {
          "type": "integer",
          "format": "int64",
          "description": "the id of the favorite wager used during play"
        },
        "favoriteLastPlayed": {
          "type": "string",
          "format": "date-time",
          "description": "the date that the favorite last played"
        },
        "wager": {
          "description": "The wager object",
          "$ref": "#/definitions/Wager"
        },
        "transactionRequest": {
          "description": "the transaction-request information",
          "$ref": "#/definitions/TransactionRequest"
        }
      },
      "description": "The wager request object"
    },
    "Leaderboard Player Info": {
      "type": "object",
      "properties": {
        "calculatedPoints": {
          "type": "number",
          "description": "The player's calculated points"
        },
        "clientId": {
          "type": "integer",
          "format": "int64",
          "description": "The client id"
        },
        "clientStatId": {
          "type": "integer",
          "format": "int64",
          "description": "The client stat id"
        },
        "firstName": {
          "type": "string",
          "description": "The player's first name"
        },
        "lastName": {
          "type": "string",
          "description": "The player's last name"
        },
        "points": {
          "type": "number",
          "description": "The player's leaderboard points"
        },
        "rank": {
          "type": "integer",
          "format": "int64",
          "description": "The player's rank at the tournament leaderboard"
        },
        "userName": {
          "type": "string",
          "description": "The player's username"
        }
      },
      "description": "The tournament leaderboard player information"
    },
    "KYCDownloadFile": {
      "type": "object",
      "required": [
        "base64FileData",
        "originalFileName"
      ],
      "properties": {
        "originalFileName": {
          "type": "string",
          "description": "The name of the original file"
        },
        "archiveFileName": {
          "type": "string",
          "description": "The name of the archived file"
        },
        "base64FileData": {
          "type": "string",
          "description": "The KYC document's file base64 data"
        },
        "archived": {
          "type": "boolean",
          "description": "Whether the file is part of an kyc document archive ( many files combined into one )"
        }
      },
      "description": "The data of the player's KYC Document File"
    },
    "PlayerTermsConditionsStatus": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "integer",
          "format": "int64",
          "description": "The player's id"
        },
        "clientStatId": {
          "type": "integer",
          "format": "int64",
          "description": "The player's statistics id"
        },
        "clientTermsConditionId": {
          "type": "integer",
          "format": "int64",
          "description": "The client's term and condition id"
        },
        "statusEnum": {
          "type": "string",
          "description": "The term and condition's status enumeration",
          "enum": [
            "NONE",
            "REVOKED",
            "ACCEPTED",
            "REJECTED",
            "PENDING"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Flag whether the term and condition is required"
        },
        "playerRestrictionType": {
          "type": "string",
          "description": "The player restriction type name"
        },
        "playerRestrictionTypeId": {
          "type": "integer",
          "format": "int64",
          "description": "The player restriction type id"
        },
        "statusDate": {
          "type": "string",
          "description": "The terms and conditions status date"
        },
        "termsConditionId": {
          "type": "integer",
          "format": "int64",
          "description": "The term and condition's id"
        },
        "typeEnum": {
          "type": "string",
          "description": "The term and condition's type enum",
          "enum": [
            "NONE",
            "DATA_PROCESSING",
            "BONUS_AND_PROMOTIONS_CONSENT",
            "NEWSLETTER_AND_CAMPAIGN_CONSENT"
          ]
        },
        "versionNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The term and condition's version number"
        }
      },
      "description": "The player's terms and conditions status object"
    },
    "ArrayOfTransactionBalanceAccountAttributeData": {
      "type": "object",
      "properties": {
        "transactionBalanceAccountAttributeData": {
          "type": "array",
          "xml": {
            "name": "TransactionBalanceAccountAttributeData"
          },
          "items": {
            "xml": {
              "name": "TransactionBalanceAccountAttributeData"
            },
            "$ref": "#/definitions/TransactionBalanceAccountAttributeData"
          }
        }
      }
    },
    "BalanceAccountVerificationHistory": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "xml": {
            "name": "Amount"
          }
        },
        "attributes": {
          "xml": {
            "name": "Attributes"
          },
          "$ref": "#/definitions/ArrayOfTransactionBalanceAccountAttributeData"
        },
        "balanceAccountId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "BalanceAccountId"
          }
        },
        "verificationCode": {
          "type": "string",
          "xml": {
            "name": "VerificationCode"
          }
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "name": "DateCreated"
          }
        },
        "transactionType": {
          "type": "string",
          "xml": {
            "name": "TransactionType"
          },
          "enum": [
            "NONE",
            "INITIATE_VERIFICATION",
            "ROLLBACK_VERIFICATION",
            "COMPLETE_VERIFICATION"
          ]
        },
        "verificationHistoryId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "VerificationHistoryId"
          }
        }
      }
    },
    "TransactionBalanceAccountAttributeData": {
      "type": "object",
      "required": [
        "attrName"
      ],
      "properties": {
        "attrName": {
          "type": "string",
          "xml": {
            "name": "AttrName"
          }
        },
        "attrValue": {
          "type": "string",
          "xml": {
            "name": "AttrValue"
          }
        }
      }
    },
    "TransactionBalanceAccountData": {
      "type": "object",
      "required": [
        "accountReference",
        "dateCreated",
        "depositedAmount",
        "description",
        "paymentMethod",
        "paymentMethodType",
        "uniqueTransactionIDLast",
        "withdrawalPendingAmount",
        "withdrawnAmount"
      ],
      "properties": {
        "accountReference": {
          "type": "string",
          "xml": {
            "name": "AccountReference"
          }
        },
        "attributes": {
          "xml": {
            "name": "Attributes"
          },
          "$ref": "#/definitions/ArrayOfTransactionBalanceAccountAttributeData"
        },
        "balanceAccountID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "BalanceAccountID"
          }
        },
        "canWithdraw": {
          "type": "boolean",
          "xml": {
            "name": "CanWithdraw"
          }
        },
        "comment": {
          "type": "string",
          "xml": {
            "name": "Comment"
          }
        },
        "creditCardHolderName": {
          "type": "string",
          "xml": {
            "name": "CreditCardHolderName"
          }
        },
        "customerReferenceNumber": {
          "type": "string",
          "xml": {
            "name": "CustomerReferenceNumber"
          }
        },
        "dateCreated": {
          "type": "string",
          "xml": {
            "name": "DateCreated"
          }
        },
        "depositedAmount": {
          "type": "number",
          "xml": {
            "name": "DepositedAmount"
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "expiryDate": {
          "type": "string",
          "xml": {
            "name": "ExpiryDate"
          }
        },
        "fraudCheckable": {
          "type": "boolean",
          "xml": {
            "name": "FraudCheckable"
          }
        },
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "isDefault": {
          "type": "boolean",
          "xml": {
            "name": "IsDefault"
          }
        },
        "isDefaultWithdrawal": {
          "type": "boolean",
          "xml": {
            "name": "IsDefaultWithdrawal"
          }
        },
        "isInternal": {
          "type": "boolean",
          "xml": {
            "name": "IsInternal"
          }
        },
        "isPaymentMethodVerificationEnabled": {
          "type": "boolean",
          "xml": {
            "name": "IsPaymentMethodVerificationEnabled"
          }
        },
        "lastVerificationState": {
          "xml": {
            "name": "LastVerificationState"
          },
          "$ref": "#/definitions/BalanceAccountVerificationHistory"
        },
        "paymentGateway": {
          "type": "string",
          "xml": {
            "name": "PaymentGateway"
          }
        },
        "paymentGatewayID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PaymentGatewayID"
          }
        },
        "paymentMethod": {
          "type": "string",
          "xml": {
            "name": "PaymentMethod"
          }
        },
        "paymentMethodID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PaymentMethodID"
          }
        },
        "paymentMethodSubType": {
          "type": "string",
          "xml": {
            "name": "PaymentMethodSubType"
          }
        },
        "paymentMethodType": {
          "type": "string",
          "xml": {
            "name": "PaymentMethodType"
          }
        },
        "playerToken": {
          "type": "string",
          "xml": {
            "name": "PlayerToken"
          }
        },
        "uniqueTransactionIDLast": {
          "type": "string",
          "xml": {
            "name": "UniqueTransactionIDLast"
          }
        },
        "withdrawalPendingAmount": {
          "type": "number",
          "xml": {
            "name": "WithdrawalPendingAmount"
          }
        },
        "withdrawnAmount": {
          "type": "number",
          "xml": {
            "name": "WithdrawnAmount"
          }
        },
        "kycchecked": {
          "type": "boolean"
        }
      }
    },
    "MetricTransaction": {
      "type": "object",
      "required": [
        "description",
        "metricId",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the metric transaction"
        },
        "refId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the reference"
        },
        "metricId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the metric"
        },
        "currentBalance": {
          "type": "number",
          "description": "The current balance of the metric transaction"
        },
        "dateTime": {
          "type": "string",
          "description": "The date time of the metric transaction"
        },
        "description": {
          "type": "string",
          "description": "The description of the metric transaction"
        },
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the player for the specific metric transaction"
        },
        "value": {
          "type": "number",
          "description": "The value of the metric transaction"
        }
      },
      "description": "The transaction of a metric"
    },
    "MtanVerificationResponse": {
      "type": "object",
      "properties": {
        "remainingUses": {
          "type": "integer",
          "format": "int32",
          "description": "the number of the available remaining uses"
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "description": "the validTo mTan verification token duration in seconds, default = 300 seconds"
        },
        "code": {
          "type": "string",
          "description": "the mtan verification code"
        },
        "token": {
          "type": "string",
          "description": "the mtan verification token"
        }
      },
      "description": "The Mtan Verification request options information"
    },
    "MtanGenerationRequest": {
      "type": "object",
      "required": [
        "actionType"
      ],
      "properties": {
        "verificationTimes": {
          "type": "integer",
          "format": "int32",
          "description": "the number of the available uses of the specific generated token, default value = 1"
        },
        "actionType": {
          "type": "string",
          "description": "the action type name for the mtan verification token, default = NotSet",
          "enum": [
            "NotSet",
            "PlayerPaymentAccount",
            "PlayerProfileData",
            "PlayerBet",
            "PlayerCloseAccount",
            "PlayerLimits",
            "PlayerActivation"
          ]
        },
        "validFor": {
          "type": "integer",
          "format": "int32",
          "description": "the mTan verification token duration in seconds, default = 300 seconds"
        },
        "invalidatePreviousTokens": {
          "type": "boolean",
          "description": "invalidate previous Tokens for the current session, default = true"
        }
      },
      "description": "The Mtan Verification request options information"
    },
    "Tournament": {
      "type": "object",
      "properties": {
        "playerOptedIn": {
          "type": "boolean",
          "description": "Flag whether player has opted in the tournament"
        },
        "metricId": {
          "type": "integer",
          "format": "int32",
          "description": "The metric id associated with the tournament"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The tournament id"
        }
      },
      "description": "The tournament"
    },
    "ArrayOfTournamentPlayerStatus": {
      "type": "object",
      "properties": {
        "tournamentPlayerStatus": {
          "type": "array",
          "xml": {
            "name": "TournamentPlayerStatus"
          },
          "items": {
            "xml": {
              "name": "TournamentPlayerStatus"
            },
            "$ref": "#/definitions/TournamentPlayerStatus"
          }
        }
      }
    },
    "PlayerGetActiveTournamentStatusesReturn": {
      "type": "object",
      "properties": {
        "tournaments": {
          "xml": {
            "name": "Tournaments"
          },
          "$ref": "#/definitions/ArrayOfTournamentPlayerStatus"
        }
      }
    },
    "TournamentPlayerStatus": {
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "lastTempRankUpdateDate": {
          "type": "string",
          "xml": {
            "name": "LastTempRankUpdateDate"
          }
        },
        "lastUpdatedDate": {
          "type": "string",
          "xml": {
            "name": "LastUpdatedDate"
          }
        },
        "metricID": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "MetricID"
          }
        },
        "optedInDate": {
          "type": "string",
          "xml": {
            "name": "OptedInDate"
          }
        },
        "previousRank": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "PreviousRank"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Priority"
          }
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Rank"
          }
        },
        "rounds": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Rounds"
          }
        },
        "score": {
          "type": "number",
          "xml": {
            "name": "Score"
          }
        },
        "totalBet": {
          "type": "number",
          "xml": {
            "name": "TotalBet"
          }
        },
        "totalWin": {
          "type": "number",
          "xml": {
            "name": "TotalWin"
          }
        },
        "tournamentID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "TournamentID"
          }
        },
        "tournamentName": {
          "type": "string",
          "xml": {
            "name": "TournamentName"
          }
        },
        "tournamentPlayerStatusID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "TournamentPlayerStatusID"
          }
        }
      }
    },
    "ArrayOfLotteryCouponIdentifier": {
      "type": "object",
      "properties": {
        "lotteryCouponIdentifier": {
          "type": "array",
          "xml": {
            "name": "LotteryCouponIdentifier"
          },
          "items": {
            "xml": {
              "name": "LotteryCouponIdentifier"
            },
            "$ref": "#/definitions/LotteryCouponIdentifier"
          }
        }
      }
    },
    "ArrayOfLotteryCouponPromotion": {
      "type": "object",
      "properties": {
        "lotteryCouponPromotion": {
          "type": "array",
          "xml": {
            "name": "LotteryCouponPromotion"
          },
          "items": {
            "xml": {
              "name": "LotteryCouponPromotion"
            },
            "$ref": "#/definitions/LotteryCouponPromotion"
          }
        }
      }
    },
    "ArrayOfLotteryDBGTicket": {
      "type": "object",
      "properties": {
        "lotteryDBGTicket": {
          "type": "array",
          "xml": {
            "name": "LotteryDBGTicket"
          },
          "items": {
            "xml": {
              "name": "LotteryDBGTicket"
            },
            "$ref": "#/definitions/LotteryDBGTicket"
          }
        }
      }
    },
    "ArrayOfLotteryDBGTicketEntry": {
      "type": "object",
      "properties": {
        "lotteryDBGTicketEntry": {
          "type": "array",
          "xml": {
            "name": "LotteryDBGTicketEntry"
          },
          "items": {
            "xml": {
              "name": "LotteryDBGTicketEntry"
            },
            "$ref": "#/definitions/LotteryDBGTicketEntry"
          }
        }
      }
    },
    "ArrayOfLotteryDBGTicketEntryBoard": {
      "type": "object",
      "properties": {
        "lotteryDBGTicketEntryBoard": {
          "type": "array",
          "xml": {
            "name": "LotteryDBGTicketEntryBoard"
          },
          "items": {
            "xml": {
              "name": "LotteryDBGTicketEntryBoard"
            },
            "$ref": "#/definitions/LotteryDBGTicketEntryBoard"
          }
        }
      }
    },
    "ArrayOfLotteryDBGTicketEntryGameTypeMultiplierData": {
      "type": "object",
      "properties": {
        "lotteryDBGTicketEntryGameTypeMultiplierData": {
          "type": "array",
          "xml": {
            "name": "LotteryDBGTicketEntryGameTypeMultiplierData"
          },
          "items": {
            "xml": {
              "name": "LotteryDBGTicketEntryGameTypeMultiplierData"
            },
            "$ref": "#/definitions/LotteryDBGTicketEntryGameTypeMultiplierData"
          }
        }
      }
    },
    "ArrayOfLotteryParticipation": {
      "type": "object",
      "properties": {
        "lotteryParticipation": {
          "type": "array",
          "xml": {
            "name": "LotteryParticipation"
          },
          "items": {
            "xml": {
              "name": "LotteryParticipation"
            },
            "$ref": "#/definitions/LotteryParticipation"
          }
        }
      }
    },
    "ArrayOfLotteryParticipationPrize": {
      "type": "object",
      "properties": {
        "lotteryParticipationPrize": {
          "type": "array",
          "xml": {
            "name": "LotteryParticipationPrize"
          },
          "items": {
            "xml": {
              "name": "LotteryParticipationPrize"
            },
            "$ref": "#/definitions/LotteryParticipationPrize"
          }
        }
      }
    },
    "ArrayOfLotterySBEvent": {
      "type": "object",
      "properties": {
        "lotterySBEvent": {
          "type": "array",
          "xml": {
            "name": "LotterySBEvent"
          },
          "items": {
            "xml": {
              "name": "LotterySBEvent"
            },
            "$ref": "#/definitions/LotterySBEvent"
          }
        }
      }
    },
    "ArrayOfLotterySBTicket": {
      "type": "object",
      "properties": {
        "lotterySBTicket": {
          "type": "array",
          "xml": {
            "name": "LotterySBTicket"
          },
          "items": {
            "xml": {
              "name": "LotterySBTicket"
            },
            "$ref": "#/definitions/LotterySBTicket"
          }
        }
      }
    },
    "ArrayOfPlayerExternalPromotionData": {
      "type": "object",
      "properties": {
        "playerExternalPromotionData": {
          "type": "array",
          "xml": {
            "name": "PlayerExternalPromotionData"
          },
          "items": {
            "xml": {
              "name": "PlayerExternalPromotionData"
            },
            "$ref": "#/definitions/PlayerExternalPromotionData"
          }
        }
      }
    },
    "ArrayOfPoolColumn": {
      "type": "object",
      "properties": {
        "poolColumn": {
          "type": "array",
          "xml": {
            "name": "PoolColumn"
          },
          "items": {
            "xml": {
              "name": "PoolColumn"
            },
            "$ref": "#/definitions/PoolColumn"
          }
        }
      }
    },
    "ArrayOfPoolGame": {
      "type": "object",
      "properties": {
        "poolGame": {
          "type": "array",
          "xml": {
            "name": "PoolGame"
          },
          "items": {
            "xml": {
              "name": "PoolGame"
            },
            "$ref": "#/definitions/PoolGame"
          }
        }
      }
    },
    "ArrayOfPoolProgramEvent": {
      "type": "object",
      "properties": {
        "poolProgramEvent": {
          "type": "array",
          "xml": {
            "name": "PoolProgramEvent"
          },
          "items": {
            "xml": {
              "name": "PoolProgramEvent"
            },
            "$ref": "#/definitions/PoolProgramEvent"
          }
        }
      }
    },
    "ExternalPromotionType": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "externalPromotionTypeId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ExternalPromotionTypeId"
          }
        },
        "gameManufacturerId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GameManufacturerId"
          }
        },
        "isHidden": {
          "type": "boolean",
          "xml": {
            "name": "IsHidden"
          }
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "Name"
          }
        },
        "promotionTypeIdf": {
          "type": "string",
          "xml": {
            "name": "PromotionTypeIdf"
          }
        }
      }
    },
    "LotteryCoupon": {
      "type": "object",
      "properties": {
        "cancelDate": {
          "type": "string",
          "xml": {
            "name": "CancelDate"
          }
        },
        "channelType": {
          "type": "string",
          "xml": {
            "name": "ChannelType"
          },
          "enum": [
            "ALL",
            "ONLINE",
            "SELF_SERVICE",
            "RETAIL",
            "SUBSCRIPTION"
          ]
        },
        "comboIdf": {
          "type": "string",
          "xml": {
            "name": "ComboIdf"
          }
        },
        "couponCost": {
          "type": "number",
          "xml": {
            "name": "CouponCost"
          }
        },
        "couponDate": {
          "type": "string",
          "xml": {
            "name": "CouponDate"
          }
        },
        "couponStake": {
          "type": "number",
          "xml": {
            "name": "CouponStake"
          }
        },
        "couponTitle": {
          "type": "string",
          "xml": {
            "name": "CouponTitle"
          }
        },
        "discount": {
          "type": "number",
          "xml": {
            "name": "Discount"
          }
        },
        "externalPromotions": {
          "xml": {
            "name": "ExternalPromotions"
          },
          "$ref": "#/definitions/ArrayOfPlayerExternalPromotionData"
        },
        "favouriteDescription": {
          "type": "string",
          "xml": {
            "name": "FavouriteDescription"
          }
        },
        "favouriteID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "FavouriteID"
          }
        },
        "favouriteLastPlayedOn": {
          "type": "string",
          "xml": {
            "name": "FavouriteLastPlayedOn"
          }
        },
        "gameManufacturer": {
          "type": "string",
          "xml": {
            "name": "GameManufacturer"
          }
        },
        "isActive": {
          "type": "boolean",
          "xml": {
            "name": "IsActive"
          }
        },
        "lastPlayedFavourite": {
          "xml": {
            "name": "LastPlayedFavourite"
          },
          "$ref": "#/definitions/LotteryCoupon"
        },
        "lossNotification": {
          "type": "boolean",
          "xml": {
            "name": "LossNotification"
          }
        },
        "lotteryCouponID": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "LotteryCouponID"
          }
        },
        "lotteryCouponIdentifier": {
          "type": "string",
          "xml": {
            "name": "LotteryCouponIdentifier"
          }
        },
        "lotteryCouponIdentifiers": {
          "xml": {
            "name": "LotteryCouponIdentifiers"
          },
          "$ref": "#/definitions/ArrayOfLotteryCouponIdentifier"
        },
        "lotteryCouponStatusCode": {
          "type": "string",
          "xml": {
            "name": "LotteryCouponStatusCode"
          }
        },
        "lotteryCouponTypeCode": {
          "type": "string",
          "xml": {
            "name": "LotteryCouponTypeCode"
          }
        },
        "lotteryRetailerEmployeeIdentifier": {
          "type": "string",
          "xml": {
            "name": "LotteryRetailerEmployeeIdentifier"
          }
        },
        "lotteryRetailerIdentifier": {
          "type": "string",
          "xml": {
            "name": "LotteryRetailerIdentifier"
          }
        },
        "lotteryRetailerTerminalIdentifier": {
          "type": "string",
          "xml": {
            "name": "LotteryRetailerTerminalIdentifier"
          }
        },
        "lotterySBTicket": {
          "xml": {
            "name": "LotterySBTicket"
          },
          "$ref": "#/definitions/LotterySBTicket"
        },
        "lotterySBTickets": {
          "xml": {
            "name": "LotterySBTickets"
          },
          "$ref": "#/definitions/ArrayOfLotterySBTicket"
        },
        "lotteryTickets": {
          "xml": {
            "name": "LotteryTickets"
          },
          "$ref": "#/definitions/ArrayOfLotteryDBGTicket"
        },
        "lotteryTransaction": {
          "xml": {
            "name": "LotteryTransaction"
          },
          "$ref": "#/definitions/LotteryTransaction"
        },
        "lotteryTransactionFee": {
          "xml": {
            "name": "LotteryTransactionFee"
          },
          "$ref": "#/definitions/LotteryTransactionFee"
        },
        "lotteryWagerStatus": {
          "type": "string",
          "xml": {
            "name": "LotteryWagerStatus"
          }
        },
        "loyaltyCardNumber": {
          "type": "string",
          "xml": {
            "name": "LoyaltyCardNumber"
          }
        },
        "numParticipations": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "NumParticipations"
          }
        },
        "numTicketEntries": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "NumTicketEntries"
          }
        },
        "numTickets": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "NumTickets"
          }
        },
        "paidWith": {
          "type": "string",
          "xml": {
            "name": "PaidWith"
          }
        },
        "platformType": {
          "type": "string",
          "xml": {
            "name": "PlatformType"
          },
          "enum": [
            "NOTDEFINED",
            "WEB",
            "DOWNLOAD",
            "MOBILE",
            "TABLET",
            "TV",
            "BACKOFFICE",
            "GABLET",
            "TERMINAL",
            "MOBILEAPP",
            "TABLETAPP",
            "TVAPP",
            "SUBSCRIPTION",
            "RETAILER",
            "SUBSOFFLINE",
            "SUBSTABO",
            "SUBSJACKPOT",
            "SUBSOFFLINEJACKPOT"
          ]
        },
        "poolGames": {
          "xml": {
            "name": "PoolGames"
          },
          "$ref": "#/definitions/ArrayOfPoolGame"
        },
        "primaryGameRef": {
          "type": "string",
          "xml": {
            "name": "PrimaryGameRef"
          }
        },
        "promotions": {
          "xml": {
            "name": "Promotions"
          },
          "$ref": "#/definitions/ArrayOfLotteryCouponPromotion"
        },
        "sourceID": {
          "type": "string",
          "xml": {
            "name": "SourceID"
          }
        },
        "syndicateIdf": {
          "type": "string",
          "xml": {
            "name": "SyndicateIdf"
          }
        },
        "syndicateTotalNoOfShares": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "SyndicateTotalNoOfShares"
          }
        },
        "verticalVersion": {
          "type": "string",
          "xml": {
            "name": "VerticalVersion"
          },
          "enum": [
            "NOT_SET",
            "SPORTS_BOOK_I_FLEX",
            "SPORTS_BOOK_AMELCO",
            "SPORTS_POOL_I_FLEX",
            "LOTTERY_I_FLEX",
            "SPORTS_BOOK_LOTO_BET"
          ]
        },
        "winAmount": {
          "type": "number",
          "xml": {
            "name": "WinAmount"
          }
        },
        "winGrossAmount": {
          "type": "number",
          "xml": {
            "name": "WinGrossAmount"
          }
        },
        "winNetAmount": {
          "type": "number",
          "xml": {
            "name": "WinNetAmount"
          }
        },
        "winNotification": {
          "type": "boolean",
          "xml": {
            "name": "WinNotification"
          }
        },
        "winTaxAmount": {
          "type": "number",
          "xml": {
            "name": "WinTaxAmount"
          }
        }
      }
    },
    "LotteryCouponIdentifier": {
      "type": "object",
      "properties": {
        "drawId": {
          "type": "string",
          "xml": {
            "name": "DrawId"
          }
        },
        "id": {
          "type": "string",
          "xml": {
            "name": "Id"
          }
        }
      }
    },
    "LotteryCouponPromotion": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "xml": {
            "name": "Data"
          }
        },
        "promotionType": {
          "type": "string",
          "xml": {
            "name": "PromotionType"
          }
        },
        "winningAmount": {
          "type": "number",
          "xml": {
            "name": "WinningAmount"
          }
        }
      }
    },
    "LotteryDBGTicket": {
      "type": "object",
      "properties": {
        "advanceDraws": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "AdvanceDraws"
          }
        },
        "extraFlag": {
          "type": "boolean",
          "xml": {
            "name": "ExtraFlag"
          }
        },
        "firstDrawNumber": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "FirstDrawNumber"
          }
        },
        "gameStateIDF": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GameStateIDF"
          }
        },
        "gameType": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GameType"
          }
        },
        "lastDrawNumber": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "LastDrawNumber"
          }
        },
        "multiDraws": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "MultiDraws"
          }
        },
        "multiplier": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Multiplier"
          }
        },
        "options": {
          "xml": {
            "name": "Options"
          },
          "$ref": "#/definitions/ArrayOfstring"
        },
        "participations": {
          "xml": {
            "name": "Participations"
          },
          "$ref": "#/definitions/ArrayOfLotteryParticipation"
        },
        "promoCodeIDF": {
          "type": "string",
          "xml": {
            "name": "PromoCodeIDF"
          }
        },
        "robotJackpotMinValue": {
          "type": "number",
          "xml": {
            "name": "RobotJackpotMinValue"
          }
        },
        "robotOffsetFromIntervalMinutes": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "RobotOffsetFromIntervalMinutes"
          }
        },
        "selectionSource": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "SelectionSource"
          }
        },
        "ticketCost": {
          "type": "number",
          "xml": {
            "name": "TicketCost"
          }
        },
        "ticketEntries": {
          "xml": {
            "name": "TicketEntries"
          },
          "$ref": "#/definitions/ArrayOfLotteryDBGTicketEntry"
        },
        "uniqueCode": {
          "type": "string",
          "xml": {
            "name": "UniqueCode"
          }
        }
      }
    },
    "LotteryDBGTicketEntry": {
      "type": "object",
      "properties": {
        "boards": {
          "xml": {
            "name": "Boards"
          },
          "$ref": "#/definitions/ArrayOfLotteryDBGTicketEntryBoard"
        },
        "extraNumbers": {
          "type": "string",
          "xml": {
            "name": "ExtraNumbers"
          }
        },
        "gameType": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GameType"
          }
        },
        "gameTypesMultipliers": {
          "xml": {
            "name": "GameTypesMultipliers"
          },
          "$ref": "#/definitions/ArrayOfLotteryDBGTicketEntryGameTypeMultiplierData"
        },
        "groupMultiplier": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GroupMultiplier"
          }
        },
        "groupName": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GroupName"
          }
        },
        "groupNumber": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GroupNumber"
          }
        },
        "jokers": {
          "type": "string",
          "xml": {
            "name": "Jokers"
          }
        },
        "multiplier": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Multiplier"
          }
        },
        "numbers": {
          "type": "string",
          "xml": {
            "name": "Numbers"
          }
        },
        "options": {
          "xml": {
            "name": "Options"
          },
          "$ref": "#/definitions/ArrayOfstring"
        },
        "quickJokers": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "QuickJokers"
          }
        },
        "quickNumbers": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "QuickNumbers"
          }
        },
        "quickpickSelection": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "QuickpickSelection"
          }
        },
        "selectionSource": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "SelectionSource"
          }
        },
        "systemSelection": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "SystemSelection"
          }
        },
        "topup": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Topup"
          }
        }
      }
    },
    "LotteryDBGTicketEntryBoard": {
      "type": "object",
      "properties": {
        "boardIdentifier": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "BoardIdentifier"
          }
        },
        "boardTypeIDF": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "BoardTypeIDF"
          }
        },
        "numberList": {
          "xml": {
            "name": "NumberList"
          },
          "$ref": "#/definitions/ArrayOfstring"
        },
        "numbers": {
          "type": "string",
          "xml": {
            "name": "Numbers"
          }
        },
        "options": {
          "xml": {
            "name": "Options"
          },
          "$ref": "#/definitions/ArrayOfstring"
        },
        "quickpickSelection": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "QuickpickSelection"
          }
        },
        "requested": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Requested"
          }
        }
      }
    },
    "LotteryDBGTicketEntryGameTypeMultiplierData": {
      "type": "object",
      "properties": {
        "gameType": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GameType"
          }
        },
        "multiplier": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Multiplier"
          }
        }
      }
    },
    "LotteryParticipation": {
      "type": "object",
      "properties": {
        "drawDate": {
          "type": "string",
          "xml": {
            "name": "DrawDate"
          }
        },
        "drawNumber": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "DrawNumber"
          }
        },
        "drawOffset": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "DrawOffset"
          }
        },
        "gameStateIDF": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "GameStateIDF"
          }
        },
        "lotteryParticipationStatusCode": {
          "type": "string",
          "xml": {
            "name": "LotteryParticipationStatusCode"
          }
        },
        "lotteryWagerStatus": {
          "type": "string",
          "xml": {
            "name": "LotteryWagerStatus"
          }
        },
        "participationCost": {
          "type": "number",
          "xml": {
            "name": "ParticipationCost"
          }
        },
        "participationIdentifier": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ParticipationIdentifier"
          }
        },
        "prizes": {
          "xml": {
            "name": "Prizes"
          },
          "$ref": "#/definitions/ArrayOfLotteryParticipationPrize"
        },
        "visualDrawNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "VisualDrawNumber"
          }
        }
      }
    },
    "LotteryParticipationPrize": {
      "type": "object",
      "properties": {
        "approvalLastUpdate": {
          "type": "string",
          "xml": {
            "name": "ApprovalLastUpdate"
          }
        },
        "approvalStatusCode": {
          "type": "string",
          "xml": {
            "name": "ApprovalStatusCode"
          }
        },
        "betRef": {
          "type": "string",
          "xml": {
            "name": "BetRef"
          }
        },
        "cashedOut": {
          "type": "boolean",
          "xml": {
            "name": "CashedOut"
          }
        },
        "channelType": {
          "type": "string",
          "xml": {
            "name": "ChannelType"
          },
          "enum": [
            "ALL",
            "ONLINE",
            "SELF_SERVICE",
            "RETAIL",
            "SUBSCRIPTION"
          ]
        },
        "creditTypeCode": {
          "type": "string",
          "xml": {
            "name": "CreditTypeCode"
          }
        },
        "giftDescription": {
          "type": "string",
          "xml": {
            "name": "GiftDescription"
          }
        },
        "giftId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GiftId"
          }
        },
        "gross": {
          "type": "number",
          "xml": {
            "name": "Gross"
          }
        },
        "net": {
          "type": "number",
          "xml": {
            "name": "Net"
          }
        },
        "paidWith": {
          "type": "string",
          "xml": {
            "name": "PaidWith"
          }
        },
        "platformType": {
          "type": "string",
          "xml": {
            "name": "PlatformType"
          },
          "enum": [
            "NOTDEFINED",
            "WEB",
            "DOWNLOAD",
            "MOBILE",
            "TABLET",
            "TV",
            "BACKOFFICE",
            "GABLET",
            "TERMINAL",
            "MOBILEAPP",
            "TABLETAPP",
            "TVAPP",
            "SUBSCRIPTION",
            "RETAILER",
            "SUBSOFFLINE",
            "SUBSTABO",
            "SUBSJACKPOT",
            "SUBSOFFLINEJACKPOT"
          ]
        },
        "prizeStatus": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "PrizeStatus"
          }
        },
        "refund": {
          "type": "number",
          "xml": {
            "name": "Refund"
          }
        },
        "transactionRef": {
          "type": "string",
          "xml": {
            "name": "TransactionRef"
          }
        }
      }
    },
    "LotterySBEvent": {
      "type": "object",
      "properties": {
        "cashOutEnabled": {
          "type": "boolean",
          "xml": {
            "name": "CashOutEnabled"
          }
        },
        "eventCode": {
          "type": "string",
          "xml": {
            "name": "EventCode"
          }
        },
        "eventID": {
          "type": "string",
          "xml": {
            "name": "EventID"
          }
        },
        "extMarketID": {
          "type": "string",
          "xml": {
            "name": "ExtMarketID"
          }
        },
        "indexMarketPosition": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "IndexMarketPosition"
          }
        },
        "marketCode": {
          "type": "string",
          "xml": {
            "name": "MarketCode"
          }
        },
        "odds": {
          "type": "number",
          "xml": {
            "name": "Odds"
          }
        },
        "selectionIDF": {
          "type": "string",
          "xml": {
            "name": "SelectionIDF"
          }
        },
        "standard": {
          "type": "boolean",
          "xml": {
            "name": "Standard"
          }
        }
      }
    },
    "LotterySBTicket": {
      "type": "object",
      "required": [
        "combinations",
        "events",
        "gameStateIDF",
        "requestMultiplier"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "xml": {
            "name": "Amount"
          }
        },
        "betIDF": {
          "type": "string",
          "xml": {
            "name": "BetIDF"
          }
        },
        "betNo": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "BetNo"
          }
        },
        "betStatus": {
          "type": "string",
          "xml": {
            "name": "BetStatus"
          },
          "enum": [
            "PLAYING",
            "NEGOTIATING",
            "OPEN",
            "REJECTED"
          ]
        },
        "betType": {
          "type": "string",
          "xml": {
            "name": "BetType"
          },
          "enum": [
            "NOT_SET",
            "SINGLE",
            "MULTIPLE",
            "SYSTEM_2",
            "SYSTEM_3",
            "SYSTEM_4",
            "SYSTEM_5",
            "SYSTEM_6",
            "SYSTEM_7",
            "SYSTEM_8",
            "SYSTEM_9",
            "SYSTEM_10",
            "SYSTEM_11",
            "SYSTEM_12",
            "SYSTEM_13",
            "SYSTEM_14",
            "SYSTEM_15",
            "SYSTEM_16",
            "SYSTEM_17",
            "SYSTEM_18",
            "SYSTEM_19",
            "SYSTEM_20",
            "SYSTEM_21",
            "SYSTEM_22",
            "SYSTEM_23",
            "SYSTEM_24",
            "SYSTEM_25",
            "SYSTEM_26",
            "SYSTEM_27",
            "SYSTEM_28",
            "SYSTEM_29",
            "TRIXIE",
            "CANADIAN",
            "HEINZ",
            "SUPER_HEINZ",
            "PATENT",
            "LUCKY_15",
            "LUCKY_31",
            "LUCKY_63",
            "LUCKY_127",
            "YANKEE",
            "GOLIATH",
            "SUPER_GOLIATH",
            "WINCAST",
            "ANYTIME_WINCAST",
            "SCORECAST",
            "ANYTIME_SCORECAST",
            "TIMECAST",
            "STRAIGHT_FORECAST",
            "DUAL_FORECAST",
            "REVERSE_FORECAST",
            "COMBINATION_FORECAST",
            "TRICAST",
            "DUAL_TRICAST",
            "REVERSE_TRICAST",
            "COMBINATION_TRICAST",
            "BANKER_2",
            "BANKER_3",
            "BANKER_4",
            "BANKER_5",
            "BANKER_6",
            "BANKER_7",
            "BANKER_8",
            "BANKER_9",
            "MULTIWAY_MULTIPLE",
            "MULTIWAY_1",
            "MULTIWAY_2",
            "MULTIWAY_3",
            "MULTIWAY_4",
            "MULTIWAY_5",
            "MULTIWAY_6",
            "MULTIWAY_7",
            "MULTIWAY_8",
            "MULTIWAY_9",
            "MULTIWAY_BANKER_2",
            "MULTIWAY_BANKER_3",
            "MULTIWAY_BANKER_4",
            "MULTIWAY_BANKER_5",
            "MULTIWAY_BANKER_6",
            "MULTIWAY_BANKER_7",
            "MULTIWAY_BANKER_8",
            "MULTIWAY_BANKER_9"
          ]
        },
        "cashOutEnabled": {
          "type": "boolean",
          "xml": {
            "name": "CashOutEnabled"
          }
        },
        "combinations": {
          "type": "string",
          "xml": {
            "name": "Combinations"
          }
        },
        "events": {
          "xml": {
            "name": "Events"
          },
          "$ref": "#/definitions/ArrayOfLotterySBEvent"
        },
        "gameStateIDF": {
          "type": "string",
          "xml": {
            "name": "GameStateIDF"
          }
        },
        "multiFactor": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "MultiFactor"
          }
        },
        "participation": {
          "xml": {
            "name": "Participation"
          },
          "$ref": "#/definitions/LotteryParticipation"
        },
        "potencialReturn": {
          "type": "number",
          "xml": {
            "name": "PotencialReturn"
          }
        },
        "pricePerCombination": {
          "type": "number",
          "xml": {
            "name": "PricePerCombination"
          }
        },
        "requestMultiplier": {
          "type": "string",
          "xml": {
            "name": "RequestMultiplier"
          }
        },
        "taxOnStakeAmount": {
          "type": "number",
          "xml": {
            "name": "TaxOnStakeAmount"
          }
        },
        "winType": {
          "type": "string",
          "xml": {
            "name": "WinType"
          }
        },
        "sbbetTypeID": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LotteryTransaction": {
      "type": "object",
      "required": [
        "lotterTransactionTypeCode",
        "lotteryChannelCode",
        "lotteryTransactionIdentifier"
      ],
      "properties": {
        "lotterTransactionTypeCode": {
          "type": "string",
          "xml": {
            "name": "LotterTransactionTypeCode"
          }
        },
        "lotteryChannelCode": {
          "type": "string",
          "xml": {
            "name": "LotteryChannelCode"
          }
        },
        "lotteryTransactionIdentifier": {
          "type": "string",
          "xml": {
            "name": "LotteryTransactionIdentifier"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "Status"
          }
        },
        "transactionTime": {
          "type": "string",
          "xml": {
            "name": "TransactionTime"
          }
        },
        "uniqueCode": {
          "type": "string",
          "xml": {
            "name": "UniqueCode"
          }
        }
      }
    },
    "LotteryTransactionFee": {
      "type": "object",
      "properties": {
        "externalAffiliateCode": {
          "type": "string",
          "xml": {
            "name": "ExternalAffiliateCode"
          }
        },
        "externalHandlingFee": {
          "type": "number",
          "xml": {
            "name": "ExternalHandlingFee"
          }
        }
      }
    },
    "PlayerExternalPromotionData": {
      "type": "object",
      "properties": {
        "awardedDate": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "name": "AwardedDate"
          }
        },
        "description": {
          "type": "string",
          "xml": {
            "name": "Description"
          }
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "name": "ExpiryDate"
          }
        },
        "externalPromotionIdf": {
          "type": "string",
          "xml": {
            "name": "ExternalPromotionIdf"
          }
        },
        "licenseType": {
          "type": "string",
          "xml": {
            "name": "LicenseType"
          },
          "enum": [
            "NOT_DEFINED",
            "CASINO",
            "POKER",
            "SPORTSBOOK",
            "ALL",
            "POOLBETTING",
            "LOTTO",
            "SPORTSPOOL",
            "BETTING"
          ]
        },
        "name": {
          "type": "string",
          "xml": {
            "name": "Name"
          }
        },
        "outputType": {
          "xml": {
            "name": "OutputType"
          },
          "$ref": "#/definitions/ExternalPromotionType"
        },
        "outputValue": {
          "type": "string",
          "xml": {
            "name": "OutputValue"
          }
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "PromotionId"
          }
        },
        "source": {
          "type": "string",
          "xml": {
            "name": "Source"
          }
        },
        "status": {
          "type": "string",
          "xml": {
            "name": "Status"
          },
          "enum": [
            "NOT_DEFINED",
            "AVAILABLE",
            "USED",
            "EXPIRED"
          ]
        },
        "statusId": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "StatusId"
          }
        },
        "usedDate": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "name": "UsedDate"
          }
        },
        "clientStatId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "ClientStatId"
          }
        },
        "gamePlayId": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "name": "GamePlayId"
          }
        }
      }
    },
    "PoolColumn": {
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "xml": {
            "name": "Events"
          },
          "$ref": "#/definitions/ArrayOfPoolProgramEvent"
        }
      }
    },
    "PoolGame": {
      "type": "object",
      "required": [
        "columns",
        "gameStateIDF"
      ],
      "properties": {
        "columns": {
          "xml": {
            "name": "Columns"
          },
          "$ref": "#/definitions/ArrayOfPoolColumn"
        },
        "gameStateIDF": {
          "type": "string",
          "xml": {
            "name": "GameStateIDF"
          }
        },
        "participations": {
          "xml": {
            "name": "Participations"
          },
          "$ref": "#/definitions/ArrayOfLotteryParticipation"
        }
      }
    },
    "PoolProgramEvent": {
      "type": "object",
      "properties": {
        "eventIDF": {
          "type": "string",
          "xml": {
            "name": "EventIDF"
          }
        },
        "orderNo": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "name": "OrderNo"
          }
        },
        "outcomeCodes": {
          "xml": {
            "name": "OutcomeCodes"
          },
          "$ref": "#/definitions/ArrayOfstring"
        }
      }
    },
    "CreditType": {
      "type": "object",
      "required": [
        "organization"
      ],
      "properties": {
        "organization": {
          "description": "the organisation",
          "$ref": "#/definitions/Organization"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the credit Type"
        },
        "description": {
          "type": "string",
          "description": "The description of the credit Type"
        }
      },
      "description": "The type of a credit"
    },
    "Organization": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "a unique id of the organisation"
        }
      }
    },
    "Participation": {
      "type": "object",
      "required": [
        "participationStatus",
        "prizes"
      ],
      "properties": {
        "participationId": {
          "type": "integer",
          "format": "int64",
          "description": "A unique id for the participation"
        },
        "participationStatus": {
          "description": "The status of the participation",
          "$ref": "#/definitions/ParticipationStatus"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The draw number"
        },
        "prizes": {
          "type": "array",
          "description": "The list of the prizes",
          "items": {
            "$ref": "#/definitions/Prize"
          }
        }
      },
      "description": "The participation object"
    },
    "ParticipationStatus": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The participation status"
        }
      },
      "description": "The participation status"
    },
    "Prize": {
      "type": "object",
      "required": [
        "currency",
        "gross",
        "net",
        "refund"
      ],
      "properties": {
        "winningId": {
          "type": "integer",
          "format": "int64",
          "description": "The winning id"
        },
        "creditType": {
          "description": "The credit type",
          "$ref": "#/definitions/CreditType"
        },
        "gross": {
          "type": "integer",
          "format": "int64",
          "description": "The gross amount"
        },
        "net": {
          "type": "integer",
          "format": "int64",
          "description": "The net amount"
        },
        "refund": {
          "type": "integer",
          "format": "int64",
          "description": "The refund amount"
        },
        "tax": {
          "type": "integer",
          "format": "int64",
          "description": "The tax amount"
        },
        "bonus": {
          "type": "integer",
          "format": "int64",
          "description": "The bonus amount"
        },
        "other": {
          "type": "integer",
          "format": "int64",
          "description": "The generic amount"
        },
        "currency": {
          "type": "string",
          "description": "The currency of the amount"
        },
        "specialPrize": {
          "description": "The special prize for passive games",
          "$ref": "#/definitions/SpecialPrize"
        },
        "approvalStatus": {
          "description": "The approval status",
          "$ref": "#/definitions/The prize approval status"
        },
        "approvalLastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The last update of the approval"
        },
        "prizeStatus": {
          "description": "The prize status",
          "$ref": "#/definitions/The prize status"
        }
      },
      "description": "The prize request"
    },
    "Settlement": {
      "type": "object",
      "required": [
        "participation",
        "transactionRequest"
      ],
      "properties": {
        "betSlipId": {
          "type": "string",
          "description": "The betSlip identifier (Only for Amelco)"
        },
        "secondaryBetSlipId": {
          "type": "string",
          "description": "The second betSlip identifier (Only for Amelco)"
        },
        "betType": {
          "type": "string",
          "description": "The type of the bet"
        },
        "gameCategory": {
          "type": "string",
          "description": "The gameCategory"
        },
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the game"
        },
        "participation": {
          "description": "The participation object",
          "$ref": "#/definitions/Participation"
        },
        "selections": {
          "type": "array",
          "description": "The selection object",
          "items": {
            "$ref": "#/definitions/SelectionModel"
          }
        },
        "transactionRequest": {
          "description": "The transaction request",
          "$ref": "#/definitions/TransactionRequest"
        },
        "notifyPlayer": {
          "type": "boolean",
          "description": "If player wants to be notified"
        },
        "identicalBetRef": {
          "type": "string",
          "description": "This identifies that this bet is part of other identical bets and value is the reference of all identical bets."
        },
        "bonusMoneyAmount": {
          "type": "integer",
          "format": "int64",
          "description": "The sum of bet part stakes that have odds greater than bonusRule value"
        }
      },
      "description": "Update winnings request"
    },
    "SpecialPrize": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the specialPrize"
        },
        "description": {
          "type": "string",
          "description": "The description of the specialPrize"
        }
      },
      "description": "The special prize for passive games"
    },
    "The prize approval status": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "The prize status": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "the status code"
        }
      }
    },
    "BetNegotiationFeedback": {
      "type": "object",
      "required": [
        "playerId"
      ],
      "properties": {
        "totalStake": {
          "type": "integer",
          "format": "int64",
          "description": "Total selection stake. It is mandatory only for ACCEPTED status."
        },
        "betId": {
          "type": "string",
          "description": "The id of the bet. It is mandatory only for ACCEPTED status."
        },
        "betSlipId": {
          "type": "string",
          "description": "The id of the betslip. It is mandatory only for ACCEPTED status."
        },
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "The player id"
        },
        "transactionTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date the transaction occurred"
        },
        "bonusStake": {
          "type": "integer",
          "format": "int64",
          "description": "Freebet stake in cents. Used only in ACCEPTED status."
        },
        "totalDiscountStake": {
          "type": "integer",
          "format": "int64",
          "description": "Discount stake in cents. Used only in ACCEPTED status."
        }
      },
      "description": "The trader's response"
    },
    "PlayerLoginResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64",
          "description": "the client id"
        },
        "lastLoginDate": {
          "type": "string",
          "format": "date-time",
          "description": "the last login date"
        },
        "playerRegistrationSts": {
          "type": "string",
          "description": "the player registration status"
        },
        "sessionToken": {
          "type": "string",
          "description": "the generated authorization token"
        },
        "cardStatus": {
          "type": "string",
          "description": "the card status"
        },
        "cardExpirationDate": {
          "type": "integer",
          "format": "int64",
          "description": "the card expiration date(epoch)"
        },
        "termsStatus": {
          "type": "string",
          "description": "the client's terms and condition status(OK, OPT_PENDING, REQ_PENDING, UNDEFINED, REQUIRED)"
        }
      },
      "description": "The player login response"
    },
    "PlayerLoginRequest": {
      "type": "object",
      "required": [
        "ip",
        "username"
      ],
      "properties": {
        "username": {
          "type": "string",
          "description": "Player username"
        },
        "password": {
          "type": "string",
          "description": "Player password"
        },
        "pin": {
          "type": "string",
          "description": "Player pin"
        },
        "ip": {
          "type": "string",
          "description": "Player IP"
        }
      },
      "description": "The player login request"
    },
    "AddOn": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32",
          "description": "The columns of the addOn"
        },
        "cost": {
          "type": "number",
          "description": "The columns of the addOn"
        },
        "gameTypeId": {
          "type": "integer",
          "format": "int32",
          "description": "The game type Id of the addOn"
        },
        "handlingFee": {
          "type": "number",
          "description": "The handling fee per dbg"
        }
      },
      "description": "The addOn object"
    },
    "BoardModel": {
      "type": "object",
      "required": [
        "boardId",
        "panels"
      ],
      "properties": {
        "betType": {
          "type": "integer",
          "format": "int32",
          "description": "The bet type option depend on the game. e.g Straight, Box, Front-2, …, for Pick-x)"
        },
        "boardId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the board"
        },
        "multipliers": {
          "type": "array",
          "description": "The multipliers per board",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "options": {
          "type": "array",
          "description": "Special options depend on the game, in board level",
          "items": {
            "type": "string"
          }
        },
        "panels": {
          "type": "array",
          "description": "The panels that this board holds",
          "items": {
            "$ref": "#/definitions/PanelModel"
          }
        },
        "quickPick": {
          "type": "boolean",
          "description": "The quick pick flag for this particular board"
        },
        "systemId": {
          "type": "integer",
          "format": "int32",
          "description": "The system identifier"
        },
        "extendedBetting": {
          "description": "The extended betting object",
          "$ref": "#/definitions/ExtendedBettingModel"
        }
      },
      "description": "The board model"
    },
    "DBGWagerModel": {
      "type": "object",
      "required": [
        "boards",
        "gameId",
        "multipliers"
      ],
      "properties": {
        "boards": {
          "type": "array",
          "description": "data related to the player prognostic selections",
          "items": {
            "$ref": "#/definitions/BoardModel"
          }
        },
        "columns": {
          "type": "integer",
          "format": "int32",
          "description": "the produced number of columns per participated draw"
        },
        "cost": {
          "type": "number",
          "description": "The wager's total cost"
        },
        "handlingFee": {
          "type": "number",
          "description": "The handling fee per dbg"
        },
        "creationTime": {
          "type": "integer",
          "format": "int64",
          "description": "The time that the wager was played"
        },
        "discount": {
          "type": "number",
          "description": "The amount that has been substracted from the cost when that wager participated in promotion"
        },
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the game"
        },
        "multipliers": {
          "type": "array",
          "description": "The list of multipliers",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "options": {
          "type": "array",
          "description": "The special options depend on the game, in wager level",
          "items": {
            "type": "string"
          }
        },
        "participatingDraws": {
          "description": "data related to the wager participated draws",
          "$ref": "#/definitions/ParticipatingDrawModel"
        },
        "quickPick": {
          "type": "boolean",
          "description": "The quickPick flag"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Whether the dbg is the primary game played"
        },
        "status": {
          "type": "string",
          "description": "The status of the wager"
        },
        "teamShares": {
          "type": "integer",
          "format": "int32",
          "description": "The teamshares"
        },
        "addOn": {
          "type": "array",
          "description": "The add on option",
          "items": {
            "$ref": "#/definitions/AddOn"
          }
        },
        "blockStatus": {
          "type": "string",
          "description": "The block status of the coupon"
        },
        "pilot": {
          "type": "boolean",
          "description": "flag indicating if the game is in pilot mode"
        }
      },
      "description": "The Draw based game wager model"
    },
    "DatePatternModel": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the specific draw"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of this draw"
        }
      },
      "description": "The date patern model"
    },
    "DayPatternModel": {
      "type": "object",
      "properties": {
        "day": {
          "type": "string",
          "description": "The day of the specific draw"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of this draw"
        }
      },
      "description": "The day pattern model"
    },
    "ExtendedBettingModel": {
      "type": "object",
      "properties": {
        "betTypes": {
          "type": "array",
          "description": "Additional bet types",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "systems": {
          "type": "array",
          "description": "Systems",
          "items": {
            "$ref": "#/definitions/ExtendedSystemsModel"
          }
        }
      },
      "description": "The extended betting model model"
    },
    "ExtendedSystemsModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system id"
        },
        "type": {
          "type": "string",
          "description": "The system type"
        },
        "index": {
          "type": "array",
          "description": "The system indices",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "The extended systems model"
    },
    "FavoriteV2": {
      "type": "object",
      "properties": {
        "favoriteIdf": {
          "type": "integer",
          "format": "int64",
          "description": "the id of the favorite wager used during play"
        },
        "favoriteDescription": {
          "type": "string",
          "description": "the description in case of favorite wager"
        },
        "favoriteLastPlayed": {
          "type": "string",
          "format": "date-time",
          "description": "the date that the favorite last played"
        },
        "barcode": {
          "type": "string",
          "description": "a unique internal code of the wager"
        },
        "dbg": {
          "type": "array",
          "description": "The list of favorite dbg",
          "items": {
            "$ref": "#/definitions/DBGWagerModel"
          }
        }
      },
      "description": "The favorite wager information"
    },
    "FavoritesV2": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "The start date"
        },
        "endDate": {
          "type": "string",
          "description": "The end date"
        },
        "pagination": {
          "description": "The pagination object",
          "$ref": "#/definitions/Pagination"
        },
        "filterCriteria": {
          "type": "array",
          "description": "The filter criteria",
          "items": {
            "$ref": "#/definitions/FilterCriteria"
          }
        },
        "orderCriteria": {
          "type": "array",
          "description": "The order criteria",
          "items": {
            "$ref": "#/definitions/Order Criteria"
          }
        },
        "lotteryGameNumbers": {
          "type": "array",
          "description": "The list of favorite numbers per game",
          "items": {
            "$ref": "#/definitions/LotteryFavouriteGameNumber"
          }
        },
        "lotteryNumbers": {
          "type": "array",
          "description": "The list of favorite dbgs",
          "items": {
            "$ref": "#/definitions/LotteryFavouriteNumber"
          }
        },
        "wagerRequests": {
          "type": "array",
          "description": "The list of favorite wagerRequests",
          "items": {
            "$ref": "#/definitions/FavoriteV2"
          }
        }
      },
      "description": "The player's favorites information"
    },
    "PanelModel": {
      "type": "object",
      "required": [
        "requested",
        "selection"
      ],
      "properties": {
        "options": {
          "type": "array",
          "description": "The special options depend on the game, in wager level (for future use)",
          "items": {
            "type": "string"
          }
        },
        "quickPick": {
          "type": "boolean",
          "description": "The quick pick flag for this particular panel"
        },
        "requested": {
          "type": "integer",
          "format": "int32",
          "description": "This value should be equally to the draw numbers that has configured in the Game Parameters"
        },
        "selection": {
          "type": "array",
          "description": "The player selected numbers. E.g. 1, 5, 8, 30, 35, 45 for a Lotto 6/49",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "QPSelections": {
          "type": "integer",
          "format": "int32",
          "description": "The quickpick selections"
        }
      },
      "description": "The panel model"
    },
    "ParticipatingDrawModel": {
      "type": "object",
      "required": [
        "multipleDraws",
        "playedDraw"
      ],
      "properties": {
        "datePattern": {
          "type": "array",
          "description": "(for future use)",
          "items": {
            "$ref": "#/definitions/DatePatternModel"
          }
        },
        "dayPattern": {
          "type": "array",
          "description": "(for future use)",
          "items": {
            "$ref": "#/definitions/DayPatternModel"
          }
        },
        "drawOffsets": {
          "type": "array",
          "description": "The incoming parameter: Advance draw index, specifically you can use \"drawOffsets\" : [x]  , where x is the offset from the active draw (Advance Draws)",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "draws": {
          "type": "array",
          "description": "The outcome parameter: it holds the actual participated draws",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "firstDraw": {
          "type": "integer",
          "format": "int32",
          "description": "The outcome parameter: it holds the first participated draw"
        },
        "firstDrawTime": {
          "type": "string",
          "description": "The outcome parameter: it holds the first participated draw date"
        },
        "lastDraw": {
          "type": "integer",
          "format": "int32",
          "description": "The outcome parameter: it holds the last participated draw"
        },
        "lastDrawTime": {
          "type": "string",
          "description": "The outcome parameter: it holds the last participated draw date"
        },
        "multipleDraws": {
          "type": "integer",
          "format": "int32",
          "description": "The incoming parameter: it hold the number of consecutive draws"
        },
        "playedDraw": {
          "type": "integer",
          "format": "int64",
          "description": "The active draw at the time the wager was played"
        }
      },
      "description": "The participation draw model"
    },
    "AutoCashoutModel": {
      "type": "object",
      "properties": {
        "ascOdds": {
          "type": "number",
          "format": "double",
          "description": "This will be Odds that are Greater than the odds of the bet"
        },
        "descOdds": {
          "type": "number",
          "format": "double",
          "description": "This will be Odds that are Less than the odds of the bet"
        },
        "stopLoss": {
          "type": "number",
          "format": "double",
          "description": "This will be a value less than the stake of the bet"
        },
        "stopWin": {
          "type": "number",
          "format": "double",
          "description": "This will be a Value that is Greater than the stake of the bet"
        }
      },
      "description": "The autocashout model"
    },
    "BetExtended": {
      "type": "object",
      "required": [
        "selections"
      ],
      "properties": {
        "accountBonusId": {
          "type": "integer",
          "format": "int64",
          "description": "The total price of the bet"
        },
        "autoCashout": {
          "description": "The total price of the bet",
          "$ref": "#/definitions/AutoCashoutModel"
        },
        "barcode": {
          "type": "string",
          "description": "barcode for this bet"
        },
        "betId": {
          "type": "integer",
          "format": "int64",
          "description": "The bet id"
        },
        "betNo": {
          "type": "integer",
          "format": "int32",
          "description": "The bet number"
        },
        "betTime": {
          "type": "integer",
          "format": "int64",
          "description": "Datetime of bet"
        },
        "bonusCodeAwarded": {
          "type": "string",
          "description": "The bonus code awarded. Server side generated"
        },
        "bonusCodeRulesOfUse": {
          "type": "string",
          "description": "bonusCodeRulesOfUse"
        },
        "bonusStake": {
          "$ref": "#/definitions/StakeModel"
        },
        "bonusWinnings": {
          "type": "number",
          "description": "For bets in an ACCEPTED state, this will be the potential bonus winnings if the bet wins, for WINNING or SETTLED bets it will be the actual bonus winnings"
        },
        "cashOut": {
          "type": "boolean",
          "description": "In case this bet can be cashed out"
        },
        "channelId": {
          "type": "integer",
          "format": "int64",
          "description": "Channel ID that this bet part was played"
        },
        "checkOdds": {
          "type": "integer",
          "format": "int32",
          "description": "Check type of the additional odds data. The system will reject a coupons when: 1. a selected forecast has lower current Odds or different current Handicap / UO value than these the player has seen 2. a selected forecast has different current Odds / Handicap / UO value than these the player has seen 3. a selected forecast has different Handicap / UO value than these the player has seen"
        },
        "childBetId": {
          "type": "string",
          "description": "The child bet id. This should exist after an Edit or Patially cashout bet"
        },
        "currentlyInplay": {
          "type": "boolean"
        },
        "discountBonusAmount": {
          "type": "number",
          "description": "discountBonusAmount"
        },
        "discountBonusId": {
          "type": "integer",
          "format": "int32",
          "description": "discountBonusId"
        },
        "displayStatus": {
          "type": "string",
          "description": "Status of the part bet"
        },
        "extBetId": {
          "type": "string",
          "description": "External Bet ID"
        },
        "freeBet": {
          "type": "boolean",
          "description": "Free bet indicator"
        },
        "freeBetBonusAmount": {
          "$ref": "#/definitions/FreeBetBonusAmountModel"
        },
        "limitedStake": {
          "type": "number",
          "description": "When bet limit or stake limit validation fails, this contains the maximum stake the user can enter, in their currency"
        },
        "liveBet": {
          "type": "boolean",
          "description": "In case this is live bet or not"
        },
        "originalCashoutBetId": {
          "type": "integer",
          "format": "int64",
          "description": "If this bet is a child bet from partial cashout, this betId is its parent"
        },
        "overAskId": {
          "type": "string",
          "description": "Over/Ask identification number"
        },
        "parentBetId": {
          "type": "string",
          "description": "The parent bet id. This should exist after an Edit or Patially cashout bet"
        },
        "partialCashoutBetIds": {
          "type": "array",
          "description": "If this bet is a parent of partial cashout those betIds are their children",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "payout": {
          "type": "number",
          "description": "Settled winning amount"
        },
        "potentialBonusWinnings": {
          "type": "number"
        },
        "potentialPayout": {
          "type": "number",
          "description": "The potential payout"
        },
        "promoDescription": {
          "type": "string",
          "description": "The description of the promotion used"
        },
        "referralPath": {
          "type": "string",
          "description": "Canvas might have this field as registration source"
        },
        "refund": {
          "type": "number",
          "description": "refund"
        },
        "rejectionReason": {
          "type": "string",
          "description": "The reason why a bet has been rejected"
        },
        "selections": {
          "type": "array",
          "description": "The bet selections",
          "items": {
            "$ref": "#/definitions/SelectionModel"
          }
        },
        "stake": {
          "description": "The stake amount",
          "$ref": "#/definitions/StakeModel"
        },
        "status": {
          "type": "string",
          "description": "Status of the part bet, e.g. ACCEPTED, REJECTED, VOID"
        },
        "system": {
          "description": "The selected bet system",
          "$ref": "#/definitions/SystemModel"
        },
        "taxOnReturnsPcnt": {
          "type": "number",
          "description": "Taxation percentage on returns amount (on winnings amount)"
        },
        "taxOnReturnsAmount": {
          "type": "number",
          "format": "double",
          "description": "Taxation on returns amount (on winnings amount)"
        },
        "totalCost": {
          "type": "number",
          "description": "Bet’s total cost that the player have pay"
        },
        "totalDiscountStake": {
          "type": "number",
          "description": "The discounted bet stake. Server side generated"
        },
        "totalOdds": {
          "type": "number",
          "format": "double",
          "description": "Total odds of the specific bet part"
        },
        "totalPrice": {
          "type": "number",
          "description": "The total price of the bet"
        },
        "totalPriceAmerican": {
          "type": "number",
          "description": "The american total price of the bet"
        },
        "totalStake": {
          "type": "number",
          "description": "Total selection stake"
        },
        "transactionId": {
          "type": "integer",
          "format": "int64",
          "description": "The transaction id"
        },
        "voucherCode": {
          "type": "string",
          "description": "The bonus code awarded. Server side generated"
        },
        "voucherCodeUsed": {
          "type": "string",
          "description": "voucherCodeUsed"
        },
        "winType": {
          "type": "string",
          "description": "Win bet data type,WIN, PLACE, EACH_WAY"
        },
        "retailerId": {
          "type": "string",
          "description": "retailerId"
        },
        "paidByRetailer": {
          "type": "string",
          "description": "paidByRetailer"
        },
        "paidTime": {
          "type": "integer",
          "format": "int64",
          "description": "paidTime"
        },
        "buildABet": {
          "type": "boolean",
          "description": "Indicates that bet is created by bet builder."
        },
        "payoutPerWonEvent": {
          "type": "array",
          "description": "The payout per number of won events. Applicable for system bets.",
          "items": {
            "$ref": "#/definitions/PayoutPerWonEvent"
          }
        },
        "systemDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemDetails"
          }
        },
        "accountId": {
          "type": "integer",
          "format": "int64",
          "description": "Player's internal account identification number"
        },
        "extAccountId": {
          "type": "string",
          "description": "Player's external account identification number"
        },
        "accountPath": {
          "type": "string",
          "description": "Player's account path"
        },
        "clickThruSource": {
          "type": "string",
          "description": "Identifies a third party site when the bet selection was chosen"
        },
        "extBetVersion": {
          "type": "string",
          "description": "External betting version"
        },
        "capturedStake": {
          "description": "Captured stake",
          "$ref": "#/definitions/StakeModel"
        },
        "oddsType": {
          "type": "string",
          "description": "Odds type",
          "enum": [
            "DECIMAL",
            "FRACTIONAL",
            "MONEY_LINE"
          ]
        },
        "taxOnStakePcnt": {
          "type": "number",
          "description": "Taxation percentage on stake amount"
        },
        "taxOnStakeAmount": {
          "type": "number",
          "description": "Taxation on stake amount"
        },
        "voidDetails": {
          "type": "string",
          "description": "Void detailed desription"
        },
        "settlementType": {
          "type": "string",
          "description": "It is sent only in case of closed bets (not for open bets)",
          "enum": [
            "CASH_OUT",
            "RESULTING"
          ]
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product identification number"
        },
        "betRiskGroup": {
          "type": "string",
          "description": "Bet risk group:SYSTEM_BET,PRE_MATCH_MULTIPLE,PRE_MATCH_SINGLE"
        },
        "masterBetId": {
          "type": "string",
          "description": "Master Bet ID (has value if it is a combination of a specific BetId)"
        },
        "betSlipId": {
          "type": "string",
          "description": "Betslip identification number that the system gives to the specific bet"
        },
        "betStatus": {
          "type": "string",
          "description": "Status of the part bet",
          "enum": [
            "ACCEPTED",
            "REJECTED",
            "VOID",
            "SETTLED"
          ]
        },
        "resulted": {
          "type": "boolean",
          "description": "Is selection resulted"
        },
        "winnings": {
          "type": "number",
          "description": "The amount was paid less or more than the play bet amount"
        },
        "regulatorTicket": {
          "type": "string",
          "description": "Regulator ticket number"
        },
        "site": {
          "type": "string",
          "description": "Site definition"
        },
        "additionalProperties": {
          "type": "object",
          "description": "Additional custom properties that do not fit in the model. Allowed keys: TEMPLATE_ID, DRAW_IDS, MULTIDRAW, PAYOUT_INFO,\t\t\tBETSLIP_IDS",
          "additionalProperties": {
            "type": "object"
          }
        },
        "taxOnReturnsDetails": {
          "type": "array",
          "description": "Taxation on winnings amounts",
          "items": {
            "$ref": "#/definitions/TaxOnReturnDetails"
          }
        }
      },
      "description": "Contains extra information on a Bet"
    },
    "FreeBetBonusAmountModel": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "The free bet bonus amount"
        },
        "type": {
          "type": "string",
          "description": "The free bet bonus type"
        }
      },
      "description": "The free bet bonus model"
    },
    "MetadataModel": {
      "type": "object",
      "required": [
        "playerInfo",
        "trnsTime"
      ],
      "properties": {
        "playerInfo": {
          "description": "The player infos",
          "$ref": "#/definitions/PlayerInfoModel"
        },
        "promotionInfo": {
          "description": "The promotion info",
          "$ref": "#/definitions/PromotionInfoModel"
        },
        "trnsTime": {
          "type": "string",
          "description": "Transaction time in ISO 8601 format"
        }
      },
      "description": "The metadata model"
    },
    "OddDataModel": {
      "type": "object",
      "required": [
        "decimal"
      ],
      "properties": {
        "decimal": {
          "type": "number",
          "format": "double",
          "description": "Decimal odds of each selection. e.g. 2,60"
        },
        "fractional": {
          "type": "string",
          "description": "Fractional representation of odds. E.g. 8/5"
        }
      },
      "description": "The odd data model"
    },
    "PayoutPerWonEvent": {
      "type": "object",
      "properties": {
        "minPayout": {
          "type": "number",
          "format": "double"
        },
        "maxPayout": {
          "type": "number",
          "format": "double"
        },
        "nrOfEvents": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PlayerInfoModel": {
      "type": "object",
      "required": [
        "sessionToken"
      ],
      "properties": {
        "syndicateId": {
          "type": "string",
          "description": "The id of a group/syndicate bet"
        },
        "pin": {
          "type": "string",
          "description": "The pin of the player"
        },
        "playerId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the player"
        },
        "favoriteId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the favorite wager used during play"
        },
        "favoriteLastPlayed": {
          "type": "integer",
          "format": "int64",
          "description": "The date that the favorite last played"
        },
        "sessionToken": {
          "type": "string",
          "description": "The session token"
        },
        "subscriptionId": {
          "type": "string",
          "description": "The id of the subscription"
        },
        "verificationToken": {
          "type": "string",
          "description": "The two-factor authentication mtan verification token"
        }
      },
      "description": "The player info model"
    },
    "PromotionInfoModel": {
      "type": "object",
      "properties": {
        "optIn": {
          "type": "array",
          "description": "to optIn a list of promotion ids. The client selects which promotions will be evaluated (if they are optIn promotions)",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "outcomeId": {
          "type": "integer",
          "format": "int64",
          "description": "the outcome that is returned from the engine to the caller. A reference for the given promotion"
        },
        "promotionId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the promotion that generated the outcomeId"
        },
        "voucherCode": {
          "type": "string",
          "description": "a string literal placeholder for a voucher code"
        }
      },
      "description": "The promotion info model"
    },
    "SelectionModel": {
      "type": "object",
      "properties": {
        "banker": {
          "type": "boolean",
          "description": "The banker definition"
        },
        "eventId": {
          "type": "integer",
          "format": "int64",
          "description": "The event id"
        },
        "imarket": {
          "type": "integer",
          "format": "int64",
          "description": "The index market, -1:No i-market 0..19: i-market played position OR 0..127: Live Home Team Score when the forecast=724..729)"
        },
        "groupValue": {
          "type": "array",
          "description": "Mandatory for Iflex. 0: No group, 1..10 : groups A, B, C, D, AB, AC, AD, BC, BD, CD, 11..20: R-groups A, B, C, D, AB, AC, AD, BC, BD, CD, +100 : Banker selection",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "lines": {
          "type": "array",
          "description": "The Handicap/Under-Over value. Only IFlex will have 2 indexes: var0, var1",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "odds": {
          "description": "The odds data object",
          "$ref": "#/definitions/OddDataModel"
        },
        "partNo": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the selection. If there are 3 selections they should have 1,2,3 respectively"
        },
        "scores": {
          "type": "array",
          "description": "The match score. Indexed by team A score{0} & team B score {1}",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "selectionId": {
          "type": "string",
          "description": "The selection id. For Iflex will be MARK_CODE_EVENT_CODE"
        },
        "status": {
          "type": "string",
          "description": "The status of the selection, equivalent to the status of the BetPartPlacementResult"
        },
        "selectionName": {
          "type": "string",
          "description": "The selection name"
        },
        "marketName": {
          "type": "string",
          "description": "The market name"
        },
        "eventName": {
          "type": "string",
          "description": "The event name"
        },
        "eventTime": {
          "type": "integer",
          "format": "int64",
          "description": "The event kickoff time"
        },
        "resultType": {
          "type": "string",
          "description": "Result description of selection result: e.g NOT_SET,WIN,LOST"
        },
        "priceChangedAfterLockDate": {
          "type": "boolean",
          "description": "priceChangedAfterLockDate"
        },
        "inplay": {
          "type": "boolean",
          "description": "inplay"
        }
      },
      "description": "The selection model"
    },
    "SportsBookPlayModel": {
      "type": "object",
      "required": [
        "bets",
        "gameId"
      ],
      "properties": {
        "acceptOdds": {
          "type": "integer",
          "format": "int32",
          "description": "Accept odds types: 1 = Higher Odds, 2 = All, 3 = None, Only same odds"
        },
        "acceptPriceChange": {
          "type": "boolean",
          "description": "The accept price change"
        },
        "betSlipId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the betSlip"
        },
        "bets": {
          "type": "array",
          "description": "List of placed bets",
          "items": {
            "$ref": "#/definitions/BetExtended"
          }
        },
        "employeeId": {
          "type": "integer",
          "format": "int64",
          "description": "The id of the employee"
        },
        "freeBets": {
          "type": "array",
          "description": "The free bets",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the game"
        },
        "multifactor": {
          "type": "integer",
          "format": "int64",
          "description": "It defines the game cost. If it is 1 the cost would be 1*columns. If it is 2 the cost would be 2*columns"
        },
        "placedTime": {
          "type": "integer",
          "format": "int64",
          "description": "The placed time"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32",
          "description": "In response only, The total number of bets"
        },
        "sumOfStake": {
          "type": "number",
          "description": "The sum iStake"
        },
        "sumOfPayout": {
          "type": "number",
          "description": "The sumOfPayout"
        },
        "sumOfBonusWinnings": {
          "type": "number",
          "description": "The sumOfBonusWinnings"
        },
        "sumOfTotalCost": {
          "type": "number",
          "description": "The sumOfTotalCost"
        },
        "extBetslipId": {
          "type": "string",
          "description": "Used for undo bet request"
        }
      },
      "description": "The sportsbook request model"
    },
    "StakeModel": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Betting amount on each combination will be produced from those parts"
        },
        "currency": {
          "type": "string",
          "description": "Description of the currency with letters e.g. \"GBP\""
        }
      },
      "description": "The stake model"
    },
    "SystemDetails": {
      "type": "object",
      "required": [
        "maxPayout",
        "minPayout",
        "numOfCombinations",
        "stakePerSystem",
        "systemId"
      ],
      "properties": {
        "systemId": {
          "type": "integer",
          "format": "int32",
          "description": "The system Id. 1 for single bet, 2 for doubles, 3 for triples etc"
        },
        "numOfCombinations": {
          "type": "integer",
          "format": "int64",
          "description": "The number of combinations (columns) that are created by the system"
        },
        "stakePerSystem": {
          "type": "number",
          "description": "The system's total stake"
        },
        "minPayout": {
          "type": "number",
          "description": "Win amount if you win the combination with the lowest odds"
        },
        "maxPayout": {
          "type": "number",
          "description": "Win amount if you win the combination with the highest odds"
        },
        "desc": {
          "type": "string",
          "description": "System description"
        },
        "totalPrice": {
          "type": "number",
          "description": "The system's odds"
        }
      }
    },
    "SystemModel": {
      "type": "object",
      "properties": {
        "systems": {
          "type": "array",
          "description": "The bet system multiplier. Only IFlex",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "type": {
          "type": "string",
          "description": "Betting data type:SINGLE, MULTIPLE, DOUBLE, SYSTEM_3, SYSTEM_4, SYSTEM_5, SYSTEM_6, SYSTEM_7, SYSTEM_8, BANKER_2BANKER_3BANKER_4BANKER_5BANKER_6BANKER_7BANKER_8TRIXIECANADIAN, HEINZ, SUPER_HEINZ, PATENT, LUCKY_15, LUCKY_31, LUCKY_63, LUCKY_127YANKEE, GOLIATH, SUPER_GOLIATH, WINCAST, SCORECAST, ANYTIME_SCORECAST, TIMECAST, STRAIGHT_FORECAST, REVERSE_FORECAST, COMBINATION_FORECAST, TRICAST, COMBINATION_TRICAST"
        }
      },
      "description": "The system model"
    },
    "TaxOnReturnDetails": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "string",
          "description": "Tax on winnings percentage"
        },
        "value": {
          "type": "number",
          "description": "Tax on winnings value"
        }
      }
    },
    "WagerDataModel": {
      "type": "object",
      "properties": {
        "dbg": {
          "type": "array",
          "description": "array of draw based games",
          "items": {
            "$ref": "#/definitions/DBGWagerModel"
          }
        },
        "sportsbook": {
          "description": "The sportsbook game",
          "$ref": "#/definitions/SportsBookPlayModel"
        },
        "productId": {
          "type": "integer",
          "format": "int32",
          "description": "This id will be used to match bets from different verticals"
        }
      },
      "description": "One of the dbg,instant,spbt,sportsbook should be used depending on the played game"
    },
    "WagerPlayRequestModel": {
      "type": "object",
      "required": [
        "metadata",
        "wager"
      ],
      "properties": {
        "isecure": {
          "type": "array",
          "description": "The unique number that is printed on each ticket (retailer specific)",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "metadata": {
          "description": "The metadata model",
          "$ref": "#/definitions/MetadataModel"
        },
        "wager": {
          "description": "The wager data model",
          "$ref": "#/definitions/WagerDataModel"
        }
      },
      "description": "The play wager request model"
    }
  }
}