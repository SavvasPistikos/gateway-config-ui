{
  "swagger": "2.0",
  "info": {
    "description": "Below you can find the API documentation for operations of Information Store.",
    "version": "1.0",
    "title": "Information Store",
    "contact": {
      "name": "Intralot S.A. "
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Draw operations V3.0 (OPAP)"
    },
    {
      "name": "Draw operations V1.0"
    },
    {
      "name": "Draw operations V2.0"
    },
    {
      "name": "Draw operations V2.1"
    },
    {
      "name": "Draw operations V3.0"
    },
    {
      "name": "Draw operations V3.1"
    },
    {
      "name": "Draw update operations V1.0"
    },
    {
      "name": "Draw update operations V2.0"
    },
    {
      "name": "Draw update operations V3.0"
    },
    {
      "name": "Highest Prizes operations V1.0"
    },
    {
      "name": "Game operations V1.0 (OPAP)"
    },
    {
      "name": "Game operations V2.0 (OPAP)"
    },
    {
      "name": "Game operations V1.0"
    },
    {
      "name": "Sample subscriber operations V1.0"
    },
    {
      "name": "Provider operations"
    },
    {
      "name": "Retailer operations"
    },
    {
      "name": "Entity state operations"
    },
    {
      "name": "Game statistics Operations V1.0"
    },
    {
      "name": "Subscriber operations"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/opap/v3.0/draws/{gameId}/visual-draw/{visualDraw}": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get draw for a game by visual draw number",
        "description": "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId": "getDrawForGameByVisualDrawOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "visualDraw",
            "in": "path",
            "description": "Visual draw number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "completed",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/{drawId}": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get draw",
        "description": "Get draw for a game by draw id",
        "operationId": "getDrawForGameOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "completed",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}/draw-id": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get draw ids for a game by date range",
        "description": "Get draw ids for a game by date range.",
        "operationId": "getDrawIdsForGameByDateOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "completed",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get draws for a game by draw id range",
        "description": "Get draws for a game using a draw number range.",
        "operationId": "getDrawsForGameOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDrawId",
            "in": "path",
            "description": "The start draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "path",
            "description": "The end draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "completed",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 180,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/upcoming/{limit}": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get upcoming draws for a game",
        "description": "Get upcoming(future) draws for a game and optionally the active one. By default the active draw is included in the response if it exists.",
        "operationId": "getUpcomingDrawsOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3Variation"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/active": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get the active draw for a game",
        "description": "Get the active draw for a game",
        "operationId": "getActiveDrawForGameOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get draws for a game by date range",
        "description": "Get draws for a game by date range.",
        "operationId": "getDrawsForGameByDateOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "completed",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 180,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/active": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get active draws",
        "description": "Get all active draws for all games",
        "operationId": "getActiveDrawsOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 180,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/last-result-and-active": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get the last draw with results or pending results and the active draw for a game.",
        "description": "Get the last draw with results or pending results and the active draw for a game. includeAnimation parameter can be used to force the retrieval of animation for the last resulted draw.",
        "operationId": "getLastAndActiveDrawsOPAP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastResultDrawAndActiveV3Variation"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v3.0/draws/{gameId}/last/{limit}": {
      "get": {
        "tags": [
          "Draw operations V3.0 (OPAP)"
        ],
        "summary": "Get last draws for a game",
        "description": "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId": "getLastDrawsOPAP_3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3Variation"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/draws/{gameStateId}/{drawNumber}/results": {
      "get": {
        "tags": [
          "Draw operations V1.0"
        ],
        "summary": "Get results for a draw by draw number",
        "description": "Get draw results information for a specific draw number.",
        "operationId": "getDrawResultsForDrawNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameStateId",
            "in": "path",
            "description": "The game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawNumber",
            "in": "path",
            "description": "Draw number to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV1"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "401": {
            "description": "AUTHENTICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v1.0/draws/{gameStateId}/{drawNumber}/prizes": {
      "get": {
        "tags": [
          "Draw operations V1.0"
        ],
        "summary": "Get Prize Categories",
        "description": "Get the prize categories for a specific game and draw, as a list of <i>'DrawResult'</i> objects.",
        "operationId": "getPrizeCategories",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "gameStateId",
            "in": "path",
            "description": "The game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawNumber",
            "in": "path",
            "description": "The draw number to search the prizes for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PrizeCategoryV1"
              }
            }
          }
        }
      }
    },
    "/v1.0/draws/{gameStateId}/{drawNumber}/draw": {
      "get": {
        "tags": [
          "Draw operations V1.0"
        ],
        "summary": "Get draw",
        "description": "Get the draw information for a specific game, for a specific number",
        "operationId": "getDraw",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameStateId",
            "in": "path",
            "description": "The game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawNumber",
            "in": "path",
            "description": "Draw number to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DrawV1"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/upcoming/{limit}": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get upcoming draws for a game",
        "description": "Get upcoming draws for a game. By default the active draw is included in the response if it exists.",
        "operationId": "getUpcomingDrawsV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV2"
              }
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/draw-date/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get draws for a game by date range",
        "description": "Get draws for a game by date range.",
        "operationId": "getDrawsForGameByDateV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The fromDate date in UTC in milliseconds",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The toDate date in UTC in milliseconds",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/active": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get the active draw for a game",
        "description": "Get the active draw for a game",
        "operationId": "getActiveDrawForGameV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV2"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get draws for a game by draw id range",
        "description": "Get draws for a game using a draw number range.",
        "operationId": "getDrawsForGameV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDrawId",
            "in": "path",
            "description": "The start draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "path",
            "description": "The end draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/visual-draw/{visualDraw}": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get draw for a game by visual draw number",
        "description": "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId": "getDrawForGameByVisualDrawV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "visualDraw",
            "in": "path",
            "description": "Visual draw number",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/last/{limit}": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get last draws for a game",
        "description": "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId": "getLastDrawsV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default all non-active and non-future draws are included.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV2"
              }
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/active": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get active draws",
        "description": "Get all active draws for all games",
        "operationId": "getActiveDrawsV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/{drawId}": {
      "get": {
        "tags": [
          "Draw operations V2.0"
        ],
        "summary": "Get draw",
        "description": "Get draw for a game by draw id",
        "operationId": "getDrawForGameV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV2"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Draw update operations V2.0"
        ],
        "summary": "Register or update a draw",
        "description": "",
        "operationId": "registerOrUpdateV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "description": "State identifier used for idempotency",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "migration",
            "in": "header",
            "description": "Migration flag (will not trigger state insertion)",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InfoStoreDrawUpdateRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfoStoreDrawV2DTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/draw-date/{fromDate}/{toDate}/draw-id": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get draw ids for a game by date range",
        "description": "Get draw ids for a game by date range.",
        "operationId": "getDrawIdsForGameByDateV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/visual-draw/{visualDraw}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get draw for a game by visual draw number",
        "description": "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId": "getDrawForGameByVisualDrawV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "visualDraw",
            "in": "path",
            "description": "Visual draw number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/upcoming/{limit}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get upcoming draws for a game",
        "description": "Get upcoming(future) draws for a game and optionally the active one. By default the active draw is included in the response if it exists.",
        "operationId": "getUpcomingDrawsV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV2_1"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/draw-time/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get draws for a game by Date and time range",
        "description": "Get draws for a game by Date and time range.",
        "operationId": "getDrawsForGameByTimeV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be Timestamp in milliseconds format.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in Timestamp in milliseconds format.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get draws for a game by draw id range",
        "description": "Get draws for a game using a draw number range.",
        "operationId": "getDrawsForGameV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDrawId",
            "in": "path",
            "description": "The start draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "path",
            "description": "The end draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/active": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get active draws",
        "description": "Get all active draws for all games",
        "operationId": "getActiveDrawsV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "query",
            "description": "Specifies the game ids of the active draws",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/last-result-and-active": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get the last draw with results or pending results and the active draw for a game.",
        "description": "Get the last draw with results or pending results and the active draw for a game. includeAnimation parameter can be used to force the retrieval of animation for the last resulted draw.",
        "operationId": "getLastAndActiveDrawsV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastResultDrawAndActiveV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/active": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get the active draw for a game",
        "description": "Get the active draw for a game",
        "operationId": "getActiveDrawForGameV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/draw-date/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get draws for a game by date range",
        "description": "Get draws for a game by date range.",
        "operationId": "getDrawsForGameByDateV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/{drawId}/advertizedJackpot": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get advertized jackpot",
        "description": "Get advertized jackpot for each prize category of a game by draw id",
        "operationId": "getAdvertisedJackpotForGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdvJackpotDrawResultV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/{drawId}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get draw",
        "description": "Get draw for a game by draw id",
        "operationId": "getDrawForGameV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV2_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.1/draws/{gameId}/last/{limit}": {
      "get": {
        "tags": [
          "Draw operations V2.1"
        ],
        "summary": "Get last draws for a game",
        "description": "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId": "getLastDrawsV2_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV2_1"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/last-result-and-active": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get the last draw with results or pending results and the active draw for a game.",
        "description": "Get the last draw with results or pending results and the active draw for a game. includeAnimation parameter can be used to force the retrieval of animation for the last resulted draw.",
        "operationId": "getLastAndActiveDrawsV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastResultDrawAndActiveV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get draws for a game by date range",
        "description": "Get draws for a game by date range.",
        "operationId": "getDrawsForGameByDateV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/draw-date/{fromDate}/{toDate}/draw-id": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get draw ids for a game by date range",
        "description": "Get draw ids for a game by date range.",
        "operationId": "getDrawIdsForGameByDateV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get draws for a game by draw id range",
        "description": "Get draws for a game using a draw number range.",
        "operationId": "getDrawsForGameV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDrawId",
            "in": "path",
            "description": "The start draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "path",
            "description": "The end draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/visual-draw/{visualDraw}": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get draw for a game by visual draw number",
        "description": "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId": "getDrawForGameByVisualDrawV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "visualDraw",
            "in": "path",
            "description": "Visual draw number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/active": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get the active draw for a game",
        "description": "Get the active draw for a game",
        "operationId": "getActiveDrawForGameV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/upcoming/{limit}": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get upcoming draws for a game",
        "description": "Get upcoming(future) draws for a game and optionally the active one. By default the active draw is included in the response if it exists.",
        "operationId": "getUpcomingDrawsV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/{drawId}": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get draw",
        "description": "Get draw for a game by draw id",
        "operationId": "getDrawForGameV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default no status filter is applied.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      },
      "put": {
        "tags": [
          "Draw update operations V3.0"
        ],
        "summary": "Register or update a draw",
        "description": "",
        "operationId": "registerOrUpdateV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "description": "State identifier used for idempotency",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InfoStoreDrawUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfoStoreDrawV3DTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/last/{limit}": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get last draws for a game",
        "description": "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId": "getLastDrawsV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/active": {
      "get": {
        "tags": [
          "Draw operations V3.0"
        ],
        "summary": "Get active draws",
        "description": "Get all active draws for all games",
        "operationId": "getActiveDrawsV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/{drawId}/advertizedJackpot": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get advertised jackpot",
        "description": "Get advertised jackpot for each prize category of a game by draw id",
        "operationId": "getAdvertisedJackpotForGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AdvJackpotDrawResultV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}/winningNumbers": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get winning numbers for draws for a game by draw id range",
        "description": "Get winning numbers for draws for a game using a draw number range.",
        "operationId": "getDrawsByDrawRangeForWinningNumbersV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDrawId",
            "in": "path",
            "description": "The start draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "path",
            "description": "The end draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3_1WinningNumbersDTO"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/last/{limit}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get last draws for a game",
        "description": "Get last draws for a game. By default the active draw is included in the response if it exists.",
        "operationId": "getLastDrawsV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 100,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3_1"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/visual-draw/{visualDraw}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get draw for a game by visual draw number",
        "description": "Get draw for a game by visual draw number. The visual draw number depending on the game is either the same as the draw id, or is a number where the first four digits denote the year and the rest digits a yearly recurring draw number.",
        "operationId": "getDrawForGameByVisualDrawV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "visualDraw",
            "in": "path",
            "description": "Visual draw number",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/draw-time/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get draws for a game by Date and time range",
        "description": "Get draws for a game by Date and time range.",
        "operationId": "getDrawsForGameByTimeV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be Timestamp in milliseconds format.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in Timestamp in milliseconds format.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/{drawId}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get draw",
        "description": "Get draw for a game by draw id",
        "operationId": "getDrawForGameV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter. If the draw found is not in one of the specified statuses, the response will be empty. Multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/draw-date/{fromDate}/{toDate}/draw-id": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get draw ids for a game by date range",
        "description": "Get draw ids for a game by date range.",
        "operationId": "getDrawIdsForGameByDateV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/upcoming/{limit}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get upcoming draws for a game",
        "description": "Get upcoming(future) draws for a game and optionally the active one. By default the active draw is included in the response if it exists.",
        "operationId": "getUpcomingDrawsV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Limit, the number of total draws",
            "required": true,
            "type": "integer",
            "maximum": 1000,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "includeActive",
            "in": "query",
            "description": "Whether to include the active draw if it exists",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawV3_1"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/draw-date/{fromDate}/{toDate}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get draws for a game by date range",
        "description": "Get draws for a game by date range.",
        "operationId": "getDrawsForGameByDateV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "path",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "path",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": true,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/last-result-and-active": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get the last draw with results or pending results and the active draw for a game.",
        "description": "Get the last draw with results or pending results and the active draw for a game. includeAnimation parameter can be used to force the retrieval of animation for the last resulted draw.",
        "operationId": "getLastAndActiveDrawsV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeAnimation",
            "in": "query",
            "description": "Parameter to force inclusion of animation object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status in which the last draws should be. By default results and pendingResults are returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pendingResults",
                "results"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastResultDrawAndActiveV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/draw-id/{fromDrawId}/{toDrawId}": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get draws for a game by draw id range",
        "description": "Get draws for a game using a draw number range.",
        "operationId": "getDrawsForGameV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDrawId",
            "in": "path",
            "description": "The start draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "path",
            "description": "The end draw id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter draws by status, multiple statuses filters allowed. By default results status is used.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "future",
                "active",
                "pendingResults",
                "results",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortWinningNumbers",
            "in": "query",
            "description": "Sort winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortPassivesWinningNumbers",
            "in": "query",
            "description": "Sort Passives winning numbers list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/{gameId}/active": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get the active draw for a game",
        "description": "Get the active draw for a game",
        "operationId": "getActiveDrawForGameV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.1/draws/active": {
      "get": {
        "tags": [
          "Draw operations V3.1"
        ],
        "summary": "Get active draws",
        "description": "Get all active draws for all games",
        "operationId": "getActiveDrawsV3_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "Etag",
            "in": "header",
            "description": "Etag header, check https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag",
            "required": false,
            "type": "string"
          },
          {
            "name": "gameId",
            "in": "query",
            "description": "Specifies the game ids of the active draws",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: gameId, drawId, drawTime, status, visualDraw.",
            "required": false,
            "type": "string",
            "default": "gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageDrawV3_1"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/draws/{gameId}/{drawId}": {
      "put": {
        "tags": [
          "Draw update operations V1.0"
        ],
        "summary": "Register or update a draw",
        "description": "",
        "operationId": "registerOrUpdateV1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "description": "State identifier used for idempotency",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InfoStoreDrawUpdateRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InfoStoreDrawV1DTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v2.0/draws/{gameId}/migration": {
      "put": {
        "tags": [
          "Draw update operations V2.0"
        ],
        "summary": "Register batch of draws.",
        "description": "Register batch of draws. This is to be used for migration. No entity states will be registered, no subscribers will be notified.",
        "operationId": "migrateDraws",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InfoStoreDrawUpdateRequestV2WithDrawId"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/{drawId}/advertisedjackpot/passives": {
      "put": {
        "tags": [
          "Draw update operations V3.0"
        ],
        "summary": "update Advertised Jackpot",
        "description": "",
        "operationId": "advertisedJackpotUpdatePassivesV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "description": "State identifier used for idempotency",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InfostoreAdvertisedJackpotUpdatePassivesRequestV3"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v3.0/draws/{gameId}/{drawId}/advertisedjackpot": {
      "put": {
        "tags": [
          "Draw update operations V3.0"
        ],
        "summary": "update Advertised Jackpot",
        "description": "",
        "operationId": "advertisedJackpotUpdateV3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "description": "State identifier used for idempotency",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InfostoreAdvertisedJackpotUpdateRequestV3"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/highest-prizes/{gameId}/{drawId}": {
      "post": {
        "tags": [
          "Highest Prizes operations V1.0"
        ],
        "summary": "Add batch of highest prizes for specific game and draw",
        "description": "A batch may contain from 1 to 500 highest prizes",
        "operationId": "addBatchOfHighestPrizes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "batchId",
            "in": "query",
            "description": "Batch identifier. Starting from 1.",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HighestPrizeRequestDTO"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Highest Prizes operations V1.0"
        ],
        "summary": "Delete highest prizes for specific game and draw",
        "description": "",
        "operationId": "deletePrizesForGameAndDraw",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "description": "Draw identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/opap/v1.0/games/custom-statistics/kinoStats3": {
      "get": {
        "tags": [
          "Game operations V1.0 (OPAP)"
        ],
        "summary": "Get extended custom statistics for Kino, it includes side bets.",
        "description": "",
        "operationId": "getKenoStats3Info",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KenoStats3Res"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v1.0/games/{gameId}/highest-prize": {
      "get": {
        "tags": [
          "Game operations V1.0 (OPAP)"
        ],
        "summary": "Get highest prizes for a game by draw id or draw date ranges",
        "description": "",
        "operationId": "findHighestPrizeAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "The from date filter. Must be in 'yyyy-MM-dd' format.",
            "required": false,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The to date filter. Must be in 'yyyy-MM-dd' format.",
            "required": false,
            "type": "string",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
          },
          {
            "name": "timezone",
            "in": "header",
            "description": "The timezone in which the date filters were provided. Default is UTC.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDrawId",
            "in": "query",
            "description": "The start draw id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toDrawId",
            "in": "query",
            "description": "The end draw id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is desc.",
            "required": false,
            "type": "string",
            "default": "desc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: amount, drawId.",
            "required": false,
            "type": "string",
            "default": "drawId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PageHighestPrizeDTO"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v1.0/games/custom-statistics/kinoStats": {
      "get": {
        "tags": [
          "Game operations V1.0 (OPAP)"
        ],
        "summary": "Get custom statistics for Kino",
        "description": "",
        "operationId": "getKenoStatsInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KenoStatsRes"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v2.0/games/custom-statistics/kinoStats": {
      "get": {
        "tags": [
          "Game operations V2.0 (OPAP)"
        ],
        "summary": "Get custom statistics for Kino",
        "description": "",
        "operationId": "getKenoStatsInfoNew",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KenoStatsRes"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v2.0/games/{gameId}/statistics/sidebets": {
      "get": {
        "tags": [
          "Game operations V2.0 (OPAP)"
        ],
        "summary": "Get sidebets statistics for a game by draw range",
        "description": "",
        "operationId": "getSidebetsStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawRange",
            "in": "query",
            "description": "Denotes the number of last draws that are taken into account for the calculation of the sidebets statistics. The permitted ranges shall be configured in the backend and all other ranges will be treated with a 400 Bad Request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SideBetsDTO"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v2.0/games/custom-statistics/kinoStats3": {
      "get": {
        "tags": [
          "Game operations V2.0 (OPAP)"
        ],
        "summary": "Get extended custom statistics for Kino, it includes side bets.",
        "description": "",
        "operationId": "getKenoStats3InfoNew",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KenoStats3Res"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/opap/v2.0/games/{gameId}/statistics": {
      "get": {
        "tags": [
          "Game operations V2.0 (OPAP)"
        ],
        "summary": "Get game statistics for a game by draw id or draw date ranges",
        "description": "",
        "operationId": "getGameStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawRange",
            "in": "query",
            "description": "Denotes the number of last draws that are taken into account for the calculation of the statistics. It is mandatory for Keno. The actual range can be either 12 or 1801 and all other values will be treated with a 400 Bad Request. For the games other than Keno, stats since the beginning of time will be fetched, therefore this URL parameter should not be utilized by the consumer.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "property",
            "in": "query",
            "description": "Specifies which properties to include, by default all properties are included in the response",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GameStatisticsDTO"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/games/summary": {
      "get": {
        "tags": [
          "Game operations V1.0"
        ],
        "summary": "Get games",
        "description": "Get all games",
        "operationId": "getGamesSummary",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameSummaryDTO"
              }
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/games/{gameId}/jackpot": {
      "get": {
        "tags": [
          "Game operations V1.0"
        ],
        "summary": "Get current jackpots for game",
        "description": "",
        "operationId": "getCurrentJackpot",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JackpotDTO"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/sample/update": {
      "post": {
        "tags": [
          "Sample subscriber operations V1.0"
        ],
        "summary": "Sample subscriber notification endpoint with entity map in body",
        "description": "",
        "operationId": "updateEntity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntityNotificationDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityNotificationDTOResponse"
            }
          },
          "400": {
            "description": "VALIDATION_ERROR"
          },
          "500": {
            "description": "ERROR"
          }
        }
      }
    },
    "/v1.0/sample/simple/update": {
      "post": {
        "tags": [
          "Sample subscriber operations V1.0"
        ],
        "summary": "Sample subscriber notification endpoint with notification in body",
        "description": "",
        "operationId": "simpleUpdate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SimpleEntityNotificationDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityNotificationDTOResponse"
            }
          },
          "400": {
            "description": "VALIDATION_ERROR"
          },
          "500": {
            "description": "ERROR"
          }
        }
      }
    },
    "/v1.0/sample/simple/update/{gameId}/{drawId}/{status}": {
      "post": {
        "tags": [
          "Sample subscriber operations V1.0"
        ],
        "summary": "Sample subscriber notification endpoint with no body",
        "description": "Sample subscriber notification endpoint with no body. The path and the path parameters can be changed as long as the properties have the specific names and format: {property} . The header parameters (stateId, previousStateId, namespace) are optional.",
        "operationId": "simpleUpdateNoDody",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "previousStateId",
            "in": "header",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityNotificationDTOResponse"
            }
          },
          "400": {
            "description": "VALIDATION_ERROR"
          },
          "500": {
            "description": "ERROR"
          }
        }
      }
    },
    "/v1.0/providers": {
      "get": {
        "tags": [
          "Provider operations"
        ],
        "summary": "Get providers",
        "description": "",
        "operationId": "findAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "type": "string"
          },
          {
            "name": "column",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "name"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderDTO"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Provider operations"
        ],
        "summary": "Register a provider",
        "description": "",
        "operationId": "register",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The provider data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProviderRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProviderDTO"
            }
          }
        }
      }
    },
    "/v1.0/providers/{providerId}": {
      "put": {
        "tags": [
          "Provider operations"
        ],
        "summary": "Update a provider",
        "description": "",
        "operationId": "updateGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "The provider id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The provider data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProviderUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProviderDTO"
            }
          }
        }
      }
    },
    "/v1.0/infostore/retailers/{retailerId}": {
      "get": {
        "tags": [
          "Retailer operations"
        ],
        "operationId": "findOne",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "retailerId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RetailerDTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      },
      "put": {
        "tags": [
          "Retailer operations"
        ],
        "summary": "Register Retailer",
        "description": "",
        "operationId": "registerOrUpdate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "retailerId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "providerId",
            "in": "header",
            "description": "Provider identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stateId",
            "in": "header",
            "description": "State identifier used for idempotency",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RetailerUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RetailerDTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/states/{stateId}": {
      "get": {
        "tags": [
          "Entity state operations"
        ],
        "summary": "Get entity state by state id",
        "description": "Get entity by state id. It contains the entity body as well as a container object that stores the state id and the namespace.",
        "operationId": "getState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stateId",
            "in": "path",
            "description": "State identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "subscriberId",
            "in": "query",
            "description": "Subscriber id",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityStateDTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/states": {
      "get": {
        "tags": [
          "Entity state operations"
        ],
        "summary": "Get entity states",
        "description": "Get paginated entity states. From and to parameters are optional and allow to retrieve a subset of entity states.",
        "operationId": "getEntityStates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The start state id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end state id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "subscriberId",
            "in": "query",
            "description": "Subscriber id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting order. Options: asc, desc. Default is asc.",
            "required": false,
            "type": "string",
            "default": "asc"
          },
          {
            "name": "column",
            "in": "query",
            "description": "Sorting column. Options: stateId",
            "required": false,
            "type": "string",
            "default": "stateId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageEntityStateDTO"
            }
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/states/{stateId}/entity": {
      "get": {
        "tags": [
          "Entity state operations"
        ],
        "summary": "Get entity by state id",
        "description": "Get entity by state id. It contains only the entity body.",
        "operationId": "getEntityState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stateId",
            "in": "path",
            "description": "State identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "subscriberId",
            "in": "query",
            "description": "Subscriber id",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "404": {
            "description": "NOT FOUND"
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/games/{gameId}/statistics": {
      "get": {
        "tags": [
          "Game statistics Operations V1.0"
        ],
        "summary": "Get game statistics for a game based on the given game id and the draw range",
        "description": "",
        "operationId": "getGameStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "The id of the game requested for statistics ",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "drawRange",
            "in": "query",
            "description": "The number of last draws that are taken into account for the calculation of statistics.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneralGameStatisticsDTO"
            }
          },
          "304": {
            "description": "NOT MODIFIED"
          },
          "400": {
            "description": "VALIDATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "500": {
            "description": "APPLICATION ERROR",
            "schema": {
              "$ref": "#/definitions/FaultInfo"
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          },
          "503": {
            "description": "SERVICE UNAVAILABLE"
          }
        }
      }
    },
    "/v1.0/subscribers/{subscriberId}": {
      "put": {
        "tags": [
          "Subscriber operations"
        ],
        "summary": "Update a subscriber",
        "description": "",
        "operationId": "updateSubscriber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "The subscriber id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The subscriber data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriberUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriberDTO"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriber operations"
        ],
        "summary": "Delete a subscriber",
        "description": "",
        "operationId": "deleteSubscriber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "The subscriber id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1.0/subscribers": {
      "get": {
        "tags": [
          "Subscriber operations"
        ],
        "summary": "Get subscribers",
        "description": "",
        "operationId": "findAllSubscriber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriberId",
            "in": "query",
            "description": "Filter by subscriberId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "type": "string"
          },
          {
            "name": "gameIds",
            "in": "query",
            "description": "Filter by gameIds",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "entities",
            "in": "query",
            "description": "Filter by entities",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "draw",
                "transactions",
                "validations",
                "retailer"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "column",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "subscriberId"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriberDTO"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriber operations"
        ],
        "summary": "Register a subscriber",
        "description": "",
        "operationId": "registerSubscriber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The subscriber data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriberRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriberDTO"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddOnPricePointsV3VariationDTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "AddOnWagerStatisticsDTO": {
      "type": "object",
      "required": [
        "columns"
      ],
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32",
          "description": "Total columns of the add-on game"
        },
        "wagers": {
          "type": "integer",
          "format": "int32",
          "description": "Total wagers of the add-on game"
        },
        "gameType": {
          "type": "string",
          "description": "Game type"
        }
      }
    },
    "DrawAnimationV3VariationDTO": {
      "type": "object",
      "properties": {
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes in UTC the timestamp that an animation starts"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes in UTC the timestamp that an animation ends"
        },
        "steps": {
          "type": "array",
          "description": "Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number",
          "items": {
            "$ref": "#/definitions/StepV3Variation"
          }
        }
      }
    },
    "DrawResultV3Variation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result"
        },
        "divident": {
          "type": "number",
          "format": "double",
          "description": "Divident amount per winner of category"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners"
        },
        "distributed": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category (net amount)"
        },
        "jackpot": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount of category"
        },
        "fixed": {
          "type": "number",
          "format": "double",
          "description": "Fixed winning amount of category"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion id of category. It will be null if not applicable."
        },
        "gameType": {
          "type": "string",
          "description": "The game type related to the category. Values: Exact/Any for Super 3, Kino/KinoBonus/OddEven/Column for Kino, Normal for rest of the games."
        },
        "minimumDistributed": {
          "type": "number",
          "format": "double",
          "description": "Minimum distributed amount to all winners of category (net amount). It applies for Joker, Lotto, Proto and Propo/Propogoal and it is serialized only for the closest active draw of those games."
        }
      }
    },
    "DrawV3Variation": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "pricePoints",
        "prizeCategories",
        "status",
        "visualDraw"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "string",
          "description": "Draw status (enumeration)",
          "enum": [
            "future",
            "active",
            "completed",
            "pendingResults",
            "results"
          ]
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "pricePoints": {
          "description": "Price points",
          "$ref": "#/definitions/PricePointsV3VariationDTO"
        },
        "winningNumbers": {
          "description": "Winning numbers information",
          "$ref": "#/definitions/WinningNumbersV3VariationDTO"
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/DrawResultV3Variation"
          }
        },
        "wagerStatistics": {
          "description": "Wager statistics",
          "$ref": "#/definitions/WagerStatisticsDTO"
        },
        "animation": {
          "description": "Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not included by default.",
          "$ref": "#/definitions/DrawAnimationV3VariationDTO"
        }
      }
    },
    "PricePointsV3VariationDTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV3VariationDTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SideBetsWinningNumbersDTO": {
      "type": "object",
      "properties": {
        "evenNumbersCount": {
          "type": "integer",
          "format": "int32"
        },
        "oddNumbersCount": {
          "type": "integer",
          "format": "int32"
        },
        "winningColumn": {
          "type": "integer",
          "format": "int32"
        },
        "winningParity": {
          "type": "string",
          "enum": [
            "odd",
            "even",
            "draw"
          ]
        },
        "oddNumbers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "evenNumbers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "columnNumbers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "StepV3Variation": {
      "type": "object",
      "properties": {
        "bonusNumber": {
          "type": "boolean"
        },
        "hopToNumber": {
          "type": "integer",
          "format": "int32"
        },
        "sideBets": {
          "$ref": "#/definitions/SideBetsWinningNumbersDTO"
        },
        "winningNumber": {
          "type": "boolean",
          "example": false,
          "description": "Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number"
        },
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration of step in milliseconds"
        }
      }
    },
    "WagerStatisticsDTO": {
      "type": "object",
      "required": [
        "columns"
      ],
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32",
          "description": "Total columns of the primary game excluding the ones for the add-ons"
        },
        "wagers": {
          "type": "integer",
          "format": "int32",
          "description": "Total wagers including both primary game wagers and add-ons wagers"
        },
        "totalSalesAll": {
          "type": "number",
          "format": "double",
          "description": "Total amount of wagers"
        },
        "totalSales": {
          "type": "number",
          "format": "double",
          "description": "Total amount of wagers plus addons"
        },
        "funds": {
          "type": "number",
          "format": "double",
          "description": "Fund"
        },
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnWagerStatisticsDTO"
          }
        }
      }
    },
    "WinningNumbersV3VariationDTO": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "description": "Winning numbers list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "bonus": {
          "type": "array",
          "description": "Bonus number",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sidebets": {
          "description": "Winning sidebets",
          "$ref": "#/definitions/SideBetsWinningNumbersDTO"
        }
      }
    },
    "FaultInfo": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The error code"
        },
        "message": {
          "type": "string",
          "description": "The error message"
        },
        "data": {
          "type": "array",
          "description": "The error data which is an abstract object that may be used to provide any error metadata",
          "items": {
            "type": "object"
          }
        },
        "source": {
          "type": "string",
          "description": "The application at which the API error occured"
        },
        "type": {
          "type": "string",
          "description": "The error family, e.g. RUNTIME, VALIDATION, etc"
        },
        "guid": {
          "type": "string",
          "description": "The unique identifier of the error process"
        }
      },
      "description": "The FaultInfo object contains all the details assosiated with an API error"
    },
    "Page": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageDrawV3Variation": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawV3Variation"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        }
      }
    },
    "Sort": {
      "type": "object"
    },
    "LastResultDrawAndActiveV3Variation": {
      "type": "object",
      "properties": {
        "last": {
          "$ref": "#/definitions/DrawV3Variation"
        },
        "active": {
          "$ref": "#/definitions/DrawV3Variation"
        }
      }
    },
    "DrawResultV1": {
      "type": "object",
      "required": [
        "id",
        "number",
        "order"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "a unique internal identifier for the draw"
        },
        "number": {
          "type": "string",
          "description": "the specific number selected"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "description": "a number identifying the order in an asceding fashion"
        },
        "categoryCd": {
          "type": "integer",
          "format": "int32",
          "description": "the code of the category"
        },
        "boardTypeId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DrawV1": {
      "type": "object",
      "properties": {
        "game": {
          "description": "a reference to the state of the game",
          "$ref": "#/definitions/GameStateV1"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "a unique internal identifier for the draw"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "a unique number for the draw"
        },
        "columnPrice": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the unit price"
        },
        "drawDate": {
          "type": "string",
          "format": "date-time",
          "description": "the date of the draw"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the status of the draw"
        },
        "salesStart": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          },
          "description": "the date sales start"
        },
        "salesEnd": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          },
          "description": "the date sales end"
        },
        "winnersLoaded": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "description": "a flag indicating if the winners are loaded"
        },
        "totalColumns": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the total number of columns"
        },
        "totalColumns1": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "more information on the total number of columns"
        },
        "virtualDrawNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "virtual number of the draw"
        },
        "maxAdvandedDraws": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "Maximum advanced draws"
        },
        "specialDraw": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "a flag indicating if this is a special draw"
        },
        "jackpotAmount": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the jackpot Amount"
        },
        "results": {
          "type": "array",
          "description": "a list of artifacts representing the results of a draw",
          "items": {
            "$ref": "#/definitions/DrawResultV1"
          }
        },
        "prizes": {
          "type": "array",
          "description": "a list of artifacts representing the winning categories of the draw",
          "items": {
            "$ref": "#/definitions/PrizeCategoryV1"
          }
        }
      }
    },
    "GameStateV1": {
      "type": "object",
      "required": [
        "active",
        "columnPrice",
        "columnPrices",
        "deadline",
        "drawNumber",
        "gameCode",
        "gameStateId",
        "highestPrice",
        "lastUpdated",
        "mainGameCode",
        "maxAllowedColumns",
        "maxMultiDraws",
        "minAllowedColumns",
        "originalDeadline",
        "salesEnd",
        "salesStart"
      ],
      "properties": {
        "gameStateId": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the id of the state of the game"
        },
        "mainGameCode": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the code of the main game"
        },
        "gameCode": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the code of the game"
        },
        "columnPrice": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the unit price"
        },
        "columnPrices": {
          "type": "array",
          "description": "a list containing the column prices",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "active": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "description": "a flag indicating if it is empty"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the draw number associated"
        },
        "virtualDrawNumber": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "virtual number of the draw"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "the final date"
        },
        "salesStart": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          },
          "description": "the date sales start"
        },
        "salesEnd": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          },
          "description": "the date sales end"
        },
        "originalDeadline": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          },
          "description": "the original deadline"
        },
        "minAllowedColumns": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the minimun number of columns allowed"
        },
        "maxAllowedColumns": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the maximum number of columns allowed"
        },
        "highestPrice": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the highest price allowed"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "xml": {
            "attribute": true
          },
          "description": "the date that was last updated"
        },
        "maxMultiDraws": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": " the maximum number of multi-draws"
        }
      }
    },
    "PrizeCategoryIdV1": {
      "type": "object",
      "required": [
        "categoryCd",
        "drawCd",
        "gameCd",
        "selectedCategoryCd"
      ],
      "properties": {
        "gameCd": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the code of the game"
        },
        "drawCd": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the code of the draw"
        },
        "categoryCd": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the code of the category"
        },
        "selectedCategoryCd": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the code of the selected category"
        }
      }
    },
    "PrizeCategoryV1": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "a unique internal identifier of the winning",
          "$ref": "#/definitions/PrizeCategoryIdV1"
        },
        "divident": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the divident to be shared"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the numbers of winners for this category"
        },
        "winningAmount": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the total winning amount"
        },
        "jackpot": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the jackpot amount, if applicable"
        },
        "fixedWinningAmount": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the fixed winning amount"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the type of the winning category"
        },
        "promotionId": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "the id of the promotion if applicable"
        },
        "consolidatedAmount": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "the consolidated amount that is either the fixed amount or the dividend"
        },
        "extraInfo": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "a generic description that may include extra prize info"
        }
      },
      "xml": {
        "name": "PrizeCategory"
      }
    },
    "AddOnPricePointsV2DTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "unitType": {
          "type": "string"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "DrawResultV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result"
        },
        "distributedAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Distributed amount to all winners of category"
        },
        "dividentAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Gross divident amount per winner of category"
        },
        "taxationAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Taxation amount per winner of category"
        },
        "roundingAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Rounding amount per winner of category"
        },
        "bonusAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Bonus amount per winner of category"
        },
        "jackpotAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Jackpot amount per winner of category"
        },
        "netDividentAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Net divident amount per winner of category"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners"
        }
      }
    },
    "DrawV2": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "pricePoints",
        "prizeCategories",
        "status",
        "visualDraw"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points",
          "$ref": "#/definitions/PricePointsV2DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers of each winning column. Winning numbers of each winning column are comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/DrawResultV2"
          }
        },
        "wagersStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/WagerStatisticsDTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        }
      }
    },
    "PricePointsV2DTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV2DTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PageDrawV2": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawV2"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        }
      }
    },
    "AddOnPricePointsV3DTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "DrawAnimationV3DTO": {
      "type": "object",
      "properties": {
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes in UTC the timestamp that an animation starts"
        },
        "steps": {
          "type": "array",
          "description": "Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number",
          "items": {
            "$ref": "#/definitions/StepV3"
          }
        }
      }
    },
    "DrawResultV3": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result"
        },
        "winningPattern": {
          "type": "string",
          "description": "The wining column"
        },
        "divident": {
          "type": "number",
          "format": "double",
          "description": "Divident amount per winner of category"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners"
        },
        "distributed": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category(gross amount)"
        },
        "jackpot": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount of category"
        },
        "bonus": {
          "type": "number",
          "format": "double",
          "description": "bonus amount of category"
        },
        "fixed": {
          "type": "number",
          "format": "double",
          "description": "Fixed winning amount of category"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion id of category. It will be null if not applicable."
        },
        "gameType": {
          "type": "string",
          "description": "The game type related to the category."
        },
        "minimumDistributed": {
          "type": "number",
          "format": "double",
          "description": "The minimum distributed amount of category."
        }
      }
    },
    "DrawV3": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "pricePoints",
        "prizeCategories",
        "status",
        "statusNr",
        "visualDraw"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "string",
          "description": "Draw status (enumeration) is a more general draw status type (actually it groups statusNr together) <br> {future} corresponds to Defined <br> {active} corresponds to Active <br> {pendingResults} corresponds to Completed, Distributed Calculated, Winning Numbers Entered <br> {results} corresponds to Winners Dividents Calculated, Payments Suspended  ",
          "enum": [
            "future",
            "active",
            "pendingResults",
            "results"
          ]
        },
        "statusNr": {
          "type": "integer",
          "format": "int32",
          "description": "StatusNr: 0:Initial (internal status will never appear), 1:Defined, 2:Active, 3:Completed, 4:DistributedCalculated, 5:Winning Numbers Entered, 6:Winners Dividents Calculated 16: Payments Suspended"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Drawbreak field is an offset value in milliseconds relative to the draw closing time. In the time window between the drawbreak and the draw closing time sales and cancellations are not allowed for specific game."
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points",
          "$ref": "#/definitions/PricePointsV3DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers for each winning column.",
          "items": {
            "$ref": "#/definitions/WinningNumbersV3DTO"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/DrawResultV3"
          }
        },
        "wagerStatistics": {
          "description": "Wager statistics",
          "$ref": "#/definitions/WagerStatisticsDTO"
        },
        "animation": {
          "description": "Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not inlcuded by default.",
          "$ref": "#/definitions/DrawAnimationV3DTO"
        },
        "drawType": {
          "type": "string",
          "description": "Draw type"
        }
      }
    },
    "PricePointsV3DTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV3DTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SideBetsWinningNumbers": {
      "type": "object",
      "properties": {
        "winningColumn": {
          "type": "integer",
          "format": "int32"
        },
        "winningParity": {
          "type": "string",
          "enum": [
            "odd",
            "even",
            "draw"
          ]
        }
      }
    },
    "StepV3": {
      "type": "object",
      "properties": {
        "bonusNumber": {
          "type": "boolean"
        },
        "hopToNumber": {
          "type": "integer",
          "format": "int32"
        },
        "winningNumber": {
          "type": "boolean",
          "example": false,
          "description": "Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number"
        },
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration of step in milliseconds"
        }
      }
    },
    "WinningNumbersV3DTO": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "description": "The winning numbers list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "bonus": {
          "type": "integer",
          "format": "int32",
          "description": "The winning bonus number"
        },
        "sideBets": {
          "description": "The winning selections for side bets",
          "$ref": "#/definitions/SideBetsWinningNumbers"
        }
      }
    },
    "AddOnPricePointsV2_1DTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "DrawAnimationV2_1DTO": {
      "type": "object",
      "properties": {
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes in UTC the timestamp that an animation starts"
        },
        "stayDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Denotes how long (in milliseconds) an animation hop will last"
        },
        "steps": {
          "type": "array",
          "description": "Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number",
          "items": {
            "$ref": "#/definitions/StepV2_1"
          }
        }
      }
    },
    "DrawResultV2_1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result"
        },
        "winningPattern": {
          "type": "string",
          "description": "The wining column"
        },
        "divident": {
          "type": "number",
          "format": "double",
          "description": "Divident amount per winner of category"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners"
        },
        "distributed": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category(gross amount)"
        },
        "jackpot": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount of category"
        },
        "bonus": {
          "type": "number",
          "format": "double",
          "description": "bonus amount of category"
        },
        "fixed": {
          "type": "number",
          "format": "double",
          "description": "Fixed winning amount of category"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion id of category. It will be null if not applicable."
        },
        "gameType": {
          "type": "string",
          "description": "The game type related to the category."
        },
        "minimumDistributed": {
          "type": "number",
          "format": "double",
          "description": "The minimum distributed amount of category."
        },
        "winnersAll": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners for all jurisdictions. Applicable only for multijurisdictional games."
        },
        "attrs": {
          "type": "array",
          "description": "prizeXL,Consolation,prize Jackpot exists or not",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DrawV2_1": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "pricePoints",
        "prizeCategories",
        "status",
        "statusNr",
        "visualDraw"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "string",
          "description": "Draw status (enumeration) is a more general draw status type (actually it groups statusNr together) <br> {future} corresponds to Defined <br> {active} corresponds to Active <br> {pendingResults} corresponds to Completed, Distributed Calculated, Winning Numbers Entered <br> {results} corresponds to Winners Dividents Calculated, Payments Suspended  ",
          "enum": [
            "future",
            "active",
            "pendingResults",
            "results",
            "all"
          ]
        },
        "statusNr": {
          "type": "integer",
          "format": "int32",
          "description": "StatusNr: 0:Initial (internal status will never appear), 1:Defined, 2:Active, 3:Completed, 4:DistributedCalculated, 5:Winning Numbers Entered, 6:Winners Dividents Calculated 16: Payments Suspended"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Drawbreak field is an offset value in milliseconds relative to the draw closing time. In the time window between the drawbreak and the draw closing time sales and cancellations are not allowed for specific game."
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points",
          "$ref": "#/definitions/PricePointsV2_1DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers for each winning column.",
          "items": {
            "$ref": "#/definitions/WinningNumbersV2_1DTO"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/DrawResultV2_1"
          }
        },
        "wagerStatistics": {
          "description": "Wager statistics",
          "$ref": "#/definitions/WagerStatisticsDTO"
        },
        "animation": {
          "description": "Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not inlcuded by default.",
          "$ref": "#/definitions/DrawAnimationV2_1DTO"
        },
        "drawType": {
          "type": "string",
          "description": "Draw type. Normal=1 (default), SuperSaturday=2."
        }
      }
    },
    "PricePointsV2_1DTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV2_1DTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "StepV2_1": {
      "type": "object",
      "properties": {
        "bonusNumber": {
          "type": "boolean"
        },
        "hopToNumber": {
          "type": "integer",
          "format": "int32"
        },
        "winningNumber": {
          "type": "boolean",
          "example": false,
          "description": "Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number"
        }
      }
    },
    "WinningNumbersV2_1DTO": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "description": "The winning numbers list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "bonus": {
          "type": "integer",
          "format": "int32",
          "description": "The winning bonus number"
        },
        "sideBets": {
          "description": "The winning selections for side bets",
          "$ref": "#/definitions/SideBetsWinningNumbers"
        }
      }
    },
    "PageDrawV2_1": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawV2_1"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        }
      }
    },
    "LastResultDrawAndActiveV2_1": {
      "type": "object",
      "properties": {
        "last": {
          "$ref": "#/definitions/DrawV2_1"
        },
        "active": {
          "$ref": "#/definitions/DrawV2_1"
        }
      }
    },
    "AdvJackpotDrawResultV2_1": {
      "type": "object",
      "properties": {
        "prizeCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvJackpotResultV2_1"
          }
        }
      }
    },
    "AdvJackpotResultV2_1": {
      "type": "object",
      "required": [
        "advertisedJackpotAmount",
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Winning category id"
        },
        "advertisedJackpotAmount": {
          "type": "number",
          "format": "double",
          "description": "Advertised jackpot"
        }
      }
    },
    "LastResultDrawAndActiveV3": {
      "type": "object",
      "properties": {
        "last": {
          "$ref": "#/definitions/DrawV3"
        },
        "active": {
          "$ref": "#/definitions/DrawV3"
        }
      }
    },
    "PageDrawV3": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawV3"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        }
      }
    },
    "AdvJackpotDrawResultV3_1": {
      "type": "object",
      "properties": {
        "prizeCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvJackpotResultV3_1"
          }
        }
      }
    },
    "AdvJackpotResultV3_1": {
      "type": "object",
      "required": [
        "advertisedJackpotAmount",
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Winning category id"
        },
        "advertisedJackpotAmount": {
          "type": "number",
          "format": "double",
          "description": "Advertised jackpot"
        }
      }
    },
    "AddOnPricePointsV3_1DTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "AdvertisedJackpotV3_1DTO": {
      "type": "object",
      "properties": {
        "initialValues": {
          "description": "Initial values for advertised jackpot",
          "$ref": "#/definitions/JackpotInitialValues"
        },
        "resultValues": {
          "description": "Result values for advertised jackpot",
          "$ref": "#/definitions/JackpotResultValues"
        }
      }
    },
    "DrawAnimationV3_1DTO": {
      "type": "object",
      "properties": {
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes in UTC the timestamp that an animation starts"
        },
        "steps": {
          "type": "array",
          "description": "Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number",
          "items": {
            "$ref": "#/definitions/StepV3_1"
          }
        }
      }
    },
    "DrawResultV3_1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result"
        },
        "winningPattern": {
          "type": "string",
          "description": "The wining column"
        },
        "divident": {
          "type": "number",
          "format": "double",
          "description": "Divident amount per winner of category"
        },
        "netDividentAmount": {
          "type": "number",
          "format": "double",
          "description": "netDivident amount per winner of category after taxes"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners"
        },
        "distributed": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category(gross amount)"
        },
        "jackpot": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount of category"
        },
        "bonus": {
          "type": "number",
          "format": "double",
          "description": "bonus amount of category"
        },
        "fixed": {
          "type": "number",
          "format": "double",
          "description": "Fixed winning amount of category"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion id of category. It will be null if not applicable."
        },
        "gameType": {
          "type": "string",
          "description": "The game type related to the category."
        },
        "minimumDistributed": {
          "type": "number",
          "format": "double",
          "description": "The minimum distributed amount of category."
        },
        "winnersAll": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners for all jurisdictions. Applicable only for multijurisdictional games."
        },
        "attrs": {
          "type": "array",
          "description": "prizeXL,Consolation,prize Jackpot exists or not",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DrawV3_1": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "pricePoints",
        "prizeCategories",
        "status",
        "statusNr",
        "visualDraw"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "string",
          "description": "Draw status (enumeration) is a more general draw status type (actually it groups statusNr together) <br> {future} corresponds to Defined <br> {active} corresponds to Active <br> {pendingResults} corresponds to Completed, Distributed Calculated, Winning Numbers Entered <br> {results} corresponds to Winners Dividents Calculated, Payments Suspended  ",
          "enum": [
            "future",
            "active",
            "pendingResults",
            "results",
            "all"
          ]
        },
        "statusNr": {
          "type": "integer",
          "format": "int32",
          "description": "StatusNr: 0:Initial (internal status will never appear), 1:Defined, 2:Active, 3:Completed, 4:DistributedCalculated, 5:Winning Numbers Entered, 6:Winners Dividents Calculated 16: Payments Suspended"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Drawbreak field is an offset value in milliseconds relative to the draw closing time. In the time window between the drawbreak and the draw closing time sales and cancellations are not allowed for specific game."
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points",
          "$ref": "#/definitions/PricePointsV3_1DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers for each winning column.",
          "items": {
            "$ref": "#/definitions/WinningNumbersV3_1DTO"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/DrawResultV3_1"
          }
        },
        "wagerStatistics": {
          "description": "Wager statistics",
          "$ref": "#/definitions/WagerStatisticsDTO"
        },
        "animation": {
          "description": "Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not inlcuded by default.",
          "$ref": "#/definitions/DrawAnimationV3_1DTO"
        },
        "drawType": {
          "type": "string",
          "description": "Draw type. Normal=1 (default), SuperSaturday=2."
        },
        "advertisedJackpot": {
          "description": "Advertised jackpot.",
          "$ref": "#/definitions/AdvertisedJackpotV3_1DTO"
        }
      }
    },
    "JackpotInitialValues": {
      "type": "object",
      "properties": {
        "date": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "info": {
          "type": "string"
        },
        "valkans": {
          "type": "string"
        },
        "valkansNr": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JackpotResultValues": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DROPPED",
            "NOT_DROPPED",
            "PARTIALLY_DROPPED"
          ]
        },
        "result": {
          "type": "string"
        }
      }
    },
    "PricePointsV3_1DTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV3_1DTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "StepV3_1": {
      "type": "object",
      "properties": {
        "bonusNumber": {
          "type": "boolean"
        },
        "hopToNumber": {
          "type": "integer",
          "format": "int32"
        },
        "winningNumber": {
          "type": "boolean",
          "example": false,
          "description": "Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number"
        },
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration of step in milliseconds"
        }
      }
    },
    "WinningNumbersV3_1DTO": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "description": "The winning numbers list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "listDecimal": {
          "type": "array",
          "description": "The winning numbers list that contains decimals",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "bonus": {
          "type": "integer",
          "format": "int32",
          "description": "The winning bonus number"
        },
        "sideBets": {
          "description": "The winning selections for side bets",
          "$ref": "#/definitions/SideBetsWinningNumbers"
        }
      }
    },
    "DrawV3_1WinningNumbersDTO": {
      "type": "object",
      "required": [
        "drawId",
        "drawTime",
        "gameId",
        "status",
        "visualDraw"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "string",
          "description": "Draw status (enumeration) is a more general draw status type (actually it groups statusNr together) <br> {future} corresponds to Defined <br> {active} corresponds to Active <br> {pendingResults} corresponds to Completed, Distributed Calculated, Winning Numbers Entered <br> {results} corresponds to Winners Dividents Calculated, Payments Suspended  ",
          "enum": [
            "future",
            "active",
            "pendingResults",
            "results",
            "all"
          ]
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers for each winning column.",
          "items": {
            "$ref": "#/definitions/WinningNumbersV3_1DTO"
          }
        }
      }
    },
    "PageDrawV3_1": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawV3_1"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        }
      }
    },
    "LastResultDrawAndActiveV3_1": {
      "type": "object",
      "properties": {
        "last": {
          "$ref": "#/definitions/DrawV3_1"
        },
        "active": {
          "$ref": "#/definitions/DrawV3_1"
        }
      }
    },
    "AddOnPricePointsV1DTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "InfoStoreDrawResultsV1DTO": {
      "type": "object",
      "required": [
        "bonusAmount",
        "distributedAmount",
        "dividentAmount",
        "id",
        "jackpotAmount",
        "minimumDistributed",
        "netDividentAmount",
        "roundingAmount",
        "taxationAmount",
        "winners"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result",
          "minimum": 1
        },
        "distributedAmount": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category",
          "minimum": 0
        },
        "dividentAmount": {
          "type": "number",
          "format": "double",
          "description": "Gross divident amount per winner of category",
          "minimum": 0
        },
        "taxationAmount": {
          "type": "number",
          "format": "double",
          "description": "Taxation amount per winner of category",
          "minimum": 0
        },
        "roundingAmount": {
          "type": "number",
          "format": "double",
          "description": "Rounding amount per winner of category",
          "minimum": 0
        },
        "bonusAmount": {
          "type": "number",
          "format": "double",
          "description": "Bonus amount per winner of category",
          "minimum": 0
        },
        "jackpotAmount": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount per winner of category",
          "minimum": 0
        },
        "netDividentAmount": {
          "type": "number",
          "format": "double",
          "description": "Net divident amount per winner of category",
          "minimum": 0
        },
        "winners": {
          "type": "integer",
          "format": "int64",
          "description": "Number of category winners",
          "minimum": 0
        },
        "fixedAmount": {
          "type": "number",
          "format": "double",
          "description": "Fixed winning amount per winner of category"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "The promotion id of category"
        },
        "gameType": {
          "type": "string",
          "description": "The game type related to the category."
        },
        "minimumDistributed": {
          "type": "number",
          "format": "double",
          "description": "Minimum distributed amount per winner of category",
          "minimum": 0
        },
        "passiveDrawResult": {
          "description": "Passive draw result",
          "$ref": "#/definitions/PassiveDrawResultDTO"
        }
      }
    },
    "InfoStoreDrawV1DTO": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "pricePoints",
        "status",
        "visualDraw",
        "winningRevision"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int64",
          "description": "Visual draw"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points of the draw main game and addons",
          "$ref": "#/definitions/PricePointsV1DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawResultsV1DTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        },
        "wagerStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawWagerStatisticsV1DTO"
          }
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "InfoStoreDrawWagerStatisticsV1DTO": {
      "type": "object",
      "required": [
        "columns",
        "wagerType"
      ],
      "properties": {
        "wagerType": {
          "type": "integer",
          "format": "int32",
          "description": "Wager type. 1:Play 2:Cancel?"
        },
        "columns": {
          "type": "integer",
          "format": "int64",
          "description": "Total columns"
        },
        "wagers": {
          "type": "integer",
          "format": "int64",
          "description": "Total wagers"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "PassiveDrawResultDTO": {
      "type": "object",
      "required": [
        "prizeConsolation",
        "prizeJackpot",
        "prizeXL"
      ],
      "properties": {
        "prizeJackpot": {
          "type": "boolean",
          "description": "Jackpot prize flag of category"
        },
        "prizeConsolation": {
          "type": "boolean",
          "description": "Consolation prize flag of category"
        },
        "prizeXL": {
          "type": "boolean",
          "description": "XL prize flag of category"
        }
      },
      "description": "A passive draw result request details entity"
    },
    "PricePointsV1DTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV1DTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "InfoStoreDrawUpdateRequestV1": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawTime",
        "gameRuleVersion",
        "pricePoints",
        "status",
        "visualDraw",
        "winningRevision"
      ],
      "properties": {
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int64",
          "description": "Visual draw"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points of the draw main game and addons",
          "$ref": "#/definitions/PricePointsV1DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawResultsV1DTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        },
        "wagerStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawWagerStatisticsV1DTO"
          }
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "InfoStoreDrawResultsV2DTO": {
      "type": "object",
      "required": [
        "bonusAmount",
        "distributedAmount",
        "dividentAmount",
        "id",
        "jackpotAmount",
        "netDividentAmount",
        "roundingAmount",
        "taxationAmount",
        "winners"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result",
          "minimum": 1
        },
        "distributedAmount": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category",
          "minimum": 0
        },
        "dividentAmount": {
          "type": "number",
          "format": "double",
          "description": "Gross divident amount per winner of category",
          "minimum": 0
        },
        "taxationAmount": {
          "type": "number",
          "format": "double",
          "description": "Taxation amount per winner of category",
          "minimum": 0
        },
        "roundingAmount": {
          "type": "number",
          "format": "double",
          "description": "Rounding amount per winner of category",
          "minimum": 0
        },
        "bonusAmount": {
          "type": "number",
          "format": "double",
          "description": "Bonus amount per winner of category",
          "minimum": 0
        },
        "jackpotAmount": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount per winner of category",
          "minimum": 0
        },
        "netDividentAmount": {
          "type": "number",
          "format": "double",
          "description": "Net divident amount per winner of category",
          "minimum": 0
        },
        "winners": {
          "type": "integer",
          "format": "int64",
          "description": "Number of category winners",
          "minimum": 0
        },
        "passiveDrawResult": {
          "description": "Passive draw result",
          "$ref": "#/definitions/PassiveDrawResultDTO"
        }
      }
    },
    "InfoStoreDrawUpdateRequestV2WithDrawId": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawTime",
        "gameRuleVersion",
        "status",
        "visualDraw",
        "winningRevision"
      ],
      "properties": {
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int64",
          "description": "Visual draw"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Game rule version"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawResultsV2DTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        },
        "wagerStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawWagerStatisticsV2DTO"
          }
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        },
        "drawId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InfoStoreDrawWagerStatisticsV2DTO": {
      "type": "object",
      "required": [
        "columns",
        "wagerType"
      ],
      "properties": {
        "wagerType": {
          "type": "integer",
          "format": "int32",
          "description": "Wager type. 1:Play 2:Canceled, 3:Internal_Played_Rollback, 4:Tagged"
        },
        "columns": {
          "type": "integer",
          "format": "int64",
          "description": "Total columns"
        },
        "wagers": {
          "type": "integer",
          "format": "int64",
          "description": "Total wagers"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "InfoStoreDrawV2DTO": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "status",
        "visualDraw",
        "winningRevision"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int64",
          "description": "Visual draw"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Game rule version"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawResultsV2DTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        },
        "wagerStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawWagerStatisticsV2DTO"
          }
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "InfoStoreDrawUpdateRequestV2": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawTime",
        "gameRuleVersion",
        "status",
        "visualDraw",
        "winningRevision"
      ],
      "properties": {
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int64",
          "description": "Visual draw"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Game rule version"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawResultsV2DTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        },
        "wagerStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawWagerStatisticsV2DTO"
          }
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "AdvertisedJackpot": {
      "type": "object",
      "properties": {
        "initialValues": {
          "$ref": "#/definitions/JackpotInitialValues"
        },
        "resultValues": {
          "$ref": "#/definitions/JackpotResultValues"
        }
      }
    },
    "InfostoreAdvertisedJackpotUpdatePassivesRequestV3": {
      "type": "object",
      "properties": {
        "advertisedJackpot": {
          "$ref": "#/definitions/AdvertisedJackpot"
        }
      }
    },
    "InfostoreAdvertisedJackpotUpdateRequestV3": {
      "type": "object",
      "properties": {
        "prizeCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WinningCategoryAdvertisedJackpot"
          }
        }
      }
    },
    "WinningCategoryAdvertisedJackpot": {
      "type": "object",
      "required": [
        "advertisedJackpotAmount",
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Winning category id",
          "minimum": 1
        },
        "advertisedJackpotAmount": {
          "type": "number",
          "format": "double",
          "description": "Advertised jackpot"
        }
      }
    },
    "InfoStoreDrawResultsV3DTO": {
      "type": "object",
      "required": [
        "bonusAmount",
        "distributedAmount",
        "dividentAmount",
        "id",
        "jackpotAmount",
        "netDividentAmount",
        "roundingAmount",
        "taxationAmount",
        "winners",
        "winnersAll"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result",
          "minimum": 1
        },
        "distributedAmount": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category",
          "minimum": 0
        },
        "dividentAmount": {
          "type": "number",
          "format": "double",
          "description": "Gross divident amount per winner of category",
          "minimum": 0
        },
        "taxationAmount": {
          "type": "number",
          "format": "double",
          "description": "Taxation amount per winner of category",
          "minimum": 0
        },
        "roundingAmount": {
          "type": "number",
          "format": "double",
          "description": "Rounding amount per winner of category",
          "minimum": 0
        },
        "bonusAmount": {
          "type": "number",
          "format": "double",
          "description": "Bonus amount per winner of category",
          "minimum": 0
        },
        "jackpotAmount": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount per winner of category",
          "minimum": 0
        },
        "netDividentAmount": {
          "type": "number",
          "format": "double",
          "description": "Net divident amount per winner of category",
          "minimum": 0
        },
        "winners": {
          "type": "integer",
          "format": "int64",
          "description": "Number of category winners",
          "minimum": 0
        },
        "winnersAll": {
          "type": "integer",
          "format": "int64",
          "description": "Number of category total winners",
          "minimum": 0
        }
      }
    },
    "InfoStoreDrawV3DTO": {
      "type": "object",
      "required": [
        "drawBreak",
        "drawId",
        "drawTime",
        "gameId",
        "gameRuleVersion",
        "status",
        "visualDraw",
        "winningRevision"
      ],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int64",
          "description": "Visual draw"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Game rule version"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers corresponding to winning column. List of String where each String corresponds to the winning numbers ofeach winning column. Winning numbers of each winning column should be comma separated.",
          "items": {
            "type": "string"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawResultsV3DTO"
          }
        },
        "winningRevision": {
          "type": "integer",
          "format": "int32",
          "description": "Winning revision"
        },
        "activationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Time that the draw was activated"
        },
        "wagerStatistics": {
          "type": "array",
          "description": "Wager statistics",
          "items": {
            "$ref": "#/definitions/InfoStoreDrawWagerStatisticsV3DTO"
          }
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        },
        "totalSalesAll": {
          "type": "number",
          "format": "double",
          "description": "Total amount of wagers"
        },
        "advertisedJackpot": {
          "description": "Advertised jackpot",
          "$ref": "#/definitions/AdvertisedJackpot"
        }
      }
    },
    "InfoStoreDrawWagerStatisticsV3DTO": {
      "type": "object",
      "required": [
        "columns",
        "wagerType"
      ],
      "properties": {
        "wagerType": {
          "type": "integer",
          "format": "int32",
          "description": "Wager type. 1:Play 2:Canceled, 3:Internal_Played_Rollback, 4:Tagged"
        },
        "columns": {
          "type": "integer",
          "format": "int64",
          "description": "Total columns"
        },
        "wagers": {
          "type": "integer",
          "format": "int64",
          "description": "Total wagers"
        }
      }
    },
    "InfoStoreDrawUpdateRequestV3": {
      "type": "object",
      "required": [
        "prizeCategories"
      ],
      "properties": {
        "prizeCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TotalWinnerCategory"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "totalSalesAll": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TotalWinnerCategory": {
      "type": "object",
      "required": [
        "id",
        "winnersAll"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Winning category id"
        },
        "winnersAll": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of winners"
        }
      }
    },
    "HighestPrizeRequestDTO": {
      "type": "object",
      "required": [
        "amount",
        "id",
        "retailerAddress",
        "retailerId",
        "wagerCost",
        "winningDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the prize id",
          "minimum": 0
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Denotes the winning amount",
          "minimum": 0
        },
        "wagerCost": {
          "type": "number",
          "format": "double",
          "description": "Denotes the cost of the relevant wager",
          "minimum": 0
        },
        "retailerAddress": {
          "type": "string",
          "description": "Denotes the address of the Retail store  where the wager with the highest prize was placed",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "retailerId": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the id of the Retail store where the wager with the highest prize was placed",
          "minimum": 0
        },
        "winningDate": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the relevant date that the highest prize was won in UTC in milliseconds",
          "minimum": 0
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBigWin": {
      "type": "object",
      "properties": {
        "bigWin": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BigWin"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBonusBigWin": {
      "type": "object",
      "properties": {
        "bigWin": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BigWin"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBonusDrawnNum": {
      "type": "object",
      "properties": {
        "drawnNum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawnNum"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBonusNumInfo": {
      "type": "object",
      "properties": {
        "numInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumInfo"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBonusTopDelay": {
      "type": "object",
      "properties": {
        "topDelay": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopDelay"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBonusTopRepeat": {
      "type": "object",
      "properties": {
        "topRepeat": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopRepeat"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoBonusTopWinner": {
      "type": "object",
      "properties": {
        "topWinner": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopWinner"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoColumnItem": {
      "type": "object",
      "properties": {
        "columnItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColumnItem"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoDrawnNum": {
      "type": "object",
      "properties": {
        "drawnNum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrawnNum"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoTopDelay": {
      "type": "object",
      "properties": {
        "topDelay": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopDelay"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoTopRepeat": {
      "type": "object",
      "properties": {
        "topRepeat": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopRepeat"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResKenoTopWinner": {
      "type": "object",
      "properties": {
        "topWinner": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopWinner"
          }
        }
      }
    },
    "ArrayOfKenoStats3ResPrevDrawInfo": {
      "type": "object",
      "properties": {
        "prevDrawInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrevDrawInfo"
          }
        }
      }
    },
    "BigWin": {
      "type": "object",
      "properties": {
        "winComb": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winAmount": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        },
        "area": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "dt": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "BonusVsKeno": {
      "type": "object",
      "properties": {
        "drawTm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "ColumnItem": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "repeats": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "delays": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "CurrDayDsb": {
      "type": "object",
      "properties": {
        "fstDrawTm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "lstDrawTm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winAmount": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "DrawnNum": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "times": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "Keno": {
      "type": "object",
      "properties": {
        "prevDayDsb": {
          "$ref": "#/definitions/PrevDayDsb"
        },
        "currDayDsb": {
          "$ref": "#/definitions/CurrDayDsb"
        },
        "drawnNums": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoDrawnNum"
        },
        "topDelays": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoTopDelay"
        },
        "topRepeats": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoTopRepeat"
        },
        "topWinners": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoTopWinner"
        },
        "topCombs": {
          "$ref": "#/definitions/TopCombs"
        },
        "winTcks": {
          "$ref": "#/definitions/WinTcks"
        },
        "oneRes": {
          "$ref": "#/definitions/OneRes"
        },
        "bigWins": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBigWin"
        },
        "columns": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoColumnItem"
        }
      }
    },
    "KenoBonus": {
      "type": "object",
      "properties": {
        "numsInfo": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBonusNumInfo"
        },
        "drawnNums": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBonusDrawnNum"
        },
        "topDelays": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBonusTopDelay"
        },
        "topRepeats": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBonusTopRepeat"
        },
        "currDayDsb": {
          "$ref": "#/definitions/CurrDayDsb"
        },
        "topWinners": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBonusTopWinner"
        },
        "topCombs": {
          "$ref": "#/definitions/TopCombs"
        },
        "bonusVsKeno": {
          "$ref": "#/definitions/BonusVsKeno"
        },
        "oneRes": {
          "$ref": "#/definitions/OneRes"
        },
        "bigWins": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResKenoBonusBigWin"
        }
      }
    },
    "KenoStats3Res": {
      "type": "object",
      "properties": {
        "prevDrawsInfo": {
          "$ref": "#/definitions/ArrayOfKenoStats3ResPrevDrawInfo"
        },
        "keno": {
          "$ref": "#/definitions/Keno"
        },
        "kenoBonus": {
          "$ref": "#/definitions/KenoBonus"
        },
        "drawCD": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "drawTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "kenoStats3Res"
      }
    },
    "NumInfo": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "repeats": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "delays": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "OneRes": {
      "type": "object",
      "properties": {
        "oneResItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OneResItem"
          }
        },
        "dt": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "OneResItem": {
      "type": "object",
      "properties": {
        "winComb": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winAmount": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        },
        "area": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "PrevDayDsb": {
      "type": "object",
      "properties": {
        "winAmount": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "PrevDrawInfo": {
      "type": "object",
      "properties": {
        "winNums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WinNums"
          }
        },
        "drawCD": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "drawTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winCol": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "oddEven": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "TopComb": {
      "type": "object",
      "properties": {
        "comb": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "TopCombs": {
      "type": "object",
      "properties": {
        "topComb": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopComb"
          }
        },
        "drawTm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "TopDelay": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "delays": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "TopRepeat": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "repeats": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "TopWinner": {
      "type": "object",
      "properties": {
        "drawTm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winAmount": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        },
        "area": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "WinNums": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "winNum": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "isBonus": {
          "type": "boolean",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "WinTcks": {
      "type": "object",
      "properties": {
        "drawTm": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "HighestPrizeDTO": {
      "type": "object",
      "required": [
        "amount",
        "drawId",
        "retailerAddress",
        "retailerId",
        "wagerCost",
        "winningDate"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Denotes the winning amount"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Denotes the id of a specific draw"
        },
        "wagerCost": {
          "type": "number",
          "format": "double",
          "description": "Denotes the cost of the relevant wager"
        },
        "retailerAddress": {
          "type": "string",
          "description": "Denotes the address of the Retail store  where the wager with the highest prize was placed"
        },
        "retailerId": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the id of the Retail store where the wager with the highest prize was placed"
        },
        "winningDate": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the relevant date that the highest prize was won in UTC in milliseconds"
        }
      }
    },
    "PageHighestPrizeDTO": {
      "type": "object",
      "properties": {
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HighestPrizeDTO"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ArrayOfKenoStatsResCtgInfo": {
      "type": "object",
      "properties": {
        "ctgInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtgInfo"
          }
        }
      }
    },
    "ArrayOfKenoStatsResCtgInfoBonus": {
      "type": "object",
      "properties": {
        "ctgInfoBonus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CtgInfoBonus"
          }
        }
      }
    },
    "ArrayOfKenoStatsResMinuteInfo": {
      "type": "object",
      "properties": {
        "minuteInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MinuteInfo"
          }
        }
      }
    },
    "ArrayOfKenoStatsResNumInfo": {
      "type": "object",
      "properties": {
        "numInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumInfo"
          }
        }
      }
    },
    "ArrayOfKenoStatsResNumInfoBonusDelays": {
      "type": "object",
      "properties": {
        "numInfoBonusDelays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumInfoBonusDelays"
          }
        }
      }
    },
    "ArrayOfKenoStatsResNumInfoBonusRepeats": {
      "type": "object",
      "properties": {
        "numInfoBonusRepeats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumInfoBonusRepeats"
          }
        }
      }
    },
    "ArrayOfKenoStatsResPlaceInfo": {
      "type": "object",
      "properties": {
        "placeInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaceInfo"
          }
        }
      }
    },
    "ArrayOfKenoStatsResPrevDrawInfo": {
      "type": "object",
      "properties": {
        "prevDrawInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrevDrawInfo"
          }
        }
      }
    },
    "ArrayOfKenoStatsResWinnerInfo": {
      "type": "object",
      "properties": {
        "winnerInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WinnerInfo"
          }
        }
      }
    },
    "CtgInfo": {
      "type": "object",
      "properties": {
        "sctg": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "ctg": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "amn": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "CtgInfoBonus": {
      "type": "object",
      "properties": {
        "sctg": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "ctg": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "amn": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "KenoStatsRes": {
      "type": "object",
      "properties": {
        "numsInfo": {
          "$ref": "#/definitions/ArrayOfKenoStatsResNumInfo"
        },
        "numsInfoBonusDelays": {
          "$ref": "#/definitions/ArrayOfKenoStatsResNumInfoBonusDelays"
        },
        "numsInfoBonusRepeats": {
          "$ref": "#/definitions/ArrayOfKenoStatsResNumInfoBonusRepeats"
        },
        "minutesInfo": {
          "$ref": "#/definitions/ArrayOfKenoStatsResMinuteInfo"
        },
        "ctgsInfo": {
          "$ref": "#/definitions/ArrayOfKenoStatsResCtgInfo"
        },
        "ctgsInfoBonus": {
          "$ref": "#/definitions/ArrayOfKenoStatsResCtgInfoBonus"
        },
        "winnersInfo": {
          "$ref": "#/definitions/ArrayOfKenoStatsResWinnerInfo"
        },
        "placesInfo": {
          "$ref": "#/definitions/ArrayOfKenoStatsResPlaceInfo"
        },
        "prevDrawsInfo": {
          "$ref": "#/definitions/ArrayOfKenoStatsResPrevDrawInfo"
        },
        "drawCD": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "drawTime": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        }
      },
      "xml": {
        "name": "kenoStatsRes"
      }
    },
    "MinuteInfo": {
      "type": "object",
      "properties": {
        "minutes": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "amn": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "NumInfoBonusDelays": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "delays": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "NumInfoBonusRepeats": {
      "type": "object",
      "properties": {
        "sign": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "repeats": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "PlaceInfo": {
      "type": "object",
      "properties": {
        "amn": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        },
        "place": {
          "type": "string",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "WinnerInfo": {
      "type": "object",
      "properties": {
        "amn": {
          "type": "number",
          "format": "double",
          "xml": {
            "attribute": true
          }
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        }
      }
    },
    "OccurrenceDelay": {
      "type": "object",
      "properties": {
        "delays": {
          "type": "integer",
          "format": "int32"
        },
        "occurrences": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OccurrenceDelayNumber": {
      "type": "object",
      "properties": {
        "delays": {
          "type": "integer",
          "format": "int32"
        },
        "occurrences": {
          "type": "integer",
          "format": "int32"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SideBetsDTO": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/StatisticsHeader"
        },
        "draw": {
          "$ref": "#/definitions/OccurrenceDelay"
        },
        "even": {
          "$ref": "#/definitions/OccurrenceDelay"
        },
        "odd": {
          "$ref": "#/definitions/OccurrenceDelay"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OccurrenceDelayNumber"
          }
        }
      }
    },
    "StatisticsHeader": {
      "type": "object",
      "properties": {
        "dateFrom": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the start draw date of the draw range taken into account for the statistics."
        },
        "dateTo": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes the end draw date of the draw range taken into account for the statistics."
        },
        "drawCount": {
          "type": "integer",
          "format": "int32",
          "description": "Denotes the total number of draws taken into account for the statistics."
        }
      }
    },
    "GameStatisticsDTO": {
      "type": "object",
      "properties": {
        "header": {
          "description": "The basic info for the current game",
          "$ref": "#/definitions/StatisticsHeader"
        },
        "numbers": {
          "type": "array",
          "description": "Denotes a mapping for numbers that are applicable to a given game (e.g. 1-80 for Kino, 1-35 for Extra5, etc.) to occurrences/delays.",
          "items": {
            "$ref": "#/definitions/OccurrenceDelayNumberPosition"
          }
        },
        "bonusNumbers": {
          "type": "array",
          "description": "Denotes a mapping for bonus numbers that are applicable to a given game (e.g. 1-80 for Kino, 1-35 for Extra5, etc.) to occurrences/delays. Serialized only for specific games.",
          "items": {
            "$ref": "#/definitions/OccurrenceDelayNumberPosition"
          }
        },
        "pairs": {
          "type": "array",
          "description": "Serialized only for specific games. Ordering of the two numbers consisting a pair is irrelevant",
          "items": {
            "$ref": "#/definitions/PairTriplets"
          }
        },
        "triplets": {
          "type": "array",
          "description": "Serialized only for specific games. Ordering of the three numbers consisting a triplet is irrelevant",
          "items": {
            "$ref": "#/definitions/PairTriplets"
          }
        }
      }
    },
    "OccurrenceDelayNumberPosition": {
      "type": "object",
      "properties": {
        "delays": {
          "type": "integer",
          "format": "int32"
        },
        "occurrences": {
          "type": "integer",
          "format": "int32"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "Should be serialized only for games that are affected by the position of numbers within a draw (i.e. Super3 and Proto). The lowest possible value for a position is 1"
        }
      }
    },
    "PairTriplets": {
      "type": "object",
      "properties": {
        "numbers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "occurrences": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GameSummaryDTO": {
      "type": "object",
      "properties": {
        "gameStateId": {
          "type": "integer",
          "format": "int32",
          "description": "the unique identifier of the game"
        },
        "name": {
          "type": "string",
          "description": "the name of the game"
        },
        "category": {
          "type": "string",
          "description": "the category of the game",
          "enum": [
            "DBG",
            "IWG"
          ]
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "the status of the game"
        }
      }
    },
    "JackpotCategoryAmountsDTO": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "integer",
          "format": "int32",
          "description": "The category id for which the jackpot is calculated"
        },
        "guaranteed": {
          "type": "number",
          "format": "double",
          "description": "The minimum jackpot amount that will be distributed"
        },
        "current": {
          "type": "number",
          "format": "double",
          "description": "The current jackpot amount"
        },
        "jackpotStatus": {
          "type": "string",
          "description": "The jackpot status",
          "enum": [
            "DEFINED",
            "UNDEFINED",
            "ESTIMATED"
          ]
        }
      }
    },
    "JackpotDTO": {
      "type": "object",
      "properties": {
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the active draw, or the id of the not published draw in case no active draw exists"
        },
        "jackpot": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JackpotCategoryAmountsDTO"
          }
        }
      }
    },
    "EntityNotificationDTOResponse": {
      "type": "object",
      "properties": {
        "stateId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EntityNotificationDTO": {
      "type": "object",
      "required": [
        "namespace",
        "stateId"
      ],
      "properties": {
        "stateId": {
          "type": "integer",
          "format": "int64"
        },
        "previousStateId": {
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "type": "string"
        },
        "draw": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "transactionsControl": {
          "type": "object"
        },
        "validationsState": {
          "type": "object"
        }
      },
      "description": "An object that contains information about a state change of an entity"
    },
    "SimpleEntityNotificationDTO": {
      "type": "object",
      "required": [
        "namespace",
        "stateId"
      ],
      "properties": {
        "stateId": {
          "type": "integer",
          "format": "int64"
        },
        "previousStateId": {
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "type": "string"
        }
      },
      "description": "An simple object that contains information about a state change of an entity"
    },
    "ProviderDTO": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ProviderRegistrationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ProviderUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "RetailerDTO": {
      "type": "object",
      "properties": {
        "retailerId": {
          "type": "integer",
          "format": "int64",
          "description": "Retailer Id"
        },
        "bettingVerticalValues": {
          "type": "string",
          "description": "Betting Vertical Values"
        },
        "email1": {
          "type": "string",
          "description": "E-mail 1"
        },
        "email2": {
          "type": "string",
          "description": "E-mail 2"
        },
        "fax": {
          "type": "string",
          "description": "Fax"
        },
        "phone1": {
          "type": "string",
          "description": "Phone 1"
        },
        "phone2": {
          "type": "string",
          "description": "Phone 2"
        },
        "currencyCode": {
          "type": "string",
          "description": "Currency Code"
        },
        "countryCode": {
          "type": "string",
          "description": "Country Code"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "houseNumber": {
          "type": "string",
          "description": "House Number"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "postCode": {
          "type": "string",
          "description": "Post Code"
        },
        "region": {
          "type": "string",
          "description": "Region"
        },
        "street": {
          "type": "string",
          "description": "Street"
        },
        "town": {
          "type": "string",
          "description": "Town"
        },
        "placementEnabled": {
          "type": "boolean",
          "description": "Placement Enabled"
        },
        "retailerStatus": {
          "type": "string",
          "description": "Retailer Status",
          "enum": [
            "ACTIVE",
            "NOT_ACTIVE"
          ]
        },
        "settlementEnabled": {
          "type": "boolean",
          "description": "Settlement Enabled"
        }
      }
    },
    "RetailerUpdateRequest": {
      "type": "object",
      "properties": {
        "bettingVerticalValues": {
          "type": "string",
          "description": "Betting Vertical Values"
        },
        "email1": {
          "type": "string",
          "description": "E-mail 1"
        },
        "email2": {
          "type": "string",
          "description": "E-mail 2"
        },
        "fax": {
          "type": "string",
          "description": "Fax"
        },
        "phone1": {
          "type": "string",
          "description": "Phone 1"
        },
        "phone2": {
          "type": "string",
          "description": "Phone 2"
        },
        "currencyCode": {
          "type": "string",
          "description": "Currency Code"
        },
        "countryCode": {
          "type": "string",
          "description": "Country Code"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "houseNumber": {
          "type": "string",
          "description": "House Number"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "postCode": {
          "type": "string",
          "description": "Post Code"
        },
        "region": {
          "type": "string",
          "description": "Region"
        },
        "street": {
          "type": "string",
          "description": "Street"
        },
        "town": {
          "type": "string",
          "description": "Town"
        },
        "placementEnabled": {
          "type": "boolean",
          "description": "Placement Enabled"
        },
        "retailerStatus": {
          "type": "string",
          "description": "Retailer Status",
          "enum": [
            "ACTIVE",
            "NOT_ACTIVE"
          ]
        },
        "settlementEnabled": {
          "type": "boolean",
          "description": "Settlement Enabled"
        }
      }
    },
    "EntityStateDTO": {
      "type": "object",
      "properties": {
        "stateId": {
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "type": "string"
        },
        "draw": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "transactionsControl": {
          "type": "object"
        },
        "validationsState": {
          "type": "object"
        },
        "retailer": {
          "type": "object"
        }
      }
    },
    "PageEntityStateDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityStateDTO"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        }
      }
    },
    "Serializable": {
      "type": "object"
    },
    "GeneralGameStatisticsDTO": {
      "type": "object",
      "properties": {
        "header": {
          "description": "The basic info for the current game",
          "$ref": "#/definitions/StatisticsHeader"
        },
        "panels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PanelStatistics"
          }
        }
      }
    },
    "ListNumberStatisticsDTO": {
      "type": "object",
      "properties": {
        "occurrence": {
          "type": "integer",
          "format": "int32"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "repeat": {
          "type": "integer",
          "format": "int32"
        },
        "numbers": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "NumberStatisticsDTO": {
      "type": "object",
      "properties": {
        "occurrence": {
          "type": "integer",
          "format": "int32"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "repeat": {
          "type": "integer",
          "format": "int32"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PanelStatistics": {
      "type": "object",
      "properties": {
        "panelId": {
          "type": "integer",
          "format": "int32"
        },
        "numbers": {
          "type": "array",
          "description": "Denotes stats info for simple numbers for the current game",
          "items": {
            "$ref": "#/definitions/NumberStatisticsDTO"
          }
        },
        "bonusNumbers": {
          "type": "array",
          "description": "Denotes stats info for simple numbers for the current game",
          "items": {
            "$ref": "#/definitions/NumberStatisticsDTO"
          }
        },
        "pairs": {
          "type": "array",
          "description": "Denotes stats info for pairs of numbers for the current game",
          "items": {
            "$ref": "#/definitions/ListNumberStatisticsDTO"
          }
        },
        "triplets": {
          "type": "array",
          "description": "Denotes stats info for triplets of numbers for the current game",
          "items": {
            "$ref": "#/definitions/ListNumberStatisticsDTO"
          }
        },
        "sideBets": {
          "description": "Denotes sideBets statistics for the current game",
          "$ref": "#/definitions/SideBetsStatisticsDTO"
        }
      }
    },
    "SideBetsStatisticsDTO": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "description": "Denotes stats info for the columns for the current game",
          "items": {
            "$ref": "#/definitions/NumberStatisticsDTO"
          }
        },
        "draw": {
          "description": "Denotes stats for the draws of the game",
          "$ref": "#/definitions/StatisticsDTO"
        },
        "even": {
          "description": "Denotes stats for the evens of the game",
          "$ref": "#/definitions/StatisticsDTO"
        },
        "odd": {
          "description": "Denotes stats for the odds of the game",
          "$ref": "#/definitions/StatisticsDTO"
        }
      }
    },
    "StatisticsDTO": {
      "type": "object",
      "properties": {
        "occurrence": {
          "type": "integer",
          "format": "int32"
        },
        "delay": {
          "type": "integer",
          "format": "int32"
        },
        "repeat": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SubscribableEntityOptions": {
      "type": "object",
      "properties": {
        "variation": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "includeDrawAnimation": {
          "type": "boolean"
        }
      }
    },
    "SubscriberDTO": {
      "type": "object",
      "properties": {
        "subscriberId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "draw",
              "transactions",
              "validations",
              "retailer"
            ]
          }
        },
        "gameIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "messageBody": {
          "type": "string",
          "enum": [
            "none",
            "notification",
            "entity"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "rest"
          ]
        },
        "path": {
          "type": "string"
        },
        "httpMethod": {
          "type": "string"
        },
        "maxRetries": {
          "type": "integer",
          "format": "int32"
        },
        "retryInterval": {
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SubscribableEntityOptions"
          }
        }
      }
    },
    "SubscriberUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "draw",
              "transactions",
              "validations",
              "retailer"
            ]
          }
        },
        "gameIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "messageBody": {
          "type": "string",
          "enum": [
            "none",
            "notification",
            "entity"
          ]
        },
        "path": {
          "type": "string"
        },
        "httpMethod": {
          "type": "string",
          "pattern": "^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS|TRACE)$"
        },
        "maxRetries": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 100
        },
        "retryInterval": {
          "type": "integer",
          "format": "int32",
          "minimum": 500
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SubscribableEntityOptions"
          }
        }
      }
    },
    "SubscriberRegistrationRequest": {
      "type": "object",
      "required": [
        "messageBody",
        "method",
        "name",
        "path"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "draw",
              "transactions",
              "validations",
              "retailer"
            ]
          }
        },
        "gameIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "messageBody": {
          "type": "string",
          "enum": [
            "none",
            "notification",
            "entity"
          ]
        },
        "method": {
          "type": "string",
          "enum": [
            "rest"
          ]
        },
        "path": {
          "type": "string"
        },
        "httpMethod": {
          "type": "string",
          "pattern": "^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS|TRACE)$"
        },
        "maxRetries": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 100
        },
        "retryInterval": {
          "type": "integer",
          "format": "int32",
          "minimum": 500
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SubscribableEntityOptions"
          }
        }
      }
    }
  }
}