{
	"swagger": "2.0",
	"info": {
		"description": "API specification",
		"version": "1.0",
		"title": "consumables"
	},
	"tags": [
		{
			"name": "Consumable Categories Configuration"
		},
		{
			"name": "Consumables Configuration"
		},
		{
			"name": "Game Family Configuration"
		},
		{
			"name": "Loyalty Profiles Configuration"
		},
		{
			"name": "Products Configuration"
		},
		{
			"name": "Ticket Categories Configuration"
		},
		{
			"name": "Tickets Configuration"
		},
		{
			"name": "Ticket Status Configuration"
		},
		{
			"name": "Vas Categories Configuration"
		},
		{
			"name": "Vas Configuration"
		}
	],
	"schemes": [
		"http",
		"https"
	],
	"paths": {
		"/api/v1.0/consumables/categories": {
			"get": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Retrieve a page of all consumable categories",
				"description": "Retrieve a page of all consumable categories",
				"operationId": "getConsumableCategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "binded",
						"in": "query",
						"required": false,
						"type": "boolean",
						"default": false
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "ConsumableCategoryDTO",
								"$ref": "#/definitions/ConsumableCategoryDTO"
							}
						},
						"responseSchema": {
							"type": "array",
							"items": {
								"originalRef": "ConsumableCategoryDTO",
								"$ref": "#/definitions/ConsumableCategoryDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Register a new consumable category",
				"description": "Register a new consumable category",
				"operationId": "doRegisterConsumableCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableCategoryRegistrationRequest",
							"$ref": "#/definitions/ConsumableCategoryRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/consumables/categories/{id}": {
			"get": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Retrieve a single consumable category",
				"description": "Retrieve a single consumable category",
				"operationId": "getConsumableCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The consumable category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Update a consumable category",
				"description": "Update a consumable category",
				"operationId": "doUpdateConsumableCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The consumable category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableCategoryUpdateRequest",
							"$ref": "#/definitions/ConsumableCategoryUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Delete a consumable category",
				"description": "Delete a consumable category",
				"operationId": "deleteConsumableCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The consumable category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						},
						"responseSchema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/api/v1.0/consumables/categories/external/{externalId}": {
			"get": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Retrieve a single Consumable category by externalId",
				"description": "Retrieve a single consumable category by externalId",
				"operationId": "getConsumableCategoryByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable category id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Update a Consumable category by externalId",
				"description": "Update a consumable category by externalId",
				"operationId": "doUpdateConsumableCategoryExternal",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable category id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableCategoryUpdateRequest",
							"$ref": "#/definitions/ConsumableCategoryUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableCategoryDTO",
							"$ref": "#/definitions/ConsumableCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Consumable Categories Configuration"
				],
				"summary": "Delete a Consumable category by externalId",
				"description": "Delete a consumable category by externalId",
				"operationId": "deleteConsumableCategoryExternal",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable category id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						},
						"responseSchema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/api/v1.0/consumables": {
			"get": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Retrieve a page of all consumables",
				"description": "Retrieve a page of all consumables",
				"operationId": "findAllConsumables",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "categoryId",
						"in": "query",
						"description": "The consumable category id",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The consumable status (0 -> INACTIVE, 1 -> ACTIVE)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 0
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 10
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "asc"
					},
					{
						"name": "column",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "id"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "PageConsumableDTO",
							"$ref": "#/definitions/PageConsumableDTO"
						},
						"responseSchema": {
							"originalRef": "PageConsumableDTO",
							"$ref": "#/definitions/PageConsumableDTO"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Register a new consumable",
				"description": "Register a new consumable",
				"operationId": "registerConsumable",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableRegistrationRequest",
							"$ref": "#/definitions/ConsumableRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/consumables/{id}": {
			"get": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Retrieve a single consumable",
				"description": "Retrieve a single consumable",
				"operationId": "getConsumable",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The consumable id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Update a consumable",
				"description": "\n Update a consumable\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10003  |\tConsumable already in use                 |\n|",
				"operationId": "updateConsumable",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The consumable id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableUpdateRequest",
							"$ref": "#/definitions/ConsumableUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Delete a consumable",
				"description": "Delete a consumable",
				"operationId": "deleteConsumable",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The consumable id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/consumables/bulk": {
			"post": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Upload consumables",
				"description": "Upload consumables",
				"operationId": "bulkInsertConsumables",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "ConsumableBulkItem",
								"$ref": "#/definitions/ConsumableBulkItem"
							}
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "BulkInsertResponse",
							"$ref": "#/definitions/BulkInsertResponse"
						},
						"responseSchema": {
							"originalRef": "BulkInsertResponse",
							"$ref": "#/definitions/BulkInsertResponse"
						}
					}
				}
			}
		},
		"/api/v1.0/consumables/external/{externalId}": {
			"get": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Retrieve a single consumable by external Id",
				"description": "Retrieve a single consumable by external Id",
				"operationId": "getConsumableByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Retrieve a single consumable by external Id",
				"description": "Retrieve a single consumable by external Id",
				"operationId": "updateConsumableProductByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableUpdateRequest",
							"$ref": "#/definitions/ConsumableUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						},
						"responseSchema": {
							"originalRef": "ConsumableDTO",
							"$ref": "#/definitions/ConsumableDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Consumables Configuration"
				],
				"summary": "Retrieve a single consumable by external Id",
				"description": "Retrieve a single consumable by external Id",
				"operationId": "deleteConsumableProductByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"responseSchema": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			}
		},
		"/api/v1.0/game-families": {
			"get": {
				"tags": [
					"Game Family Configuration"
				],
				"summary": "Retrieve Game Families",
				"description": "",
				"operationId": "findGameFamilies",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "GameFamily",
								"$ref": "#/definitions/GameFamily"
							}
						},
						"responseSchema": {
							"type": "array",
							"items": {
								"originalRef": "GameFamily",
								"$ref": "#/definitions/GameFamily"
							}
						}
					}
				}
			}
		},
		"/api/v1.0/loyalty/profiles": {
			"get": {
				"tags": [
					"Loyalty Profiles Configuration"
				],
				"summary": "Retrieve a page of all Loyalty Profiles",
				"description": "",
				"operationId": "findAllLoyaltyProfiles",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 0
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 10
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "asc"
					},
					{
						"name": "column",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "id"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "PageLoyaltyProfileDTO",
							"$ref": "#/definitions/PageLoyaltyProfileDTO"
						},
						"responseSchema": {
							"originalRef": "PageLoyaltyProfileDTO",
							"$ref": "#/definitions/PageLoyaltyProfileDTO"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Loyalty Profiles Configuration"
				],
				"summary": "Register a new Loyalty Profile",
				"description": "",
				"operationId": "registerLoyaltyProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "LoyaltyProfileRegistrationRequest",
							"$ref": "#/definitions/LoyaltyProfileRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "LoyaltyProfileDTO",
							"$ref": "#/definitions/LoyaltyProfileDTO"
						},
						"responseSchema": {
							"originalRef": "LoyaltyProfileDTO",
							"$ref": "#/definitions/LoyaltyProfileDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/loyalty/profiles/{id}": {
			"get": {
				"tags": [
					"Loyalty Profiles Configuration"
				],
				"summary": "Retrieve a single Loyalty Profile",
				"description": "",
				"operationId": "getLoyaltyProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "LoyaltyProfileDTO",
							"$ref": "#/definitions/LoyaltyProfileDTO"
						},
						"responseSchema": {
							"originalRef": "LoyaltyProfileDTO",
							"$ref": "#/definitions/LoyaltyProfileDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Loyalty Profiles Configuration"
				],
				"summary": "Update a Loyalty Profile",
				"description": "",
				"operationId": "updateLoyaltyProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "LoyaltyProfileUpdateRequest",
							"$ref": "#/definitions/LoyaltyProfileUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "LoyaltyProfileDTO",
							"$ref": "#/definitions/LoyaltyProfileDTO"
						},
						"responseSchema": {
							"originalRef": "LoyaltyProfileDTO",
							"$ref": "#/definitions/LoyaltyProfileDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Loyalty Profiles Configuration"
				],
				"summary": "Delete a Loyalty Profile",
				"description": "",
				"operationId": "deleteLoyaltyProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/products": {
			"get": {
				"tags": [
					"Products Configuration"
				],
				"summary": "Retrieve a page of all products",
				"description": "",
				"operationId": "findProducts",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 0
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 10
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "asc"
					},
					{
						"name": "column",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "name"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "PageProduct",
							"$ref": "#/definitions/PageProduct"
						},
						"responseSchema": {
							"originalRef": "PageProduct",
							"$ref": "#/definitions/PageProduct"
						}
					}
				}
			}
		},
		"/api/v1.0/tickets/categories/{id}/sub-categories": {
			"get": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Retrieve subcategories for a ticket category",
				"description": "Retrieve subcategories for a ticket category",
				"operationId": "getTicketCategorySubCategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "TicketSubCategoryDTO",
								"$ref": "#/definitions/TicketSubCategoryDTO"
							}
						},
						"responseSchema": {
							"type": "array",
							"items": {
								"originalRef": "TicketSubCategoryDTO",
								"$ref": "#/definitions/TicketSubCategoryDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Register a new subcategory for a ticket category",
				"description": "Register a new subcategory for a ticket category",
				"operationId": "registerTicketCategorySubCategy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketSubCategoryRegistrationRequest",
							"$ref": "#/definitions/TicketSubCategoryRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketSubCategoryDTO",
							"$ref": "#/definitions/TicketSubCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketSubCategoryDTO",
							"$ref": "#/definitions/TicketSubCategoryDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/tickets/categories/{id}/sub-categories/{subCatId}": {
			"get": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Retrieve a subcategory for a ticket category",
				"description": "Retrieve a subcategory for a ticket category",
				"operationId": "getTicketCategorySubCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "subCatId",
						"in": "path",
						"description": "The subcategory id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketSubCategoryDTO",
							"$ref": "#/definitions/TicketSubCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketSubCategoryDTO",
							"$ref": "#/definitions/TicketSubCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Update a subcategory for a ticket category",
				"description": "Update a subcategory for a ticket category",
				"operationId": "updateTicketCategorySubCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "subCatId",
						"in": "path",
						"description": "The subcategory id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketSubCategoryUpdateRequest",
							"$ref": "#/definitions/TicketSubCategoryUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketSubCategoryDTO",
							"$ref": "#/definitions/TicketSubCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketSubCategoryDTO",
							"$ref": "#/definitions/TicketSubCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Delete a subcategory for a ticket category",
				"description": "Delete a subcategory for a ticket category",
				"operationId": "deleteTicketCategorySubCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "subCatId",
						"in": "path",
						"description": "The subcategory id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/tickets/categories/bulk": {
			"post": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Upload consumables",
				"description": "Upload consumables",
				"operationId": "bulkInsertTickets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "TicketCategoryBulkItem",
								"$ref": "#/definitions/TicketCategoryBulkItem"
							}
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "BulkInsertResponse",
							"$ref": "#/definitions/BulkInsertResponse"
						},
						"responseSchema": {
							"originalRef": "BulkInsertResponse",
							"$ref": "#/definitions/BulkInsertResponse"
						}
					}
				}
			}
		},
		"/api/v1.0/tickets/categories": {
			"get": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Retrieve a page of all ticket categories",
				"description": "Retrieve a page of all ticket categories",
				"operationId": "findAllTicketCategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "The ticket category type",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "TicketCategoryDTO",
								"$ref": "#/definitions/TicketCategoryDTO"
							}
						},
						"responseSchema": {
							"type": "array",
							"items": {
								"originalRef": "TicketCategoryDTO",
								"$ref": "#/definitions/TicketCategoryDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Register a new ticket category",
				"description": "Register a new ticket category",
				"operationId": "registerTicketCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketCategoryRegistrationRequest",
							"$ref": "#/definitions/TicketCategoryRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/tickets/categories/{id}": {
			"get": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Retrieve a single ticket category",
				"description": "Retrieve a single ticket category",
				"operationId": "getTicketCategory_1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Update a ticket category",
				"description": "Update a ticket category",
				"operationId": "updateTicketCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketCategoryUpdateRequest",
							"$ref": "#/definitions/TicketCategoryUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Delete a ticket category",
				"description": "Delete a ticket category",
				"operationId": "deleteTicketCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/tickets/categories/external/{externalId}": {
			"get": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Retrieve a single ticket category",
				"description": "Retrieve a single ticket category",
				"operationId": "getTicketCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The ticket category external id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Update a ticket category",
				"description": "Update a ticket category",
				"operationId": "updateTicketCategoryByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The ticket category external id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketCategoryUpdateRequest",
							"$ref": "#/definitions/TicketCategoryUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "TicketCategoryDTO",
							"$ref": "#/definitions/TicketCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Ticket Categories Configuration"
				],
				"summary": "Delete a ticket category",
				"description": "Delete a ticket category",
				"operationId": "deleteTicketCategory_1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The ticket category id by external Id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/tickets": {
			"get": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Retrieve a page of all tickets",
				"description": "Retrieve a page of all tickets",
				"operationId": "findTickets",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "insertedFrom",
						"in": "query",
						"description": "The inserted start date",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "insertedTo",
						"in": "query",
						"description": "The inserted end date",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "resolvedFrom",
						"in": "query",
						"description": "The resolved start date",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "resolvedTo",
						"in": "query",
						"description": "The resolved end date",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "retailerId",
						"in": "query",
						"description": "The ticket retailer id",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "statusId",
						"in": "query",
						"description": "The ticket status id",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The ticket type",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "keyword",
						"in": "query",
						"description": "The ticket keyword",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 0
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 10
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "asc"
					},
					{
						"name": "column",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "id"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketPage",
							"$ref": "#/definitions/TicketPage"
						},
						"responseSchema": {
							"originalRef": "TicketPage",
							"$ref": "#/definitions/TicketPage"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Register a new ticket",
				"description": "Register a new ticket",
				"operationId": "registerTicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketRegistrationRequest",
							"$ref": "#/definitions/TicketRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						},
						"responseSchema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/tickets/{id}": {
			"get": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Retrieve a single ticket",
				"description": "Retrieve a single ticket",
				"operationId": "getTicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						},
						"responseSchema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Update a ticket",
				"description": "\n Update a ticket\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10002  |\tUnable to update closed ticket                 |\n|",
				"operationId": "updateTicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketUpdateRequest",
							"$ref": "#/definitions/TicketUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						},
						"responseSchema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Delete a ticket",
				"description": "Delete a ticket",
				"operationId": "deleteTicket",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/tickets/external/{externalId}": {
			"get": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Retrieve a single ticket by external id",
				"description": "Retrieve a single ticket by external id",
				"operationId": "getTicketByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The ticket id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						},
						"responseSchema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Update a ticket by external id",
				"description": "\n Update a ticket\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10002  |\tUnable to update closed ticket                 |\n|",
				"operationId": "updateTicketByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The ticket external id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketUpdateRequest",
							"$ref": "#/definitions/TicketUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						},
						"responseSchema": {
							"originalRef": "TicketDTO",
							"$ref": "#/definitions/TicketDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Tickets Configuration"
				],
				"summary": "Delete a ticket by external id",
				"description": "Delete a ticket by external id",
				"operationId": "deleteTicketByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The ticket external id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/tickets/statuses/{id}": {
			"get": {
				"tags": [
					"Ticket Status Configuration"
				],
				"summary": "Retrieve a single ticket status",
				"description": "Retrieve a single ticket status",
				"operationId": "getTicketStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket status id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketStatusDTO",
							"$ref": "#/definitions/TicketStatusDTO"
						},
						"responseSchema": {
							"originalRef": "TicketStatusDTO",
							"$ref": "#/definitions/TicketStatusDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Ticket Status Configuration"
				],
				"summary": "Update a ticket status",
				"description": "Update a ticket status",
				"operationId": "updateTicketStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket status id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketStatusUpdateRequest",
							"$ref": "#/definitions/TicketStatusUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketStatusDTO",
							"$ref": "#/definitions/TicketStatusDTO"
						},
						"responseSchema": {
							"originalRef": "TicketStatusDTO",
							"$ref": "#/definitions/TicketStatusDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Ticket Status Configuration"
				],
				"summary": "Delete a ticket status",
				"description": "\n Delete a ticket status\n\n Possible error codes:\n\n| *Code*|                *Description*                             |\n|-------|----------------------------------------------------------|\n| 10002  |\tCan not delete built in ticket status                 |\n|",
				"operationId": "deleteTicketStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ticket status id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/tickets/statuses": {
			"get": {
				"tags": [
					"Ticket Status Configuration"
				],
				"summary": "Retrieve a page of all ticket statuses",
				"description": "Retrieve a page of all ticket statuses",
				"operationId": "findAllTicketStatuses",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "TicketStatusDTO",
								"$ref": "#/definitions/TicketStatusDTO"
							}
						},
						"responseSchema": {
							"type": "array",
							"items": {
								"originalRef": "TicketStatusDTO",
								"$ref": "#/definitions/TicketStatusDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Ticket Status Configuration"
				],
				"summary": "Register a new ticket status",
				"description": "Register a new ticket status",
				"operationId": "registerTicketStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "TicketStatusRegistrationRequest",
							"$ref": "#/definitions/TicketStatusRegistrationRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "TicketStatusDTO",
							"$ref": "#/definitions/TicketStatusDTO"
						},
						"responseSchema": {
							"originalRef": "TicketStatusDTO",
							"$ref": "#/definitions/TicketStatusDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/vas/categories": {
			"get": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Retrieve a page of all vas categories",
				"description": "Retrieve a page of all vas categories",
				"operationId": "getVasCategories",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "binded",
						"in": "query",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"originalRef": "VasCategoryDTO",
								"$ref": "#/definitions/VasCategoryDTO"
							}
						},
						"responseSchema": {
							"type": "array",
							"items": {
								"originalRef": "VasCategoryDTO",
								"$ref": "#/definitions/VasCategoryDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Register a new vas category",
				"description": "Register a new vas category",
				"operationId": "saveVasCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "VasCategoryRegistrationRequest",
							"$ref": "#/definitions/VasCategoryRegistrationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/vas/categories/{id}": {
			"get": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Retrieve a single vas category",
				"description": "Retrieve a single vas category",
				"operationId": "getVasCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The vas category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Update an existing vas category",
				"description": "Update a new vas category",
				"operationId": "updateVasCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The vas category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableCategoryUpdateRequest",
							"$ref": "#/definitions/ConsumableCategoryUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Delete an existing vas category",
				"description": "Delete a new vas category",
				"operationId": "deleteVasCategory",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The vas category id",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						},
						"responseSchema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/api/v1.0/vas/categories/external/{externalId}": {
			"get": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Retrieve a single VAS category by externalId",
				"description": "Retrieve a single consumable category by externalId",
				"operationId": "getConsumableCategoryByExternalId_1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable category id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Update a VAS category by externalId",
				"description": "Update a consumable category by externalId",
				"operationId": "doUpdateConsumableCategoryExternal_1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable category id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "ConsumableCategoryUpdateRequest",
							"$ref": "#/definitions/ConsumableCategoryUpdateRequest"
						}
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						},
						"responseSchema": {
							"originalRef": "VasCategoryDTO",
							"$ref": "#/definitions/VasCategoryDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Vas Categories Configuration"
				],
				"summary": "Delete a VAS category by externalId",
				"description": "Delete a consumable category by externalId",
				"operationId": "deleteConsumableCategoryExternal_1",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external consumable category id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "Authorization",
						"in": "header",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						},
						"responseSchema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/api/v1.0/vas/{id}": {
			"get": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Retrieve a single vas",
				"description": "Retrieve a single vas",
				"operationId": "getVasProduct",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The vas id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						},
						"responseSchema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Update an existing vas",
				"description": "Update an existing vas",
				"operationId": "updateVasProduct",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The vas id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "VasUpdateRequest",
							"$ref": "#/definitions/VasUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						},
						"responseSchema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Delete an existing vas",
				"description": "Delete an existing vas",
				"operationId": "deleteVasProduct",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The vas id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/api/v1.0/vas/external/{externalId}": {
			"get": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Retrieve a single vas by external Id",
				"description": "Retrieve a single vas by external Id",
				"operationId": "getVasProductByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external vas id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						},
						"responseSchema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Retrieve a single vas by external Id",
				"description": "Retrieve a single vas by external Id",
				"operationId": "updateVasProductByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external vas id",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "VasUpdateRequest",
							"$ref": "#/definitions/VasUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						},
						"responseSchema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Retrieve a single vas by external Id",
				"description": "Retrieve a single vas by external Id",
				"operationId": "deleteVasProductByExternalId",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "externalId",
						"in": "path",
						"description": "The external vas id",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"responseSchema": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			}
		},
		"/api/v1.0/vas": {
			"get": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Retrieve a page of all vas products",
				"description": "Retrieve a page of all vas products",
				"operationId": "findAllVasProducts",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "categoryId",
						"in": "query",
						"description": "The vas category id",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The vas status (0 -> INACTIVE, 1 -> ACTIVE)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 0
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 10
					},
					{
						"name": "sort",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "asc"
					},
					{
						"name": "column",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "id"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "PageVasDTO",
							"$ref": "#/definitions/PageVasDTO"
						},
						"responseSchema": {
							"originalRef": "PageVasDTO",
							"$ref": "#/definitions/PageVasDTO"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Register a new vas",
				"description": "Register a new vas",
				"operationId": "registerVasProduct",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"originalRef": "VasRegistrationRequest",
							"$ref": "#/definitions/VasRegistrationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						},
						"responseSchema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						}
					}
				}
			}
		},
		"/api/v1.0/vas/barcode/{barcode}": {
			"get": {
				"tags": [
					"Vas Configuration"
				],
				"summary": "Retrieve a single vas by barcode",
				"description": "Retrieve a single vas by barcode",
				"operationId": "getVasProductByBarcode",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "barcode",
						"in": "path",
						"description": "The vas barcode",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						},
						"responseSchema": {
							"originalRef": "VasDTO",
							"$ref": "#/definitions/VasDTO"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"ConsumableCategoryDTO": {
			"type": "object",
			"required": [
				"id",
				"name"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable category id"
				},
				"name": {
					"type": "string",
					"description": "The consumable category name",
					"minLength": 1,
					"maxLength": 64
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The consumable category external id"
				},
				"consumables": {
					"type": "array",
					"description": "The consumables which belong to consumable category",
					"items": {
						"originalRef": "ConsumableDTO",
						"$ref": "#/definitions/ConsumableDTO"
					}
				}
			}
		},
		"ConsumableDTO": {
			"type": "object",
			"required": [
				"categoryId",
				"id",
				"inserted",
				"price",
				"status",
				"title"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64",
					"description": "The consumable id"
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The consumable external id"
				},
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable category id"
				},
				"title": {
					"type": "string",
					"description": "The consumable title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The consumable description",
					"minLength": 1,
					"maxLength": 128
				},
				"status": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable status",
					"minimum": 0,
					"maximum": 1
				},
				"supplier": {
					"type": "string",
					"description": "The consumable supplier"
				},
				"partNumber": {
					"type": "string",
					"description": "The consumable part number"
				},
				"price": {
					"type": "number",
					"description": "The consumable price"
				},
				"inserted": {
					"type": "string",
					"format": "date-time",
					"description": "The consumable inserted date"
				}
			}
		},
		"ConsumableCategoryRegistrationRequest": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "The consumable category name",
					"minLength": 1,
					"maxLength": 64
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The consumable category external id"
				}
			},
			"description": "The consumable category registration request"
		},
		"ConsumableCategoryUpdateRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "The consumable category name",
					"minLength": 1,
					"maxLength": 64
				}
			},
			"description": "The consumable category update request"
		},
		"Page": {
			"type": "object",
			"properties": {
				"totalElements": {
					"type": "integer",
					"format": "int64"
				},
				"totalPages": {
					"type": "integer",
					"format": "int32"
				},
				"first": {
					"type": "boolean"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"numberOfElements": {
					"type": "integer",
					"format": "int32"
				},
				"pageable": {
					"originalRef": "Pageable",
					"$ref": "#/definitions/Pageable"
				},
				"last": {
					"type": "boolean"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"content": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"number": {
					"type": "integer",
					"format": "int32"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"PageConsumableDTO": {
			"type": "object",
			"properties": {
				"totalElements": {
					"type": "integer",
					"format": "int64"
				},
				"totalPages": {
					"type": "integer",
					"format": "int32"
				},
				"first": {
					"type": "boolean"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"numberOfElements": {
					"type": "integer",
					"format": "int32"
				},
				"pageable": {
					"originalRef": "Pageable",
					"$ref": "#/definitions/Pageable"
				},
				"last": {
					"type": "boolean"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"content": {
					"type": "array",
					"items": {
						"originalRef": "ConsumableDTO",
						"$ref": "#/definitions/ConsumableDTO"
					}
				},
				"number": {
					"type": "integer",
					"format": "int32"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Pageable": {
			"type": "object",
			"properties": {
				"pageNumber": {
					"type": "integer",
					"format": "int32"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"unpaged": {
					"type": "boolean"
				},
				"paged": {
					"type": "boolean"
				},
				"pageSize": {
					"type": "integer",
					"format": "int32"
				},
				"offset": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"Sort": {
			"type": "object",
			"properties": {
				"unsorted": {
					"type": "boolean"
				},
				"sorted": {
					"type": "boolean"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"ConsumableUpdateRequest": {
			"type": "object",
			"required": [
				"status"
			],
			"properties": {
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable category id"
				},
				"title": {
					"type": "string",
					"description": "The consumable title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The consumable description",
					"minLength": 0,
					"maxLength": 128
				},
				"status": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable status (0 -> INACTIVE, 1 -> ACTIVE)",
					"minimum": 0,
					"maximum": 1
				},
				"supplier": {
					"type": "string",
					"description": "The consumable supplier"
				},
				"partNumber": {
					"type": "string",
					"description": "The consumable part number"
				},
				"price": {
					"type": "number",
					"description": "The consumable price"
				}
			},
			"description": "The consumable update request"
		},
		"ConsumableRegistrationRequest": {
			"type": "object",
			"required": [
				"categoryId",
				"price",
				"status",
				"title"
			],
			"properties": {
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable category id"
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The consumable category external id"
				},
				"title": {
					"type": "string",
					"description": "The consumable title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The consumable description",
					"minLength": 0,
					"maxLength": 128
				},
				"status": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable status (0 -> INACTIVE, 1 -> ACTIVE)",
					"minimum": 0,
					"maximum": 1
				},
				"supplier": {
					"type": "string",
					"description": "The consumable supplier"
				},
				"partNumber": {
					"type": "string",
					"description": "The consumable part number"
				},
				"price": {
					"type": "number",
					"description": "The consumable price"
				}
			},
			"description": "The consumable registration request"
		},
		"BulkInsertResponse": {
			"type": "object",
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"originalRef": "Error",
						"$ref": "#/definitions/Error"
					}
				}
			},
			"description": "The consumable bulk insert response"
		},
		"Error": {
			"type": "object",
			"properties": {
				"index": {
					"type": "integer",
					"format": "int32"
				},
				"info": {
					"type": "object"
				}
			}
		},
		"ConsumableBulkItem": {
			"type": "object",
			"required": [
				"categoryName",
				"price",
				"status",
				"title"
			],
			"properties": {
				"categoryName": {
					"type": "string",
					"description": "The consumable category name"
				},
				"title": {
					"type": "string",
					"description": "The consumable title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The consumable description",
					"minLength": 1,
					"maxLength": 128
				},
				"status": {
					"type": "string",
					"description": "The consumable status",
					"pattern": "0|1"
				},
				"supplier": {
					"type": "string",
					"description": "The consumable supplier"
				},
				"partNumber": {
					"type": "string",
					"description": "The consumable part number"
				},
				"price": {
					"type": "string"
				}
			},
			"description": "The consumable bulk item"
		},
		"Game": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"GameFamily": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"games": {
					"type": "array",
					"items": {
						"originalRef": "Game",
						"$ref": "#/definitions/Game"
					}
				}
			}
		},
		"LoyaltyPoint": {
			"type": "object",
			"required": [
				"credits",
				"gameId",
				"points"
			],
			"properties": {
				"gameId": {
					"type": "integer",
					"format": "int32"
				},
				"points": {
					"type": "integer",
					"format": "int64"
				},
				"credits": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"LoyaltyProfileDTO": {
			"type": "object",
			"required": [
				"id",
				"name"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"minLength": 0,
					"maxLength": 128
				},
				"points": {
					"type": "array",
					"items": {
						"originalRef": "LoyaltyPoint",
						"$ref": "#/definitions/LoyaltyPoint"
					}
				}
			}
		},
		"PageLoyaltyProfileDTO": {
			"type": "object",
			"properties": {
				"totalElements": {
					"type": "integer",
					"format": "int64"
				},
				"totalPages": {
					"type": "integer",
					"format": "int32"
				},
				"first": {
					"type": "boolean"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"numberOfElements": {
					"type": "integer",
					"format": "int32"
				},
				"pageable": {
					"originalRef": "Pageable",
					"$ref": "#/definitions/Pageable"
				},
				"last": {
					"type": "boolean"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"content": {
					"type": "array",
					"items": {
						"originalRef": "LoyaltyProfileDTO",
						"$ref": "#/definitions/LoyaltyProfileDTO"
					}
				},
				"number": {
					"type": "integer",
					"format": "int32"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"LoyaltyPoint_": {
			"type": "object",
			"required": [
				"credits",
				"gameId",
				"points"
			],
			"properties": {
				"gameId": {
					"type": "integer",
					"format": "int32"
				},
				"points": {
					"type": "integer",
					"format": "int64"
				},
				"credits": {
					"type": "number"
				}
			}
		},
		"LoyaltyProfileRegistrationRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"minLength": 0,
					"maxLength": 128
				},
				"points": {
					"type": "array",
					"items": {
						"originalRef": "LoyaltyPoint_",
						"$ref": "#/definitions/LoyaltyPoint_"
					}
				}
			}
		},
		"LoyaltyProfileUpdateRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"minLength": 0,
					"maxLength": 128
				},
				"points": {
					"type": "array",
					"items": {
						"originalRef": "LoyaltyPoint_",
						"$ref": "#/definitions/LoyaltyPoint_"
					}
				}
			}
		},
		"PageProduct": {
			"type": "object",
			"properties": {
				"totalElements": {
					"type": "integer",
					"format": "int64"
				},
				"totalPages": {
					"type": "integer",
					"format": "int32"
				},
				"first": {
					"type": "boolean"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"numberOfElements": {
					"type": "integer",
					"format": "int32"
				},
				"pageable": {
					"originalRef": "Pageable",
					"$ref": "#/definitions/Pageable"
				},
				"last": {
					"type": "boolean"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"content": {
					"type": "array",
					"items": {
						"originalRef": "Product",
						"$ref": "#/definitions/Product"
					}
				},
				"number": {
					"type": "integer",
					"format": "int32"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Product": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"price": {
					"type": "number"
				}
			}
		},
		"TicketSubCategoryDTO": {
			"type": "object",
			"required": [
				"id",
				"name"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket sub category id"
				},
				"name": {
					"type": "string",
					"description": "The ticket sub category name",
					"minLength": 1,
					"maxLength": 64
				}
			}
		},
		"TicketSubCategoryRegistrationRequest": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "The subcategory name",
					"minLength": 1,
					"maxLength": 64
				}
			},
			"description": "The subcategory registration request"
		},
		"TicketSubCategoryUpdateRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "The subcategory name",
					"minLength": 1,
					"maxLength": 64
				}
			},
			"description": "The subcategory update request"
		},
		"TicketCategoryBulkItem": {
			"type": "object",
			"required": [
				"categoryName",
				"type"
			],
			"properties": {
				"type": {
					"type": "string",
					"description": "The ticket category type",
					"pattern": "inquiry|request|troubleshoot|complaint|order"
				},
				"categoryName": {
					"type": "string",
					"description": "The ticket category name",
					"minLength": 1,
					"maxLength": 64
				},
				"subCategoryName": {
					"type": "string",
					"description": "The ticket sub category name",
					"minLength": 1,
					"maxLength": 64
				}
			}
		},
		"TicketCategoryDTO": {
			"type": "object",
			"required": [
				"id",
				"name",
				"type"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category id"
				},
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category type"
				},
				"name": {
					"type": "string",
					"description": "The ticket category name",
					"minLength": 1,
					"maxLength": 64
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The ticket category external Id"
				},
				"subCategories": {
					"type": "array",
					"description": "The ticket sub categories",
					"items": {
						"originalRef": "TicketSubCategoryDTO",
						"$ref": "#/definitions/TicketSubCategoryDTO"
					}
				}
			}
		},
		"TicketCategoryRegistrationRequest": {
			"type": "object",
			"required": [
				"name",
				"type"
			],
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category type"
				},
				"name": {
					"type": "string",
					"description": "The ticket category name",
					"minLength": 1,
					"maxLength": 64
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The ticket category externalId"
				}
			},
			"description": "The ticket category registration request"
		},
		"TicketCategoryUpdateRequest": {
			"type": "object",
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category name"
				},
				"name": {
					"type": "string",
					"description": "The ticket category type",
					"minLength": 1,
					"maxLength": 64
				}
			}
		},
		"OrderItem": {
			"type": "object",
			"required": [
				"basePrice",
				"consumableId",
				"description",
				"externalId",
				"price",
				"quantity",
				"type"
			],
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The order item type"
				},
				"consumableId": {
					"type": "integer",
					"format": "int32",
					"description": "The order item consumable id"
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The external id"
				},
				"description": {
					"type": "string",
					"description": "The order item description"
				},
				"price": {
					"type": "number",
					"description": "The order item price"
				},
				"quantity": {
					"type": "integer",
					"format": "int32",
					"description": "The order item quantity"
				},
				"basePrice": {
					"type": "number",
					"description": "The order item base price"
				},
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The order item category id"
				},
				"categoryDescription": {
					"type": "string",
					"description": "The order item category description"
				}
			}
		},
		"TicketDTO": {
			"type": "object",
			"required": [
				"categoryDescription",
				"categoryId",
				"id",
				"inserted",
				"name",
				"priority",
				"retailerId",
				"statusId",
				"type",
				"userId"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket id"
				},
				"retailerId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket retailer id"
				},
				"userId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket user id"
				},
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket type"
				},
				"name": {
					"type": "string",
					"description": "The ticket name",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The ticket description",
					"minLength": 0,
					"maxLength": 128
				},
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category"
				},
				"categoryDescription": {
					"type": "string",
					"description": "The ticket category description"
				},
				"subCategoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket sub category"
				},
				"subCategoryDescription": {
					"type": "string",
					"description": "The ticket sub category description"
				},
				"priority": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket priority"
				},
				"statusId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket status"
				},
				"inserted": {
					"type": "string",
					"format": "date-time",
					"description": "The ticket inserted date"
				},
				"resolved": {
					"type": "string",
					"format": "date-time",
					"description": "The ticket resolved date"
				},
				"items": {
					"type": "array",
					"description": "The ticket order items",
					"items": {
						"originalRef": "OrderItem",
						"$ref": "#/definitions/OrderItem"
					}
				}
			}
		},
		"TicketPage": {
			"type": "object",
			"properties": {
				"content": {
					"type": "array",
					"items": {
						"originalRef": "TicketDTO",
						"$ref": "#/definitions/TicketDTO"
					}
				},
				"number": {
					"type": "integer",
					"format": "int32"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"totalPages": {
					"type": "integer",
					"format": "int32"
				},
				"numberOfElements": {
					"type": "integer",
					"format": "int32"
				},
				"totalElements": {
					"type": "integer",
					"format": "int64"
				},
				"previousPage": {
					"type": "boolean"
				},
				"first": {
					"type": "boolean"
				},
				"nextPage": {
					"type": "boolean"
				},
				"last": {
					"type": "boolean"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"Complaint": {
			"allOf": [
				{
					"originalRef": "TicketRegistrationRequest",
					"$ref": "#/definitions/TicketRegistrationRequest"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The ticket registration request"
				}
			]
		},
		"ConsumableOrderItemReg": {
			"allOf": [
				{
					"originalRef": "OrderItem_",
					"$ref": "#/definitions/OrderItem_"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The order item"
				}
			]
		},
		"Inquiry": {
			"allOf": [
				{
					"originalRef": "TicketRegistrationRequest",
					"$ref": "#/definitions/TicketRegistrationRequest"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The ticket registration request"
				}
			]
		},
		"Order": {
			"allOf": [
				{
					"originalRef": "TicketRegistrationRequest",
					"$ref": "#/definitions/TicketRegistrationRequest"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The ticket registration request"
				}
			]
		},
		"OrderItem_": {
			"type": "object",
			"required": [
				"consumableId",
				"quantity",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The order item type (0: Consumable, 1: Product, 2: VAS)"
				},
				"consumableId": {
					"type": "integer",
					"format": "int64",
					"description": "The order item consumable id"
				},
				"quantity": {
					"type": "integer",
					"format": "int32",
					"description": "The order item quantity"
				}
			},
			"description": "The order item"
		},
		"ProductOrderItemReg": {
			"allOf": [
				{
					"originalRef": "OrderItem_",
					"$ref": "#/definitions/OrderItem_"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The order item"
				}
			]
		},
		"Request": {
			"allOf": [
				{
					"originalRef": "TicketRegistrationRequest",
					"$ref": "#/definitions/TicketRegistrationRequest"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The ticket registration request"
				}
			]
		},
		"TicketRegistrationRequest": {
			"type": "object",
			"required": [
				"name",
				"priority",
				"retailerId",
				"statusId",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"externalId": {
					"type": "integer",
					"format": "int32",
					"description": "The external ticket id"
				},
				"retailerId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket retailer id"
				},
				"userId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket user id"
				},
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket type (0: Inquiry, 1: Request, 2: Troubleshoot, 3: Complaint, 4:Order)"
				},
				"name": {
					"type": "string",
					"description": "The ticket name",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The ticket description",
					"minLength": 0,
					"maxLength": 128
				},
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category"
				},
				"subCategoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket sub category"
				},
				"priority": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket priority"
				},
				"statusId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket status"
				},
				"items": {
					"type": "array",
					"description": "The ticket order items",
					"items": {
						"originalRef": "OrderItem_",
						"$ref": "#/definitions/OrderItem_"
					}
				}
			},
			"description": "The ticket registration request"
		},
		"Troubleshoot": {
			"allOf": [
				{
					"originalRef": "TicketRegistrationRequest",
					"$ref": "#/definitions/TicketRegistrationRequest"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The ticket registration request"
				}
			]
		},
		"VasOrderItemReg": {
			"allOf": [
				{
					"originalRef": "OrderItem_",
					"$ref": "#/definitions/OrderItem_"
				},
				{
					"type": "object",
					"properties": {},
					"description": "The order item"
				}
			]
		},
		"TicketUpdateRequest": {
			"type": "object",
			"properties": {
				"retailerId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket retailer id"
				},
				"userId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket user id"
				},
				"type": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string",
					"description": "The ticket name",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The ticket description",
					"minLength": 0,
					"maxLength": 128
				},
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket category"
				},
				"subCategoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket sub category"
				},
				"priority": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket priority"
				},
				"statusId": {
					"type": "integer",
					"format": "int32",
					"description": "The ticket status"
				},
				"items": {
					"type": "array",
					"description": "The ticket order items",
					"items": {
						"originalRef": "OrderItem_",
						"$ref": "#/definitions/OrderItem_"
					}
				}
			},
			"description": "The ticket update request"
		},
		"TicketStatusDTO": {
			"type": "object",
			"required": [
				"id",
				"name",
				"order"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 64
				},
				"order": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string",
					"minLength": 0,
					"maxLength": 128
				}
			}
		},
		"TicketStatusUpdateRequest": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 64
				},
				"order": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string",
					"minLength": 0,
					"maxLength": 128
				}
			},
			"description": "The ticket status update request"
		},
		"TicketStatusRegistrationRequest": {
			"type": "object",
			"required": [
				"name",
				"order"
			],
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 64
				},
				"order": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string",
					"minLength": 0,
					"maxLength": 128
				}
			},
			"description": "The ticket status registration request"
		},
		"VasCategoryDTO": {
			"type": "object",
			"required": [
				"id",
				"name"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "The vas category id"
				},
				"name": {
					"type": "string",
					"description": "The vas category name",
					"minLength": 1,
					"maxLength": 64
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The vas category external id"
				},
				"vas": {
					"type": "array",
					"description": "The vas which belong to vas category",
					"items": {
						"originalRef": "VasDTO",
						"$ref": "#/definitions/VasDTO"
					}
				}
			}
		},
		"VasDTO": {
			"type": "object",
			"required": [
				"categoryId",
				"id",
				"inserted",
				"price",
				"status",
				"title"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64",
					"description": "The vas id"
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The vas external id"
				},
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The vas category id"
				},
				"title": {
					"type": "string",
					"description": "The vas title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The vas description",
					"minLength": 1,
					"maxLength": 128
				},
				"status": {
					"type": "integer",
					"format": "int32",
					"description": "The vas status",
					"minimum": 0,
					"maximum": 1
				},
				"barcode": {
					"type": "string",
					"description": "The vas barcode"
				},
				"price": {
					"type": "number",
					"description": "The vas price"
				},
				"inserted": {
					"type": "string",
					"format": "date-time",
					"description": "The vas inserted date"
				}
			}
		},
		"VasCategoryRegistrationRequest": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "The VAS category name",
					"minLength": 1,
					"maxLength": 64
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The VAS category external id"
				}
			},
			"description": "The VAS category registration request"
		},
		"VasUpdateRequest": {
			"type": "object",
			"required": [
				"barcode",
				"price",
				"status"
			],
			"properties": {
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable category id"
				},
				"title": {
					"type": "string",
					"description": "The consumable title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The consumable description",
					"minLength": 0,
					"maxLength": 128
				},
				"status": {
					"type": "integer",
					"format": "int32",
					"description": "The consumable status (0 -> INACTIVE, 1 -> ACTIVE)",
					"minimum": 0,
					"maximum": 1
				},
				"barcode": {
					"type": "string",
					"description": "The vas barcode"
				},
				"price": {
					"type": "number",
					"description": "The vas price"
				}
			},
			"description": "The consumable update request"
		},
		"PageVasDTO": {
			"type": "object",
			"properties": {
				"totalElements": {
					"type": "integer",
					"format": "int64"
				},
				"totalPages": {
					"type": "integer",
					"format": "int32"
				},
				"first": {
					"type": "boolean"
				},
				"sort": {
					"originalRef": "Sort",
					"$ref": "#/definitions/Sort"
				},
				"numberOfElements": {
					"type": "integer",
					"format": "int32"
				},
				"pageable": {
					"originalRef": "Pageable",
					"$ref": "#/definitions/Pageable"
				},
				"last": {
					"type": "boolean"
				},
				"size": {
					"type": "integer",
					"format": "int32"
				},
				"content": {
					"type": "array",
					"items": {
						"originalRef": "VasDTO",
						"$ref": "#/definitions/VasDTO"
					}
				},
				"number": {
					"type": "integer",
					"format": "int32"
				},
				"empty": {
					"type": "boolean"
				}
			}
		},
		"VasRegistrationRequest": {
			"type": "object",
			"required": [
				"barcode",
				"categoryId",
				"price",
				"status",
				"title"
			],
			"properties": {
				"categoryId": {
					"type": "integer",
					"format": "int32",
					"description": "The vas category id"
				},
				"title": {
					"type": "string",
					"description": "The vas title",
					"minLength": 1,
					"maxLength": 64
				},
				"description": {
					"type": "string",
					"description": "The vas description",
					"minLength": 0,
					"maxLength": 128
				},
				"status": {
					"type": "integer",
					"format": "int32",
					"description": "The vas status (0 -> INACTIVE, 1 -> ACTIVE)",
					"minimum": 0,
					"maximum": 1
				},
				"barcode": {
					"type": "string",
					"description": "The vas barcode"
				},
				"price": {
					"type": "number",
					"description": "The vas price"
				},
				"externalId": {
					"type": "integer",
					"format": "int64",
					"description": "The vas external Id"
				}
			}
		}
	}
}