{
  "swagger": "2.0",
  "info": {
    "description": "API specification",
    "version": "1.0",
    "title": "edm-adaptor"
  },
  "tags": [{
    "name": "Electronic Draw Machine"
  }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/api/v1.0/reports/{gameId}/{drawId}": {
      "get": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Retrieves the draw file reports defined for a game and draw identifier",
        "description": "Retrieves the detailed description of draw file reports",
        "operationId": "fetchDrawActiveTraditionalRules",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "type",
          "in": "query",
          "description": "Draw file report type. 1:Rules, 2:Population, 3:Results",
          "required": false,
          "type": "integer",
          "maximum": 3,
          "minimum": 1,
          "format": "int32"
        }
        ],
        "responses": {
          "200": {
            "description": "Draw file reports successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawFileReportDTO",
                "originalRef": "DrawFileReportDTO"
              }
            },
            "responseSchema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DrawFileReportDTO",
                "originalRef": "DrawFileReportDTO"
              }
            }
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/draw/info": {
      "post": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Invoked when a draw status changes, in order to kick-off the flow of Edm.",
        "description": "Invoked when a draw status changes, in order to kick-off the flow of Edm.",
        "operationId": "drawInfoChanged",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "The draw info (Draw Status | Winning Numbers | Draw Results)",
          "required": true,
          "schema": {
            "$ref": "#/definitions/DrawDto",
            "originalRef": "DrawDto"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "responseSchema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Runtime Fault",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/draw/create/participation-file/{gameId}/{drawId}": {
      "post": {
        "tags": ["Electronic Draw Machine"],
        "operationId": "createParticipationFile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Draw identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw identifier",
          "required": true,
          "type": "integer",
          "format": "int64"
        }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "responseSchema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Runtime Fault",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/promos": {
      "get": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Retrieves all active promotions",
        "description": "Retrieves the detailed description of defined promotions",
        "operationId": "fetchDrawActiveTraditionalRulePromotions",
        "produces": ["application/json"],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "Filters the response based on the name.",
          "required": false,
          "type": "string"
        }, {
          "name": "page",
          "in": "query",
          "description": "Page number",
          "required": false,
          "type": "integer",
          "default": 0
        }, {
          "name": "limit",
          "in": "query",
          "description": "Results per page",
          "required": false,
          "type": "integer",
          "default": 10
        }, {
          "name": "sort",
          "in": "query",
          "description": "Sorting order. Options: asc, desc",
          "required": false,
          "type": "string",
          "default": "asc"
        }, {
          "name": "column",
          "in": "query",
          "description": "Sorting column. Options: promoId, promoName",
          "required": false,
          "type": "string",
          "default": "promoId"
        }
        ],
        "responses": {
          "200": {
            "description": "Promotions successfully retrieved",
            "schema": {
              "$ref": "#/definitions/PageTraditionalRulePromoResponse",
              "originalRef": "PageTraditionalRulePromoResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/PageTraditionalRulePromoResponse",
              "originalRef": "PageTraditionalRulePromoResponse"
            }
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9013 | Promotion with id: {id} is already assigned to draw rules and it cannot be deleted or updated| Promotion id is already assigned to draw rules  to draw rules and it cannot be deleted or updated |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      },
      "post": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Insert a new promotion",
        "description": "",
        "operationId": "insertDrawTraditionalRulePromotion",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "Promotion to be inserted",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TraditionalRulePromoRequestDTO",
              "originalRef": "TraditionalRulePromoRequestDTO"
            }
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Promotion successfully inserted"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9013 | Promotion with id: {id} is already assigned to draw rules and it cannot be deleted or updated| Promotion id is already assigned to draw rules  to draw rules and it cannot be deleted or updated |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/promos/{promoId}": {
      "get": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Retrieves a promotion given the identifier",
        "description": "",
        "operationId": "getTraditionalRulePromotion",
        "produces": ["application/json"],
        "parameters": [{
          "name": "promoId",
          "in": "path",
          "description": "Promo code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }
        ],
        "responses": {
          "200": {
            "description": "Promotion successfully retrieved",
            "schema": {
              "$ref": "#/definitions/PageTraditionalRuleResponse",
              "originalRef": "PageTraditionalRuleResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/PageTraditionalRuleResponse",
              "originalRef": "PageTraditionalRuleResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Updates a specific promotion defined",
        "description": "Updates the detailed description of a specific promotion given the identifier.",
        "operationId": "updateDrawTraditionalRule",
        "produces": ["application/json"],
        "parameters": [{
          "name": "promoId",
          "in": "path",
          "description": "Promotion identifier",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "in": "body",
          "name": "body",
          "description": "Draw rule to be updated",
          "required": true,
          "schema": {
            "$ref": "#/definitions/TraditionalRulePromoRequestDTO",
            "originalRef": "TraditionalRulePromoRequestDTO"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Promotion successfully updated"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9013 | Promotion with id: {id} is already assigned to draw rules and it cannot be deleted or updated| Promotion id is already assigned to draw rules  to draw rules and it cannot be deleted or updated |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/promo/{promoId}": {
      "delete": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Deletes a specific defined promotion",
        "description": "Deletes the detailed description of a specific promotion given the identifier.",
        "operationId": "deleteDrawTraditionalRulePromotion",
        "produces": ["application/json"],
        "parameters": [{
          "name": "promoId",
          "in": "path",
          "description": "Promotion identifier",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }
        ],
        "responses": {
          "200": {
            "description": "Promotion successfully deleted"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9013 | Promotion with id: {id} is already assigned to draw rules and it cannot be deleted or updated| Promotion id is already assigned to draw rules  to draw rules and it cannot be deleted or updated |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/results": {
      "put": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Processes a draw rules result file",
        "description": "Load in db passive rules results file",
        "operationId": "processLotteryRuleResults",
        "consumes": ["application/xml"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "in": "body",
          "name": "body",
          "description": "Parses, validates and loads draw results",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Rule results file successfully processed"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/all": {
      "get": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Retrieves the active version of traditional rules defined for a game and draw identifier",
        "description": "Retrieves the detailed description of defined prize categories for the given draw and game identifier",
        "operationId": "fetchDrawActiveTraditionalRules_1",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }
        ],
        "responses": {
          "200": {
            "description": "Rules successfully retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TraditionalRuleResponseDTO",
                "originalRef": "TraditionalRuleResponseDTO"
              }
            },
            "responseSchema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TraditionalRuleResponseDTO",
                "originalRef": "TraditionalRuleResponseDTO"
              }
            }
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/{ruleId}/move": {
      "put": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Updates a specific rule defined for a game, draw, and rule",
        "description": "Updates the detailed description of a specific rule for a draw and game given the identifier.",
        "operationId": "moveDrawTraditionalRule",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "ruleId",
          "in": "path",
          "description": "Rule identifier",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "action",
          "in": "query",
          "description": "Move options. Up, Down",
          "required": true,
          "type": "string",
          "enum": ["up", "down"]
        }, {
          "name": "value",
          "in": "query",
          "description": "Move Options: up, down",
          "required": false,
          "type": "string",
          "default": "down"
        }
        ],
        "responses": {
          "200": {
            "description": "Rule successfully updated"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/create": {
      "post": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Creates a rule file",
        "description": "Creates a traditional rules file",
        "operationId": "createLotteryRuleFile",
        "consumes": ["application/xml"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "type",
          "in": "query",
          "description": "Rules or results file type",
          "required": true,
          "type": "string",
          "enum": ["rule", "result"]
        }, {
          "name": "conditional",
          "in": "query",
          "description": "Conditional",
          "required": false,
          "type": "string"
        }
        ],
        "responses": {
          "200": {
            "description": "Rule file successfully created",
            "schema": {
              "type": "string"
            },
            "responseSchema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/clone": {
      "post": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Clones a set of rules defined for a game and draw to a target draw with status Defined or Active",
        "description": "Clones rules for a game and draw to a target draw. If targetDraw has already rules defined will be o",
        "operationId": "cloneLotteryRules",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "toDraw",
          "in": "query",
          "description": "Target draw",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }
        ],
        "responses": {
          "200": {
            "description": "Rules successfully cloned"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/file": {
      "post": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Uploads a traditional rules csv file",
        "description": "Load in db passive rules csv file",
        "operationId": "processLotteryRulesFile",
        "consumes": ["text/plain"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "in": "body",
          "name": "body",
          "description": "Parses, validates and loads traditional rules in csv format",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Rules csv file successfully uploaded"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}": {
      "get": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Retrieves all active version rules for a game and draw with pagination",
        "description": "",
        "operationId": "getPageableTraditionalRules",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "page",
          "in": "query",
          "description": "Page number",
          "required": false,
          "type": "integer",
          "default": 0
        }, {
          "name": "limit",
          "in": "query",
          "description": "Results per page",
          "required": false,
          "type": "integer",
          "default": 10
        }, {
          "name": "sort",
          "in": "query",
          "description": "Sorting order. Options: asc, desc",
          "required": false,
          "type": "string",
          "default": "asc"
        }, {
          "name": "column",
          "in": "query",
          "description": "Sorting column. Options: id.ruleId, lowNumber, highNumber, ruleType, mask, prizeJackpot",
          "required": false,
          "type": "string",
          "default": "id.ruleId"
        }
        ],
        "responses": {
          "200": {
            "description": "Rules successfully retrieved",
            "schema": {
              "$ref": "#/definitions/PageTraditionalRuleResponse",
              "originalRef": "PageTraditionalRuleResponse"
            },
            "responseSchema": {
              "$ref": "#/definitions/PageTraditionalRuleResponse",
              "originalRef": "PageTraditionalRuleResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Insert a new rule defined for a game, draw",
        "description": "",
        "operationId": "insertDrawTraditionalRule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "in": "body",
          "name": "body",
          "description": "Draw rules to be inserted",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TraditionalRuleResultRequestDTO",
              "originalRef": "TraditionalRuleResultRequestDTO"
            }
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Rule successfully inserted"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    },
    "/api/v1.0/rules/{gameId}/{drawId}/{ruleId}": {
      "get": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Retrieves the rule defined for a game, draw, and rule identifier",
        "description": "Retrieves the detailed description of a specific rule for a draw and game given the identifier.",
        "operationId": "fetchDrawTraditionalRule",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "ruleId",
          "in": "path",
          "description": "Rule identifier",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }
        ],
        "responses": {
          "200": {
            "description": "Rule successfully retrieved",
            "schema": {
              "$ref": "#/definitions/TraditionalRuleResponseDTO",
              "originalRef": "TraditionalRuleResponseDTO"
            },
            "responseSchema": {
              "$ref": "#/definitions/TraditionalRuleResponseDTO",
              "originalRef": "TraditionalRuleResponseDTO"
            }
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      },
      "put": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Updates a specific rule defined for a game, draw, and rule",
        "description": "Updates the detailed description of a specific rule for a draw and game given the identifier.",
        "operationId": "updateDrawTraditionalRule_1",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "ruleId",
          "in": "path",
          "description": "Rule identifier",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "in": "body",
          "name": "body",
          "description": "Draw rule to be updated",
          "required": true,
          "schema": {
            "$ref": "#/definitions/TraditionalRuleResultRequestDTO",
            "originalRef": "TraditionalRuleResultRequestDTO"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Rule successfully updated"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      },
      "delete": {
        "tags": ["Electronic Draw Machine"],
        "summary": "Deletes a specific rule defined for a game, draw, and rule",
        "description": "Deletes the detailed description of a specific rule for a draw and game given the identifier.",
        "operationId": "deleteDrawTraditionalRule",
        "produces": ["application/json"],
        "parameters": [{
          "name": "gameId",
          "in": "path",
          "description": "Game code",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }, {
          "name": "drawId",
          "in": "path",
          "description": "Draw number",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int64"
        }, {
          "name": "ruleId",
          "in": "path",
          "description": "Rule identifier",
          "required": true,
          "type": "integer",
          "minimum": 0,
          "format": "int32"
        }
        ],
        "responses": {
          "200": {
            "description": "Rule successfully deleted"
          },
          "400": {
            "description": "Bad request\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 26 | Validation Error: [...] | The request contains invalid or malformed data |\r\n"
          },
          "401": {
            "description": "Unauthorized\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Full authentication is required to access this resource | Access token is missing or invalid |\r\n| - | Access token expired: {token} | Access token has expired |\r\n"
          },
          "404": {
            "description": "Not found\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| - | Not found | Requested item was not found |\r\n| 30 | Entity of class: {class}, id: {id} not found | The class object was not found |\r\n",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          },
          "500": {
            "description": "Internal server error\r\n| Error code | Message | Description |\r\n| :-: | - | - |\r\n| 25 | System Error | Internal error |\r\n| 9010 | Draw {id} found in status {status} | The draw was found in a status not consistent with requested action |\r\n| 9011 | Rules for game {gameId} and draw {id} not found | Given game and draw no rules found |\r\n| 9012 | Rules uploading failed due to invalid csv file or data for game {gameId} and draw {id} | Rules uploading failed due to invalid csv file or data |",
            "schema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/FaultInfo",
              "originalRef": "FaultInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DrawFileReportDTO": {
      "type": "object",
      "required": ["drawId", "gameId", "gameName", "hashId", "records", "reportId", "tm", "type"],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game identifier"
        },
        "gameName": {
          "type": "string",
          "description": "Game name"
        },
        "drawId": {
          "type": "integer",
          "format": "int64",
          "description": "Draw identifier"
        },
        "reportId": {
          "type": "integer",
          "format": "int32",
          "description": "Report identifier"
        },
        "type": {
          "type": "string",
          "description": "Report type"
        },
        "fileName": {
          "type": "string",
          "description": "Report file name"
        },
        "tm": {
          "type": "string",
          "format": "date-time",
          "description": "Creating time"
        },
        "hashId": {
          "type": "string",
          "description": "Hash key"
        },
        "records": {
          "type": "integer",
          "format": "int64",
          "description": "Number of records"
        }
      },
      "description": "Draw file report response"
    },
    "FaultInfo": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The error code"
        },
        "message": {
          "type": "string",
          "description": "The error message"
        },
        "data": {
          "type": "array",
          "description": "The error data which is an abstract object that may be used to provide any error metadata",
          "items": {
            "type": "object"
          }
        },
        "source": {
          "type": "string",
          "description": "The application at which the API error occured"
        },
        "type": {
          "type": "string",
          "description": "The error family, e.g. RUNTIME, VALIDATION, etc"
        }
      },
      "description": "The FaultInfo object contains all the details assosiated with an API error"
    },
    "AddOnPricePointsV3DTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "gameType": {
          "type": "string"
        }
      }
    },
    "DrawAnimationV3DTO": {
      "type": "object",
      "properties": {
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Denotes in UTC the timestamp that an animation starts"
        },
        "stayDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Denotes how long (in milliseconds) an animation hop will last"
        },
        "steps": {
          "type": "array",
          "description": "Denotes the list of steps before a number is finally marked as a winning one. Note that maximum X steps are specified before reaching an actual winning number",
          "items": {
            "$ref": "#/definitions/StepV3",
            "originalRef": "StepV3"
          }
        }
      }
    },
    "DrawDto": {
      "type": "object",
      "required": ["namespace", "stateId"],
      "properties": {
        "stateId": {
          "type": "string",
          "example": "716017",
          "description": "The State ID"
        },
        "previousStateId": {
          "type": "string",
          "description": "The Previous State ID"
        },
        "namespace": {
          "type": "string",
          "example": "/draw/5107/74",
          "description": "The Namespace"
        },
        "draw": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/DrawV3",
              "originalRef": "DrawV3"
            }
          }
        }
      },
      "description": "Draw Request Dto"
    },
    "DrawResultV3": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique id of the result"
        },
        "divident": {
          "type": "number",
          "format": "double",
          "description": "Divident amount per winner of category"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Number of category winners"
        },
        "distributed": {
          "type": "number",
          "format": "double",
          "description": "Distributed amount to all winners of category (net amount)"
        },
        "jackpot": {
          "type": "number",
          "format": "double",
          "description": "Jackpot amount of category"
        },
        "fixed": {
          "type": "number",
          "format": "double",
          "description": "Fixed winning amount of category"
        },
        "categoryType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of category. 0:NormalDividend, 1:FixedAmount, 2:FixedOdds, 3:DividendSharedWithOther, 4:PromotionWinner, 5:ProgressiveJackpot"
        },
        "promotionId": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion id of category. It will be null if not applicable."
        },
        "gameType": {
          "type": "string",
          "description": "The game type related to the category."
        }
      }
    },
    "DrawV3": {
      "type": "object",
      "required": ["drawBreak", "drawId", "drawTime", "gameId", "gameRuleVersion", "pricePoints", "prizeCategories", "status", "statusNr", "visualDraw"],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game code"
        },
        "drawId": {
          "type": "integer",
          "format": "int32",
          "description": "Draw number"
        },
        "drawTime": {
          "type": "integer",
          "format": "int64",
          "description": "Draw time in UTC in milliseconds"
        },
        "status": {
          "type": "string",
          "description": "Draw status (enumeration)",
          "enum": ["future", "active", "completed", "pendingResults", "results"]
        },
        "statusNr": {
          "type": "integer",
          "format": "int32",
          "description": "Draw status (number)"
        },
        "drawBreak": {
          "type": "integer",
          "format": "int64",
          "description": "Draw break in milliseconds"
        },
        "visualDraw": {
          "type": "integer",
          "format": "int32",
          "description": "Visual draw number, a recurring draw number"
        },
        "gameRuleVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Game rule version"
        },
        "pricePoints": {
          "description": "Price points",
          "$ref": "#/definitions/PricePointsV3DTO",
          "originalRef": "PricePointsV3DTO"
        },
        "winningNumbers": {
          "type": "array",
          "description": "Array of winning numbers for each winning column.",
          "items": {
            "$ref": "#/definitions/WinningNumbersV3DTO",
            "originalRef": "WinningNumbersV3DTO"
          }
        },
        "prizeCategories": {
          "type": "array",
          "description": "Prize categories",
          "items": {
            "$ref": "#/definitions/DrawResultV3",
            "originalRef": "DrawResultV3"
          }
        },
        "wagerStatistics": {
          "description": "Wager statistics",
          "$ref": "#/definitions/WagerStatisticsDTO",
          "originalRef": "WagerStatisticsDTO"
        },
        "animation": {
          "description": "Draw animation. Provides centralized information on how the draw should be animated. It is not available on all games and it is not inlcuded by default.",
          "$ref": "#/definitions/DrawAnimationV3DTO",
          "originalRef": "DrawAnimationV3DTO"
        },
        "drawType": {
          "type": "string",
          "description": "DAY or EVE indicator. Applicable only for games that have day and eve draws"
        }
      }
    },
    "PricePointsV3DTO": {
      "type": "object",
      "properties": {
        "addOn": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddOnPricePointsV3DTO",
            "originalRef": "AddOnPricePointsV3DTO"
          }
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "StepV3": {
      "type": "object",
      "properties": {
        "bonusNumber": {
          "type": "boolean"
        },
        "hopToNumber": {
          "type": "integer",
          "format": "int32"
        },
        "winningNumber": {
          "type": "boolean",
          "example": false,
          "description": "Denotes whether the API consumer should mark at this specific step the number as part of the winning ones. If false, then an additional step is expected for that winning number"
        }
      }
    },
    "WagerStatisticsDTO": {
      "type": "object",
      "required": ["columns"],
      "properties": {
        "columns": {
          "type": "integer",
          "format": "int32",
          "description": "Total columns"
        },
        "wagers": {
          "type": "integer",
          "format": "int32",
          "description": "Total wagers"
        }
      }
    },
    "WinningNumbersV3DTO": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "description": "Winning numbers list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "Page": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort",
          "originalRef": "Sort"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable",
          "originalRef": "Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "PageTraditionalRulePromoResponseDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort",
          "originalRef": "Sort"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable",
          "originalRef": "Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TraditionalRulePromoResponseDTO",
            "originalRef": "TraditionalRulePromoResponseDTO"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort",
          "originalRef": "Sort"
        },
        "unpaged": {
          "type": "boolean"
        },
        "paged": {
          "type": "boolean"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "sorted": {
          "type": "boolean"
        },
        "unsorted": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "TraditionalRulePromoResponseDTO": {
      "type": "object",
      "required": ["promoAmount", "promoId", "promoName", "promoShortName"],
      "properties": {
        "promoId": {
          "type": "integer",
          "format": "int32",
          "description": "Promotion identifier"
        },
        "promoName": {
          "type": "string",
          "description": "Promotion name"
        },
        "promoShortName": {
          "type": "string",
          "description": "Promotion short name"
        },
        "promoAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion amount"
        },
        "imgUrlSmall": {
          "type": "string",
          "description": "Image url small"
        },
        "imgUrlLarge": {
          "type": "string",
          "description": "High number"
        }
      },
      "description": "Traditional rule promotion response"
    },
    "PageTraditionalRulePromoResponse": {
      "type": "object",
      "properties": {
        "promoId": {
          "type": "integer",
          "format": "int32"
        },
        "promoName": {
          "type": "string"
        },
        "promoShortName": {
          "type": "string"
        },
        "promoAmount": {
          "type": "integer",
          "format": "int64"
        },
        "imgUrlSmall": {
          "type": "string"
        },
        "imgUrlLarge": {
          "type": "string"
        }
      }
    },
    "PageTraditionalRuleResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TraditionalRuleResponseDTO",
            "originalRef": "TraditionalRuleResponseDTO"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort",
          "originalRef": "Sort"
        }
      }
    },
    "TraditionalRuleResponseDTO": {
      "type": "object",
      "required": ["drawId", "gameId", "ruleId"],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game identifier"
        },
        "drawId": {
          "type": "integer",
          "format": "int64",
          "description": "Draw identifier"
        },
        "ruleId": {
          "type": "integer",
          "format": "int32",
          "description": "Rule identifier"
        },
        "lowNumber": {
          "type": "string",
          "description": "Low number"
        },
        "highNumber": {
          "type": "string",
          "description": "High number"
        },
        "prizeMultipleDrawn": {
          "type": "string",
          "description": "Prize multipleDrawn"
        },
        "prizeGuaranteed": {
          "type": "string",
          "description": "Prize guaranteed"
        },
        "mask": {
          "type": "string",
          "description": "Mask"
        },
        "publicDraw": {
          "type": "string",
          "description": "Public draw"
        },
        "prize": {
          "type": "number",
          "description": "Prize"
        },
        "hashId": {
          "type": "string",
          "description": "Hash identifier"
        },
        "drawResult": {
          "type": "string",
          "description": "Draw result"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "Draw number"
        },
        "prizeDescription": {
          "type": "string",
          "description": "Prize description"
        },
        "runOnce": {
          "type": "string",
          "description": "Run once"
        },
        "curId": {
          "type": "string",
          "description": "Current identifier"
        },
        "prizeJackpot": {
          "type": "string",
          "description": "Prize jackpot"
        },
        "drawRound": {
          "type": "integer",
          "format": "int32",
          "description": "Draw round"
        },
        "prizeConsolation": {
          "type": "string",
          "description": "Prize consolation"
        },
        "promoId": {
          "type": "integer",
          "format": "int32",
          "description": "Promotion identifier"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Winners count"
        },
        "conditional": {
          "type": "string",
          "description": "Conditional"
        },
        "prizeMarketingVersion": {
          "type": "string",
          "description": "Prize marketing version"
        },
        "ruleReferenceId": {
          "type": "integer",
          "format": "int32",
          "description": "Rule reference identifier"
        },
        "conditions": {
          "type": "string",
          "description": "Conditions"
        },
        "comparison": {
          "type": "string",
          "description": "Comparison"
        },
        "conditionValue": {
          "type": "string",
          "description": "Condition Value"
        },
        "prizeXL": {
          "type": "string",
          "description": "Prize XL"
        },
        "winTicketSold": {
          "type": "string",
          "description": "Winning tickets sold"
        },
        "winTicketXLSold": {
          "type": "string",
          "description": "Winning tickets XL sold"
        },
        "ruleType": {
          "type": "integer",
          "format": "int32",
          "description": "Rule Type"
        },
        "promoValue": {
          "type": "integer",
          "format": "int32",
          "description": "Promotion value"
        },
        "ruleReferencePosition": {
          "type": "integer",
          "format": "int32",
          "description": "Rule reference position"
        },
        "ruleReferenceLength": {
          "type": "integer",
          "format": "int32",
          "description": "Rule reference length"
        },
        "rulePosition": {
          "type": "integer",
          "format": "int32",
          "description": "Rule position"
        }
      },
      "description": "Traditional rule response"
    },
    "TraditionalRulePromoRequestDTO": {
      "type": "object",
      "required": ["promoAmount", "promoName", "promoShortName"],
      "properties": {
        "promoName": {
          "type": "string",
          "description": "Promotion name"
        },
        "promoShortName": {
          "type": "string",
          "description": "Promotion short name"
        },
        "promoAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Promotion amount"
        },
        "imgUrlSmall": {
          "type": "string",
          "description": "Image url small"
        },
        "imgUrlLarge": {
          "type": "string",
          "description": "High number"
        }
      },
      "description": "Traditional rule promotion request"
    },
    "PageTraditionalRuleResponseDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "first": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort",
          "originalRef": "Sort"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "last": {
          "type": "boolean"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable",
          "originalRef": "Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TraditionalRuleResponseDTO",
            "originalRef": "TraditionalRuleResponseDTO"
          }
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "TraditionalRuleResultRequestDTO": {
      "type": "object",
      "required": ["drawId", "gameId", "ruleId", "ruleType"],
      "properties": {
        "gameId": {
          "type": "integer",
          "format": "int32",
          "description": "Game identifier"
        },
        "drawId": {
          "type": "integer",
          "format": "int64",
          "description": "Draw identifier"
        },
        "ruleId": {
          "type": "integer",
          "format": "int32",
          "description": "Rule identifier"
        },
        "lowNumber": {
          "type": "string",
          "description": "Low number"
        },
        "highNumber": {
          "type": "string",
          "description": "High number"
        },
        "prizeMultipleDrawn": {
          "type": "string",
          "description": "Prize multipleDrawn"
        },
        "prizeGuaranteed": {
          "type": "string",
          "description": "Prize guaranteed"
        },
        "mask": {
          "type": "string",
          "description": "Mask"
        },
        "publicDraw": {
          "type": "string",
          "description": "Public draw"
        },
        "prize": {
          "type": "number",
          "description": "Prize"
        },
        "hashId": {
          "type": "string",
          "description": "Hash identifier"
        },
        "drawResult": {
          "type": "string",
          "description": "Draw result"
        },
        "drawNumber": {
          "type": "integer",
          "format": "int64",
          "description": "Draw number"
        },
        "prizeDescription": {
          "type": "string",
          "description": "Prize description"
        },
        "runOnce": {
          "type": "string",
          "description": "Run once"
        },
        "curId": {
          "type": "string",
          "description": "Current identifier"
        },
        "prizeJackpot": {
          "type": "string",
          "description": "Prize jackpot"
        },
        "drawRound": {
          "type": "integer",
          "format": "int32",
          "description": "Draw round"
        },
        "prizeConsolation": {
          "type": "string",
          "description": "Prize consolation"
        },
        "promoId": {
          "type": "integer",
          "format": "int32",
          "description": "Promotion identifier"
        },
        "winners": {
          "type": "integer",
          "format": "int32",
          "description": "Winners count"
        },
        "conditional": {
          "type": "string",
          "description": "Conditional"
        },
        "prizeMarketingVersion": {
          "type": "string",
          "description": "Prize marketing version"
        },
        "ruleReferenceId": {
          "type": "integer",
          "format": "int32",
          "description": "Rule reference identifier"
        },
        "conditions": {
          "type": "string",
          "description": "Conditions"
        },
        "comparison": {
          "type": "string",
          "description": "Comparison"
        },
        "conditionValue": {
          "type": "string",
          "description": "Condition Value"
        },
        "prizeXL": {
          "type": "string",
          "description": "Prize XL",
          "enum": ["J: XL Prize", "N: Normal"]
        },
        "winTicketSold": {
          "type": "string",
          "description": "Winning tickets sold",
          "enum": ["J: Win Ticket Sold (XL", "Not Important)", "N: Win Ticket Sold Unimportant"]
        },
        "winTicketXLSold": {
          "type": "string",
          "description": "Winning tickets XL sold",
          "enum": ["J: Win XL Ticket Sold", "N: Win XL Ticket Sold Unimportant"]
        },
        "ruleType": {
          "type": "integer",
          "format": "int32",
          "description": "Rule TP"
        },
        "promoValue": {
          "type": "integer",
          "format": "int32",
          "description": "Promotion value"
        },
        "ruleReferencePosition": {
          "type": "integer",
          "format": "int32",
          "description": "Rule reference position"
        },
        "ruleReferenceLength": {
          "type": "integer",
          "format": "int32",
          "description": "Rule reference length"
        },
        "rulePosition": {
          "type": "integer",
          "format": "int32",
          "description": "Rule position"
        }
      },
      "description": "Traditional rule results request"
    }
  }
}